--[[
 .____                  ________ ___.    _____                           __                
 |    |    __ _______   \_____  \\_ |___/ ____\_ __  ______ ____ _____ _/  |_  ___________ 
 |    |   |  |  \__  \   /   |   \| __ \   __\  |  \/  ___// ___\\__  \\   __\/  _ \_  __ \
 |    |___|  |  // __ \_/    |    \ \_\ \  | |  |  /\___ \\  \___ / __ \|  | (  <_> )  | \/
 |_______ \____/(____  /\_______  /___  /__| |____//____  >\___  >____  /__|  \____/|__|   
         \/          \/         \/    \/                \/     \/     \/                   
          \_Welcome to LuaObfuscator.com   (Alpha 0.10.7) ~  Much Love, Ferib 

]]--

bit32 = {};
local N = 32;
local P = 2 ^ N;
bit32.bnot = function(x)
	x = x % P;
	return (P - 1) - x;
end;
bit32.band = function(x, y)
	if (y == 255) then
		return x % 256;
	end
	if (y == 65535) then
		return x % 65536;
	end
	if (y == 4294967295) then
		return x % 4294967296;
	end
	x, y = x % P, y % P;
	local r = 0;
	local p = 1;
	for i = 1, N do
		local a, b = x % 2, y % 2;
		x, y = math.floor(x / 2), math.floor(y / 2);
		if ((a + b) == 2) then
			r = r + p;
		end
		p = 2 * p;
	end
	return r;
end;
bit32.bor = function(x, y)
	if (y == 255) then
		return (x - (x % 256)) + 255;
	end
	if (y == 65535) then
		return (x - (x % 65536)) + 65535;
	end
	if (y == 4294967295) then
		return 4294967295;
	end
	x, y = x % P, y % P;
	local r = 0;
	local p = 1;
	for i = 1, N do
		local a, b = x % 2, y % 2;
		x, y = math.floor(x / 2), math.floor(y / 2);
		if ((a + b) >= 1) then
			r = r + p;
		end
		p = 2 * p;
	end
	return r;
end;
bit32.bxor = function(x, y)
	x, y = x % P, y % P;
	local r = 0;
	local p = 1;
	for i = 1, N do
		local a, b = x % 2, y % 2;
		x, y = math.floor(x / 2), math.floor(y / 2);
		if ((a + b) == 1) then
			r = r + p;
		end
		p = 2 * p;
	end
	return r;
end;
bit32.lshift = function(x, s_amount)
	if (math.abs(s_amount) >= N) then
		return 0;
	end
	x = x % P;
	if (s_amount < 0) then
		return math.floor(x * (2 ^ s_amount));
	else
		return (x * (2 ^ s_amount)) % P;
	end
end;
bit32.rshift = function(x, s_amount)
	if (math.abs(s_amount) >= N) then
		return 0;
	end
	x = x % P;
	if (s_amount > 0) then
		return math.floor(x * (2 ^ -s_amount));
	else
		return (x * (2 ^ -s_amount)) % P;
	end
end;
bit32.arshift = function(x, s_amount)
	if (math.abs(s_amount) >= N) then
		return 0;
	end
	x = x % P;
	if (s_amount > 0) then
		local add = 0;
		if (x >= (P / 2)) then
			add = P - (2 ^ (N - s_amount));
		end
		return math.floor(x * (2 ^ -s_amount)) + add;
	else
		return (x * (2 ^ -s_amount)) % P;
	end
end;
local v0 = tonumber;
local v1 = string.byte;
local v2 = string.char;
local v3 = string.sub;
local v4 = string.gsub;
local v5 = string.rep;
local v6 = table.concat;
local v7 = table.insert;
local v8 = math.ldexp;
local v9 = getfenv or function()
	return _ENV;
end;
local v10 = setmetatable;
local v11 = pcall;
local v12 = select;
local v13 = unpack or table.unpack;
local v14 = tonumber;
local function v15(v16, v17, ...)
	local v18 = 1;
	local v19;
	v16 = v4(v3(v16, 5), "..", function(v30)
		if (v1(v30, 2) == 79) then
			v19 = v0(v3(v30, 1, 1));
			return "";
		else
			local v85 = 0;
			local v86;
			while true do
				if (v85 == 0) then
					v86 = v2(v0(v30, 16));
					if v19 then
						local v119 = v5(v86, v19);
						v19 = nil;
						return v119;
					else
						return v86;
					end
					break;
				end
			end
		end
	end);
	local function v20(v31, v32, v33)
		if v33 then
			local v87 = (0 + 0) - 0;
			local v88;
			while true do
				if (v87 == 0) then
					v88 = (v31 / ((5 - 3) ^ (v32 - (1 - 0)))) % (((881 - (282 + 595)) - (1639 - (1523 + 114))) ^ (((v33 - (620 - (555 + 64))) - (v32 - (932 - (857 + 74)))) + 1));
					return v88 - (v88 % (569 - (367 + 201)));
				end
			end
		else
			local v89 = 2 ^ (v32 - (928 - (214 + 713)));
			return (((v31 % (v89 + v89)) >= v89) and 1) or (0 + 0);
		end
	end
	local function v21()
		local v34 = v1(v16, v18, v18);
		v18 = v18 + 1;
		return v34;
	end
	local function v22()
		local v35, v36 = v1(v16, v18, v18 + 2 + 0);
		v18 = v18 + (2 - 0);
		return (v36 * (1321 - (68 + 997))) + v35;
	end
	local function v23()
		local v37, v38, v39, v40 = v1(v16, v18, v18 + 3);
		v18 = v18 + (1274 - (226 + 1044));
		return (v40 * 16777216) + (v39 * (285370 - 219834)) + (v38 * (373 - (32 + 84 + 1))) + v37;
	end
	local function v24()
		local v41 = v23();
		local v42 = v23();
		local v43 = 1;
		local v44 = (v20(v42, 1 + 0, (570 + 407) - (892 + 65)) * (2 ^ 32)) + v41;
		local v45 = v20(v42, 49 - 28, 31);
		local v46 = ((v20(v42, 32) == (1 - 0)) and -((1 - 0) - 0)) or (351 - (87 + 263));
		if (v45 == (180 - (67 + 113))) then
			if (v44 == (0 + 0)) then
				return v46 * (0 - 0);
			else
				v45 = 1 + 0;
				v43 = 0 - 0;
			end
		elseif (v45 == (2999 - (802 + 150))) then
			return ((v44 == ((1187 - (1069 + 118)) - 0)) and (v46 * (1 / (0 - 0)))) or (v46 * NaN);
		end
		return v8(v46, v45 - ((1689 - 944) + (607 - 329))) * (v43 + (v44 / ((999 - (915 + 82)) ^ (147 - 95))));
	end
	local function v25(v47)
		local v48 = 0 + 0;
		local v49;
		local v50;
		while true do
			if (v48 == (3 - 1)) then
				v50 = {};
				for v106 = 1 + (0 - 0), #v49 do
					v50[v106] = v2(v1(v3(v49, v106, v106)));
				end
				v48 = 3;
			end
			if (((1232 - (145 + 293)) - (368 + 423)) == v48) then
				return v6(v50);
			end
			if (v48 == (3 - 2)) then
				v49 = v3(v16, v18, (v18 + v47) - (19 - (10 + 8)));
				v18 = v18 + v47;
				v48 = (437 - (44 + 386)) - 5;
			end
			if (v48 == (442 - (416 + 26))) then
				v49 = nil;
				if not v47 then
					v47 = v23();
					if (v47 == ((1486 - (998 + 488)) - 0)) then
						return "";
					end
				end
				v48 = 1 + 0;
			end
		end
	end
	local v26 = v23;
	local function v27(...)
		return {...}, v12("#", ...);
	end
	local function v28()
		local v51 = (function()
			return function(v90, v91, v92, v93, v94, v95, v96, v97)
				local v90 = (function()
					return 0 - 0;
				end)();
				local v91 = (function()
					return;
				end)();
				local v92 = (function()
					return;
				end)();
				while true do
					if (v90 == #">") then
						if (v91 == #"[") then
							v92 = (function()
								return v93() ~= 0;
							end)();
						elseif (v91 == (6 - 4)) then
							v92 = (function()
								return v94();
							end)();
						elseif (v91 == #"xxx") then
							v92 = (function()
								return v95();
							end)();
						end
						v96[v97] = (function()
							return v92;
						end)();
						break;
					end
					if (v90 == (0 - 0)) then
						local v113 = (function()
							return 0 + 0;
						end)();
						local v114 = (function()
							return;
						end)();
						while true do
							if (v113 == (0 + 0)) then
								v114 = (function()
									return 0 - 0;
								end)();
								while true do
									if (v114 ~= 0) then
									else
										v91 = (function()
											return v93();
										end)();
										v92 = (function()
											return nil;
										end)();
										v114 = (function()
											return 1;
										end)();
									end
									if (v114 ~= (1 + 0)) then
									else
										v90 = (function()
											return #".";
										end)();
										break;
									end
								end
								break;
							end
						end
					end
				end
				return v90, v91, v92, v93, v94, v95, v96, v97;
			end;
		end)();
		local v52 = (function()
			return function(v98, v99, v100)
				local v101 = (function()
					return 1474 - (1329 + 145);
				end)();
				local v102 = (function()
					return;
				end)();
				while true do
					if (v101 == (971 - (140 + 831))) then
						v102 = (function()
							return 1850 - (1409 + 441);
						end)();
						while true do
							if ((718 - (15 + 703)) == v102) then
								local v120 = (function()
									return 0;
								end)();
								while true do
									if (v120 == (0 - 0)) then
										v98[v99 - #"!"] = (function()
											return v100();
										end)();
										return v98, v99, v100;
									end
								end
							end
						end
						break;
					end
				end
			end;
		end)();
		local v53 = (function()
			return {};
		end)();
		local v54 = (function()
			return {};
		end)();
		local v55 = (function()
			return {};
		end)();
		local v56 = (function()
			return {v53,v54,nil,v55};
		end)();
		local v57 = (function()
			return v23();
		end)();
		local v58 = (function()
			return {};
		end)();
		for v66 = #">", v57 do
			FlatIdent_7DD24, Type, Cons, v21, v24, v25, v58, v66 = (function()
				return v51(FlatIdent_7DD24, Type, Cons, v21, v24, v25, v58, v66);
			end)();
		end
		v56[#"nil"] = (function()
			return v21();
		end)();
		for v67 = #"[", v23() do
			local v68 = (function()
				return 0;
			end)();
			local v69 = (function()
				return;
			end)();
			while true do
				if (v68 == (0 + 0)) then
					v69 = (function()
						return v21();
					end)();
					if (v20(v69, #"}", #">") == (0 + 0)) then
						local v115 = (function()
							return 0;
						end)();
						local v116 = (function()
							return;
						end)();
						local v117 = (function()
							return;
						end)();
						local v118 = (function()
							return;
						end)();
						while true do
							if (v115 == (439 - (262 + 176))) then
								local v121 = (function()
									return 0;
								end)();
								local v122 = (function()
									return;
								end)();
								while true do
									if (v121 ~= 0) then
									else
										v122 = (function()
											return 1721 - (345 + 1376);
										end)();
										while true do
											if (v122 == (397 - (115 + 281))) then
												v115 = (function()
													return 690 - (198 + 490);
												end)();
												break;
											end
											if ((0 - 0) == v122) then
												v118 = (function()
													return {v22(),v22(),nil,nil};
												end)();
												if (v116 == (0 - 0)) then
													local v130 = (function()
														return 0;
													end)();
													while true do
														if (v130 == 0) then
															v118[#"asd"] = (function()
																return v22();
															end)();
															v118[#"0313"] = (function()
																return v22();
															end)();
															break;
														end
													end
												elseif (v116 == #"{") then
													v118[#"91("] = (function()
														return v23();
													end)();
												elseif (v116 == (4 - 2)) then
													v118[#"asd"] = (function()
														return v23() - (2 ^ 16);
													end)();
												elseif (v116 ~= #"19(") then
												else
													local v4506 = (function()
														return 1206 - (696 + 510);
													end)();
													local v4507 = (function()
														return;
													end)();
													while true do
														if (v4506 ~= (0 - 0)) then
														else
															v4507 = (function()
																return 1262 - (1091 + 171);
															end)();
															while true do
																if (0 ~= v4507) then
																else
																	v118[#"asd"] = (function()
																		return v23() - ((1 + 1) ^ (50 - 34));
																	end)();
																	v118[#"?id="] = (function()
																		return v22();
																	end)();
																	break;
																end
															end
															break;
														end
													end
												end
												v122 = (function()
													return 3 - 2;
												end)();
											end
										end
										break;
									end
								end
							end
							if (v115 ~= (285 - (134 + 151))) then
							else
								local v123 = (function()
									return 374 - (123 + 251);
								end)();
								while true do
									if (v123 == (1665 - (970 + 695))) then
										local v129 = (function()
											return 0;
										end)();
										while true do
											if (v129 == (1 - 0)) then
												v123 = (function()
													return 1991 - (582 + 1408);
												end)();
												break;
											end
											if (v129 ~= 0) then
											else
												v116 = (function()
													return v20(v69, 9 - 7, #"19(");
												end)();
												v117 = (function()
													return v20(v69, #"asd1", 704 - (208 + 490));
												end)();
												v129 = (function()
													return 1;
												end)();
											end
										end
									end
									if (v123 == 1) then
										v115 = (function()
											return 1 + 0;
										end)();
										break;
									end
								end
							end
							if (v115 == 3) then
								if (v20(v117, #"-19", #"xnx") ~= #"\\") then
								else
									v118[#".dev"] = (function()
										return v58[v118[#"?id="]];
									end)();
								end
								v53[v67] = (function()
									return v118;
								end)();
								break;
							end
							if (v115 ~= (6 - 4)) then
							else
								if (v20(v117, #"|", #"[") == #"!") then
									v118[2] = (function()
										return v58[v118[1 + 1]];
									end)();
								end
								if (v20(v117, 838 - (660 + 176), 2) == #"[") then
									v118[#"91("] = (function()
										return v58[v118[#"xxx"]];
									end)();
								end
								v115 = (function()
									return 1 + 2;
								end)();
							end
						end
					end
					break;
				end
			end
		end
		for v70 = #"~", v23() do
			v54, v70, v28 = (function()
				return v52(v54, v70, v28);
			end)();
		end
		return v56;
	end
	local function v29(v60, v61, v62)
		local v63 = v60[3 - 2];
		local v64 = v60[(219 + 1607) - (1195 + 629)];
		local v65 = v60[3 - (1634 - (1428 + 206))];
		return function(...)
			local v71 = v63;
			local v72 = v64;
			local v73 = v65;
			local v74 = v27;
			local v75 = 242 - (187 + 54);
			local v76 = -((2286 - (1207 + 298)) - (162 + 618));
			local v77 = {};
			local v78 = {...};
			local v79 = v12("#", ...) - 1;
			local v80 = {};
			local v81 = {};
			for v103 = 0, v79 do
				if (v103 >= v73) then
					v77[v103 - v73] = v78[v103 + 1 + 0];
				else
					v81[v103] = v78[v103 + (1 - 0)];
				end
			end
			local v82 = (v79 - v73) + (349 - (224 + 124));
			local v83;
			local v84;
			while true do
				v83 = v71[v75];
				v84 = v83[1];
				if ((710 == 710) and (v84 <= (359 - 145))) then
					if ((v84 <= 106) or (930 >= 1726)) then
						if (v84 <= 52) then
							if ((4265 >= 111) and (v84 <= (2 + 23))) then
								if (v84 <= (1648 - (1373 + (295 - (7 + 25))))) then
									if (v84 <= (1005 - (451 + 549))) then
										if (v84 <= (1 + (2 - 1))) then
											if (v84 <= (0 - 0)) then
												local v131;
												local v132;
												local v133;
												v81[v83[2 - 0]] = v81[v83[1387 - ((1798 - (886 + 166)) + 638)]][v81[v83[(2 - 0) + 2]]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[(1 + 1) - 0]] = v83[3];
												v75 = v75 + ((660 - (142 + 176)) - (218 + 123));
												v83 = v71[v75];
												v81[v83[1583 - (1535 + 46)]] = v81[v83[3 + 0]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[562 - (306 + 254)]] = v83[1 + 2];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v133 = v83[1469 - (899 + 568)];
												v132 = v81[v133];
												v131 = v81[v133 + 2 + 0];
												if (v131 > 0) then
													if ((2241 <= 2299) and (v132 > v81[v133 + (2 - 1)])) then
														v75 = v83[3 + 0];
													else
														v81[v133 + (606 - (268 + 335))] = v132;
													end
												elseif (v132 < v81[v133 + 1]) then
													v75 = v83[293 - (60 + 230)];
												else
													v81[v133 + (575 - (426 + 146))] = v132;
												end
											elseif (v84 > 1) then
												local v898;
												v81[v83[2]] = v81[v83[3]][v81[v83[4]]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[1458 - (282 + (2112 - (584 + 354)))]] = v61[v83[814 - ((1057 - (384 + 104)) + 242)]];
												v75 = v75 + (2 - (2 - 1));
												v83 = v71[v75];
												v81[v83[1 + 1]] = v81[v83[1027 - (706 + 318)]];
												v75 = v75 + (1252 - (721 + 530));
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[1274 - (945 + 326)]];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[2]] = v61[v83[3]];
												v75 = v75 + (36 - (13 + 22)) + 0;
												v83 = v71[v75];
												v898 = v83[702 - (271 + 429)];
												v81[v898] = v81[v898](v13(v81, v898 + 1 + 0, v83[1503 - (1408 + 92)]));
												v75 = v75 + (1087 - (461 + 625));
												v83 = v71[v75];
												v81[v83[1290 - (993 + 295)]][v81[v83[1 + 0 + 2]]] = v81[v83[1175 - (418 + 753)]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v75 = v83[3];
											elseif (v83[1 + 1] == v83[4]) then
												v75 = v75 + 1;
											else
												v75 = v83[1 + 2];
											end
										elseif ((4776 >= 1366) and (v84 <= (1 + 0 + 2))) then
											local v146;
											local v147;
											local v148, v149;
											local v150;
											v81[v83[2]] = v81[v83[1 + 2]][v83[533 - (406 + 123)]];
											v75 = v75 + (1770 - (1749 + 20));
											v83 = v71[v75];
											v81[v83[1 + 1]] = {};
											v75 = v75 + (1323 - (1249 + (147 - 74)));
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[1148 - (466 + 679)]][v81[v83[9 - 5]]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v150 = v83[2];
											v148, v149 = v74(v81[v150]());
											v76 = (v149 + v150) - (1901 - (106 + 1794));
											v147 = 0 + 0;
											for v862 = v150, v76 do
												local v863 = 0;
												while true do
													if (v863 == (0 + 0)) then
														v147 = v147 + (2 - 1);
														v81[v862] = v148[v147];
														break;
													end
												end
											end
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v150 = v83[2];
											v146 = v81[v150];
											for v864 = v150 + (115 - (4 + (304 - 194))), v76 do
												v7(v146, v81[v864]);
											end
										elseif (v84 == (588 - (57 + 527))) then
											local v913 = 1427 - (41 + 1386);
											local v914;
											local v915;
											local v916;
											while true do
												if ((297 < 4205) and ((105 - (17 + 86)) == v913)) then
													v81[v83[2 + 0]] = v83[6 - 3];
													v75 = v75 + (2 - 1);
													v83 = v71[v75];
													v913 = 3;
												end
												if (v913 == ((470 - 298) - (122 + 44))) then
													if (v914 > (0 - 0)) then
														if ((2420 >= 1428) and (v915 > v81[v916 + (3 - 2)])) then
															v75 = v83[3 + 0];
														else
															v81[v916 + 1 + 2] = v915;
														end
													elseif ((1595 == 1595) and (v915 < v81[v916 + 1])) then
														v75 = v83[3];
													else
														v81[v916 + ((2 + 3) - 2)] = v915;
													end
													break;
												end
												if ((65 - (30 + 35)) == v913) then
													v914 = nil;
													v915 = nil;
													v916 = nil;
													v913 = 1;
												end
												if (v913 == 4) then
													v81[v83[2 + 0 + 0]] = v83[3];
													v75 = v75 + 1;
													v83 = v71[v75];
													v913 = 1 + 4;
												end
												if (v913 == 3) then
													v81[v83[1259 - (1043 + 214)]] = v81[v83[3]][v81[v83[15 - 11]]];
													v75 = v75 + (1213 - (323 + 889));
													v83 = v71[v75];
													v913 = 10 - 6;
												end
												if (v913 == 5) then
													v916 = v83[582 - (361 + 219)];
													v915 = v81[v916];
													v914 = v81[v916 + 2];
													v913 = 6;
												end
												if (v913 == (321 - (53 + 267))) then
													v81[v83[1 + 1]] = v81[v83[416 - (15 + 398)]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v913 = 984 - (18 + 964);
												end
											end
										else
											do
												return;
											end
										end
									elseif ((v84 <= (30 - 22)) or (4522 <= 2520)) then
										if (v84 <= 6) then
											v81[v83[2 + 0]] = v81[v83[2 + 1]][v83[4]];
											v75 = v75 + (851 - (20 + 830));
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[3]][v83[130 - (116 + 10)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[(357 + 383) - (542 + 196)]] = v81[v83[3]][v81[v83[8 - 4]]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + (0 - 0)]] = v81[v83[2 + 1]][v83[4]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[(256 - (106 + 146)) - 2]] = v81[v83[1554 - (1126 + 425)]][v81[v83[4]]];
											v75 = v75 + (406 - (118 + 287));
											v83 = v71[v75];
											v81[v83[(13 - 6) - 5]] = v81[v83[3]][v81[v83[(2081 - 956) - (97 + 21 + 1003)]]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2]][v81[v83[380 - (142 + (868 - 633))]]] = v81[v83[(1036 - (75 + 943)) - 14]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[(2042 - (972 + 91)) - (553 + 424)]] = v81[v83[3]] + v83[7 - 3];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[2 + 1]][v81[v83[4]]];
											v75 = v75 + (3 - 2) + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[6 - 3]][v83[11 - 7]];
										elseif ((1766 >= 534) and (v84 > (15 - 8))) then
											local v917;
											local v918;
											local v919;
											v81[v83[1 + 1]] = v81[v83[3]] - v81[v83[19 - 15]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[755 - (239 + 514)]] = {};
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[1332 - (797 + 532)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[(2 - 1) + 1]] = v83[6 - 3];
											v75 = v75 + ((2549 - (918 + 428)) - (373 + (2426 - (1099 + 498))));
											v83 = v71[v75];
											v81[v83[733 - (476 + 255)]] = v81[v83[1133 - (369 + 761)]][v81[v83[3 + (1686 - (997 + 688))]]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v919 = v83[2 - 0];
											v918 = v81[v919];
											v917 = v83[5 - 2];
											for v3914 = 239 - (64 + 174), v917 do
												v918[v3914] = v81[v919 + v3914];
											end
										else
											v81[v83[(1423 - (1406 + 16)) + 1]] = v81[v83[3 - 0]][v81[v83[340 - (76 + 68 + 192)]]];
											v75 = v75 + (920 - (715 + 204));
											v83 = v71[v75];
											v81[v83[218 - (42 + 174)]] = v81[v83[3 + 0 + 0]] + v81[v83[4]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v83[2 + 1 + 0];
											v75 = v75 + (1505 - (363 + 1141));
											v83 = v71[v75];
											v81[v83[1582 - (1183 + 397)]] = v81[v83[8 - 5]] - v81[v83[3 + 1]];
											v75 = v75 + 1 + (663 - (275 + 388));
											v83 = v71[v75];
											v81[v83[(2805 - 828) - (1913 + 62)]] = v83[2 + 1];
										end
									elseif (v84 <= 10) then
										if (v84 == (23 - 14)) then
											v81[v83[1935 - (565 + 1368)]] = v83[11 - 8];
											v75 = v75 + (1662 - (1477 + 184));
											v83 = v71[v75];
											v81[v83[2 - 0]] = v81[v83[3 + 0 + 0]][v81[v83[860 - (564 + 292)]]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[5 - 3]] = {};
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[306 - (113 + 131 + 60)]][v81[v83[3 + 0]]] = v81[v83[480 - (30 + 11 + 435)]];
											v75 = v75 + (1002 - (938 + 63));
											v83 = v71[v75];
											v81[v83[2 + (0 - 0)]] = v83[1128 - (936 + 189)];
										else
											v81[v83[2]] = v81[v83[1 + 2]][v81[v83[1617 - (1565 + 48)]]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[1141 - (782 + 356)]][v83[4]];
											v75 = v75 + (268 - (176 + 91));
											v83 = v71[v75];
											v81[v83[4 - 2]] = v81[v83[4 - (1 + 0)]][v83[1096 - (975 + 117)]];
											v75 = v75 + (1876 - (157 + 1718));
											v83 = v71[v75];
											v81[v83[2 + 0]][v81[v83[10 - 7]]] = v81[v83[13 - 9]];
											v75 = v75 + (1019 - (697 + 321));
											v83 = v71[v75];
											v75 = v83[7 - (13 - 9)];
										end
									elseif ((v84 > 11) or (1690 >= 4105)) then
										v81[v83[3 - (1 + 0)]] = v81[v83[6 - 3]][v81[v83[2 + 2]]];
										v75 = v75 + (1 - (0 + 0));
										v83 = v71[v75];
										v81[v83[5 - 3]] = {};
										v75 = v75 + ((104 + 1124) - (322 + 905));
										v83 = v71[v75];
										v81[v83[(1178 - (5 + 560)) - (602 + 9)]][v81[v83[409 - (77 + 329)]]] = v81[v83[1193 - (449 + 740)]];
										v75 = v75 + (873 - (826 + 46));
										v83 = v71[v75];
										v81[v83[949 - (245 + 702)]] = v83[9 - (5 + 1)];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v75 = v83[(778 + 1123) - (260 + (3589 - (397 + 1554)))];
									else
										local v968 = 440 - ((1639 - (219 + 1038)) + 58);
										while true do
											if (v968 == 5) then
												v81[v83[2]] = v81[v83[3]] + v83[3 + 1];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v968 = 19 - 13;
											end
											if (v968 == (0 + 0)) then
												v81[v83[3 - 1]] = v81[v83[8 - 5]][v83[1209 - (902 + 303)]];
												v75 = v75 + ((1 - 0) - 0);
												v83 = v71[v75];
												v968 = 2 - (2 - 1);
											end
											if (v968 == (7 - 3)) then
												v81[v83[1 + 1]][v81[v83[3]]] = v81[v83[1694 - (1121 + 157 + 412)]];
												v75 = v75 + (215 - (22 + 192));
												v83 = v71[v75];
												v968 = 688 - (483 + 200);
											end
											if (v968 == (1466 - (1404 + (811 - (404 + 348))))) then
												v81[v83[5 - (151 - (99 + 49))]] = v81[v83[3 - 0]][v81[v83[4 + 0]]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v968 = 769 - (468 + 297);
											end
											if (v968 == (564 - (334 + 228))) then
												v81[v83[6 - 4]] = v81[v83[6 - 3]][v83[1973 - (1223 + 746)]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v968 = 5 - 2;
											end
											if (v968 == (1 + 0)) then
												v81[v83[238 - (141 + 95)]] = v81[v83[3 + 0]][v81[v83[9 - 5]]];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v968 = 1 + 1;
											end
											if (v968 == (16 - (15 - 5))) then
												v81[v83[2 + 0]] = v81[v83[2 + 1]] + v83[5 - 1];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v968 = 170 - (92 + 71);
											end
											if ((v968 == 7) or (4235 < 1816)) then
												v81[v83[1 + 1]] = v83[4 - 1];
												break;
											end
										end
									end
								elseif ((v84 <= (783 - (574 + 191))) or (4084 < 1754)) then
									if (v84 <= 15) then
										if ((v84 <= 13) or (254 >= 1394)) then
											do
												return v81[v83[2 + 0 + 0]];
											end
										elseif (v84 > (34 - 20)) then
											local v969 = 0 + 0;
											while true do
												if (v969 == ((2212 - (1247 + 114)) - (254 + 595))) then
													v83 = v71[v75];
													v81[v83[2]] = v81[v83[3]][v81[v83[130 - (55 + 71)]]];
													v75 = v75 + ((3 - 2) - 0);
													v83 = v71[v75];
													v969 = 1793 - (573 + 1217);
												end
												if (v969 == (0 + 0)) then
													v81[v83[5 - 3]] = v83[1 + 2];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[2 - 0]] = v81[v83[942 - (714 + 225)]][v81[v83[11 - 7]]];
													v969 = 1 - 0;
												end
												if (((2 - 1) + 3) == v969) then
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[2 - 0]] = v83[809 - ((355 - 237) + 688)];
													break;
												end
												if (v969 == 3) then
													v81[v83[50 - ((38 - 13) + 23)]] = v81[v83[3]][v81[v83[4]]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[1888 - (927 + 959)]][v81[v83[10 - (1946 - (291 + 1648))]]] = v81[v83[11 - 7]];
													v969 = 736 - (16 + (1918 - 1202));
												end
												if ((v969 == (1 - 0)) or (3761 >= 4694)) then
													v75 = v75 + (98 - (11 + 86));
													v83 = v71[v75];
													v81[v83[4 - 2]] = v83[288 - (175 + 110)];
													v75 = v75 + (2 - 1);
													v969 = 2;
												end
											end
										elseif (v81[v83[(9 + 0) - (23 - 16)]] < v81[v83[4]]) then
											v75 = v83[(1757 + 42) - (503 + 1293)];
										else
											v75 = v75 + 1;
										end
									elseif (v84 <= (44 - 28)) then
										local v174 = 0 + 0;
										local v175;
										while true do
											if ((34 < 720) and ((1063 - (810 + 251)) == v174)) then
												v83 = v71[v75];
												v81[v83[(1700 - (1584 + 114)) + 0]] = v83[1 + 2];
												v75 = v75 + 1;
												v174 = 3 + 0;
											end
											if (v174 == 5) then
												v75 = v75 + (534 - (43 + 490));
												v83 = v71[v75];
												v81[v83[735 - (711 + 22)]] = #v81[v83[3]];
												v174 = 23 - 17;
											end
											if (v174 == (12 - 8)) then
												v75 = v75 + (860 - (240 + 619));
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[4 - 1];
												v174 = 1 + 4;
											end
											if (((3509 - (957 + 808)) - (1344 + (1619 - 1219))) == v174) then
												v175 = nil;
												v81[v83[407 - (255 + 150)]] = v81[v83[3 + 0]];
												v75 = v75 + 1 + 0;
												v174 = 1;
											end
											if ((2277 > 1595) and ((4 - 3) == v174)) then
												v83 = v71[v75];
												v81[v83[6 - 4]] = v83[1742 - ((1682 - 1278) + 1335)];
												v75 = v75 + 1;
												v174 = 408 - (183 + 223);
											end
											if (v174 == (3 - 0)) then
												v83 = v71[v75];
												v175 = v83[2 + 0];
												v81[v175] = v81[v175](v13(v81, v175 + (1072 - (435 + 636)) + 0, v83[2 + 1]));
												v174 = 341 - (10 + 327);
											end
											if (v174 == 6) then
												v75 = v75 + (786 - (342 + 443)) + 0;
												v83 = v71[v75];
												if (v81[v83[340 - ((183 - 65) + 220)]] ~= v81[v83[2 + 2]]) then
													v75 = v75 + (450 - (108 + 341));
												else
													v75 = v83[2 + 1];
												end
												break;
											end
										end
									elseif ((v84 == ((21 + 50) - 54)) or (3252 >= 4779)) then
										v81[v83[1495 - (711 + 782)]] = v81[v83[5 - 2]][v81[v83[473 - (208 + 62 + 199)]]];
										v75 = v75 + 1 + 0 + 0;
										v83 = v71[v75];
										v81[v83[1821 - (580 + 1239)]] = v81[v83[(540 - (321 + 211)) - (19 - 14)]][v81[v83[4 + 0]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1 + 1 + 0]] = v83[7 - 4];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1169 - (645 + 522)]] = v81[v83[1793 - (1010 + 780)]][v81[v83[4 + 0]]];
										v75 = v75 + ((6 - 2) - (9 - 6));
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[3]][v81[v83[11 - 7]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1838 - ((2287 - (506 + 736)) + 791)]] = v83[7 - 4];
										v75 = v75 + ((1342 - (428 + 913)) - 0);
										v83 = v71[v75];
										v81[v83[507 - (351 + 154)]] = v81[v83[1577 - (1281 + (2144 - (834 + 1017)))]][v81[v83[270 - (28 + 238)]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[4 - 2]] = v81[v83[1562 - (1381 + 178)]][v81[v83[4]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[(1573 - (1493 + 78)) + 0]][v81[v83[2 + (1 - 0)]]] = v81[v83[13 - 9]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[472 - (381 + 89)]] = v83[3];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[4 - 1]] + v81[v83[4]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v83[2 + 1];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[1159 - (895 + 179 + 82)]] + v81[v83[8 - 4]];
										v75 = v75 + (1785 - (214 + 1570));
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[3 - 0]][v81[v83[4]]];
										v75 = v75 + (1456 - (990 + 465));
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[3];
									else
										local v994 = 0 + 0;
										while true do
											if (v994 == (7 + 0)) then
												v81[v83[2]] = v83[11 - 8];
												break;
											end
											if (v994 == 6) then
												v81[v83[1728 - (1668 + 58)]][v81[v83[629 - (512 + 114)]]] = v81[v83[10 - 6]];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v994 = 7;
											end
											if (v994 == (3 - 2)) then
												v81[v83[1 + 0 + 1]] = v81[v83[1 + 2]][v81[v83[4 + (186 - (177 + 9))]]];
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v994 = 1996 - (109 + 1885);
											end
											if ((1472 - (1269 + 200)) == v994) then
												v81[v83[1255 - (236 + 1017)]] = v81[v83[(2 + 3) - 2]][v81[v83[819 - (98 + 717)]]];
												v75 = v75 + (827 - ((2781 - (1237 + 742)) + (38 - 14)));
												v83 = v71[v75];
												v994 = 6 - 2;
											end
											if ((1165 == 1165) and (v994 == (6 - 1))) then
												v81[v83[1 + 1]] = #v81[v83[3 + 0]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v994 = 2 + 4;
											end
											if (((5 - 3) == v994) or (3492 == 1446)) then
												v81[v83[6 - 4]] = v83[3 + 0];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v994 = 2 + 1;
											end
											if (v994 == 4) then
												v81[v83[2]] = v81[v83[3 + 0 + 0]][v81[v83[1 + 2 + 1]]];
												v75 = v75 + 1 + 0 + 0;
												v83 = v71[v75];
												v994 = 1438 - (411 + 386 + 636);
											end
											if ((v994 == 0) or (66 >= 2677)) then
												v81[v83[9 - 7]] = v83[(4601 - 2979) - (1427 + 192)];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v994 = 2 - 1;
											end
										end
									end
								elseif (v84 <= (19 + 2)) then
									if (v84 <= (9 + 10)) then
										v81[v83[328 - (192 + 134)]] = v81[v83[3]][v81[v83[1280 - (316 + 960)]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v83[3 + (0 - 0)];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[7 - 5]] = v81[v83[554 - (83 + 468)]][v81[v83[4]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[(3372 - (566 + 998)) - (1202 + 604)]][v81[v83[13 - 10]]] = v81[v83[6 - 2]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2]] = v83[328 - (45 + 107 + 173)];
										v75 = v75 + (1629 - (11 + 1617));
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[3 + 0]] + v81[v83[2 + 2]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 + (1865 - (1156 + 709))]] = v83[1 + 2];
									elseif ((3486 >= 1637) and (v84 > (37 - 17))) then
										local v995;
										local v996, v997;
										local v998;
										local v999;
										v81[v83[2]] = v83[1914 - (340 + 1571)];
										v75 = v75 + (2 - 1) + 0;
										v83 = v71[v75];
										v999 = v83[1774 - (1733 + 39)];
										v76 = (v999 + v82) - (2 - 1);
										for v3934 = v999, v76 do
											v998 = v77[v3934 - v999];
											v81[v3934] = v998;
										end
										v75 = v75 + (1035 - (125 + 909));
										v83 = v71[v75];
										v999 = v83[1950 - ((3539 - 2443) + 852)];
										v996, v997 = v74(v81[v999](v13(v81, v999 + 1, v76)));
										v76 = (v997 + v999) - 1;
										v995 = 0 + 0;
										for v3937 = v999, v76 do
											v995 = v995 + (1 - 0);
											v81[v3937] = v996[v995];
										end
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v999 = v83[514 - (409 + 103)];
										do
											return v13(v81, v999, v76);
										end
										v75 = v75 + (237 - (46 + 190));
										v83 = v71[v75];
										do
											return;
										end
									else
										v81[v83[97 - (51 + 44)]] = v81[v83[1 + 2]][v83[1321 - (1114 + 203)]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[728 - (228 + (1058 - 560))]] = v81[v83[1 + 2]][v81[v83[3 + 1]]];
										v75 = v75 + (664 - (174 + 489));
										v83 = v71[v75];
										v81[v83[2]] = #v81[v83[3]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[5 - 3]][v81[v83[1908 - (830 + 1075)]]] = v81[v83[528 - (303 + 221)]];
										v75 = v75 + (1270 - (231 + 1038));
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[3 + 0]] + v83[4];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[1165 - (171 + 991)]][v81[v83[(8 + 8) - 12]]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[4 - 2]] = v83[3 + (0 - 0)];
									end
								elseif (v84 <= (80 - 57)) then
									if ((v84 > (63 - 41)) or (2981 == 317)) then
										v81[v83[2 - 0]] = v83[9 - 6];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[1251 - (111 + 1137)]][v81[v83[162 - (91 + 67)]]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2]] = v61[v83[3]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[526 - (423 + 100)];
										v75 = v75 + (1 - 0) + 0;
										v83 = v71[v75];
										v81[v83[5 - 3]] = v81[v83[2 + 1]][v81[v83[775 - (326 + 445)]]];
										v75 = v75 + (4 - 3);
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[3]][v81[v83[8 - 4]]];
										v75 = v75 + (2 - (690 - (131 + 558)));
										v83 = v71[v75];
										v81[v83[713 - (530 + 181)]][v81[v83[884 - ((906 - 292) + 267)]]] = v81[v83[4]];
										v75 = v75 + (33 - (19 + 13));
										v83 = v71[v75];
										v81[v83[2 - 0]] = v83[6 - 3];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[4 - 1]] + v81[v83[7 - 3]];
										v75 = v75 + (1813 - (1293 + 519));
										v83 = v71[v75];
										v81[v83[3 - 1]] = v81[v83[3]][v81[v83[9 - 5]]];
									else
										local v1033;
										local v1034;
										local v1035;
										v81[v83[3 - 1]] = v81[v83[3]] + v81[v83[17 - 13]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[1 + 2]][v81[v83[4]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v83[6 - 3];
										v75 = v75 + (3 - 2) + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[4 - 1]][v81[v83[4]]];
										v75 = v75 + 1 + 0 + 0;
										v83 = v71[v75];
										v81[v83[(418 + 680) - (709 + 387)]] = v81[v83[1861 - (30 + 643 + 1185)]][v81[v83[11 - 7]]];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[2 - 0]] = v83[(1648 - (1417 + 228)) + 0];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2 - 0]] = v81[v83[1 + 2]] + v81[v83[4]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[3 - 1]] = v81[v83[1883 - (446 + 1434)]];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[1285 - (1040 + 243)]] = v83[8 - 5];
										v75 = v75 + (1848 - (559 + 1288));
										v83 = v71[v75];
										v1035 = v83[1933 - (609 + 1322)];
										v1034 = v81[v1035];
										v1033 = v81[v1035 + (456 - (13 + 441))];
										if (v1033 > (0 - 0)) then
											if (v1034 > v81[v1035 + (2 - 1)]) then
												v75 = v83[14 - 11];
											else
												v81[v1035 + 1 + 2] = v1034;
											end
										elseif (v1034 < v81[v1035 + (3 - 2)]) then
											v75 = v83[2 + 1];
										else
											v81[v1035 + 3] = v1034;
										end
									end
								elseif ((v84 == 24) or (1588 >= 3761)) then
									v81[v83[1 + 1]] = v81[v83[8 - 5]][v81[v83[3 + 1 + 0]]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2]] = v83[2 + 1];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[3]][v81[v83[4 + 0]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[436 - (153 + 280)]][v81[v83[4]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[5 - (7 - 4)]] = v83[3];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[2 + 1]][v81[v83[3 + 1]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[3 + 0]] - v81[v83[4]];
									v75 = v75 + ((395 - (134 + 260)) - (0 - 0));
									v83 = v71[v75];
									v81[v83[2 + 0]][v81[v83[670 - (17 + 72 + 578)]]] = v81[v83[4]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v75 = v83[5 - 2];
								else
									local v1068 = 1049 - (16 + 556 + 477);
									while true do
										if ((v1068 == (1 + 1)) or (2485 == 743)) then
											v81[v83[(3 - 1) + 0]] = v83[1 + 2];
											v75 = v75 + (87 - (84 + 2));
											v83 = v71[v75];
											v1068 = 4 - 1;
										end
										if (v1068 == (3 + 0)) then
											v81[v83[844 - (497 + 345)]] = v81[v83[3]][v81[v83[1 + (137 - (49 + 85))]]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1068 = 1 + 3;
										end
										if (v1068 == (1334 - (605 + 728))) then
											v81[v83[2 + 0]] = v81[v83[6 - 3]][v81[v83[4]]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1068 = 7 - 5;
										end
										if (v1068 == (4 + 0 + 0)) then
											if (v81[v83[5 - 3]] == v81[v83[4 + 0]]) then
												v75 = v75 + (490 - (457 + 32));
											else
												v75 = v83[2 + 1];
											end
											break;
										end
										if (v1068 == (1402 - (832 + 570))) then
											v81[v83[2 + 0]] = v81[v83[1 + 2]][v81[v83[13 - 9]]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1068 = 797 - (588 + 208);
										end
									end
								end
							elseif ((v84 <= (102 - 64)) or (1172 > 2707)) then
								if ((1321 > 375) and (v84 <= (1831 - (884 + 916)))) then
									if (v84 <= (58 - 30)) then
										if (v84 <= (16 + 10)) then
											v81[v83[655 - (232 + 421)]] = v81[v83[1892 - (1569 + 320)]][v81[v83[4]]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[3]][v81[v83[13 - 9]]];
											v75 = v75 + (606 - (316 + 289));
											v83 = v71[v75];
											v81[v83[5 - 3]] = v83[1 + 2];
											v75 = v75 + (1454 - (666 + 787));
											v83 = v71[v75];
											v81[v83[427 - (360 + 65)]] = v81[v83[3 + 0]][v81[v83[258 - (79 + 175)]]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[3 + 0]][v81[v83[4]]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[5 - 3]] = v81[v83[5 - 2]] + v81[v83[4]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[901 - (503 + 396)]][v81[v83[3]]] = v81[v83[185 - (92 + 89)]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[2 + 1];
										elseif (v84 > (105 - 78)) then
											local v1069 = 0 + 0;
											while true do
												if (v1069 == 2) then
													v81[v83[4 - 2]] = v81[v83[3 + 0]][v81[v83[2 + 2]]];
													v75 = v75 + (2 - 1);
													v83 = v71[v75];
													v1069 = 1 + 2;
												end
												if (v1069 == 5) then
													v81[v83[2]] = v81[v83[4 - 1]][v81[v83[4]]];
													v75 = v75 + (1245 - (485 + 759));
													v83 = v71[v75];
													v1069 = 13 - 7;
												end
												if ((1189 - (442 + 747)) == v1069) then
													v81[v83[2]] = v81[v83[1138 - (832 + 303)]][v81[v83[950 - (88 + 858)]]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v1069 = 1 + 0;
												end
												if (v1069 == (1 + 8)) then
													v81[v83[2]] = v81[v83[792 - (766 + 23)]] + v81[v83[19 - 15]];
													break;
												end
												if (v1069 == (1 - 0)) then
													v81[v83[4 - 2]] = v83[10 - 7];
													v75 = v75 + (1074 - (1036 + 37));
													v83 = v71[v75];
													v1069 = 2 + 0;
												end
												if (v1069 == (15 - 7)) then
													v81[v83[2 + 0]] = v83[1483 - (641 + 839)];
													v75 = v75 + (914 - (910 + 3));
													v83 = v71[v75];
													v1069 = 9;
												end
												if ((9 - 5) == v1069) then
													v81[v83[1686 - (1466 + 218)]] = v81[v83[2 + 1]][v81[v83[1152 - (556 + 592)]]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v1069 = 813 - (329 + 479);
												end
												if (v1069 == 7) then
													v81[v83[856 - (174 + 680)]][v81[v83[10 - 7]]] = v81[v83[4]];
													v75 = v75 + (1 - 0);
													v83 = v71[v75];
													v1069 = 6 + 2;
												end
												if (v1069 == (742 - (396 + 343))) then
													v81[v83[2]] = v83[1 + 2];
													v75 = v75 + (1478 - (29 + 1448));
													v83 = v71[v75];
													v1069 = 1393 - (135 + 1254);
												end
												if ((2680 >= 1710) and ((22 - 16) == v1069)) then
													v81[v83[9 - 7]] = v81[v83[3]] ^ v81[v83[3 + 1]];
													v75 = v75 + (1528 - (389 + 1138));
													v83 = v71[v75];
													v1069 = 581 - (102 + 472);
												end
											end
										else
											local v1070 = v83[2];
											local v1071, v1072 = v74(v81[v1070]());
											v76 = (v1072 + v1070) - (1 + 0);
											local v1073 = 0 + 0;
											for v3940 = v1070, v76 do
												v1073 = v1073 + 1 + 0;
												v81[v3940] = v1071[v1073];
											end
										end
									elseif (v84 <= 29) then
										v81[v83[1547 - (320 + 1225)]] = v83[5 - 2];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1466 - (157 + 1307)]] = v81[v83[1862 - (821 + 1038)]][v81[v83[9 - 5]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v61[v83[3]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[7 - 4];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1028 - (834 + 192)]] = v81[v83[3]][v81[v83[1 + 3]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[3]][v81[v83[4]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 - 0]][v81[v83[307 - (300 + 4)]]] = v81[v83[2 + 2]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2]] = v83[365 - (112 + 250)];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[4 - 2]] = v81[v83[2 + 1]] + v81[v83[3 + 1]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[3]][v81[v83[2 + 2]]];
									elseif ((v84 == 30) or (2778 >= 3693)) then
										v81[v83[2 + 0]] = v81[v83[3]][v83[1418 - (1001 + 413)]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[884 - (244 + 638)]] = v81[v83[3]][v81[v83[697 - (627 + 66)]]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[604 - (512 + 90)]] = #v81[v83[1909 - (1665 + 241)]];
										v75 = v75 + (718 - (373 + 344));
										v83 = v71[v75];
										v81[v83[1 + 1]][v81[v83[1 + 2]]] = v81[v83[10 - 6]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[1101 - (35 + 1064)]] = v81[v83[3 + 0]] + v83[8 - 4];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v83[1239 - (298 + 938)];
									else
										local v1085 = 1259 - (233 + 1026);
										local v1086;
										local v1087;
										local v1088;
										while true do
											if (v1085 == (1667 - (636 + 1030))) then
												v81[v83[2]] = v83[2 + 1];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v1085 = 1 + 1;
											end
											if ((v1085 == 3) or (1132 >= 3109)) then
												v81[v83[1 + 1]] = v83[224 - (55 + 166)];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v1085 = 1 + 3;
											end
											if (v1085 == 4) then
												v81[v83[7 - 5]] = v81[v83[3]][v81[v83[301 - (36 + 261)]]];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v1085 = 5;
											end
											if (v1085 == 0) then
												v1086 = nil;
												v1087 = nil;
												v1088 = nil;
												v1085 = 1369 - (34 + 1334);
											end
											if ((v1085 == (3 + 4)) or (738 < 271)) then
												if (v1086 > (0 + 0)) then
													if (v1087 > v81[v1088 + (1284 - (1035 + 248))]) then
														v75 = v83[24 - (20 + 1)];
													else
														v81[v1088 + 3] = v1087;
													end
												elseif (v1087 < v81[v1088 + 1]) then
													v75 = v83[2 + 1];
												else
													v81[v1088 + 3] = v1087;
												end
												break;
											end
											if (v1085 == (321 - (134 + 185))) then
												v81[v83[1135 - (549 + 584)]] = v81[v83[688 - (314 + 371)]];
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v1085 = 971 - (478 + 490);
											end
											if ((3 + 2) == v1085) then
												v81[v83[1174 - (786 + 386)]] = v83[9 - 6];
												v75 = v75 + 1;
												v83 = v71[v75];
												v1085 = 1385 - (1055 + 324);
											end
											if (v1085 == (1346 - (1093 + 247))) then
												v1088 = v83[2 + 0];
												v1087 = v81[v1088];
												v1086 = v81[v1088 + 2];
												v1085 = 1 + 6;
											end
										end
									end
								elseif (v84 <= (134 - 100)) then
									if (v84 <= 32) then
										local v221 = 0 - 0;
										while true do
											if (v221 == (8 - 5)) then
												v81[v83[4 - 2]] = v81[v83[3]][v81[v83[2 + 2]]];
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v81[v83[6 - 4]][v81[v83[3]]] = v81[v83[4 + 0]];
												v221 = 9 - 5;
											end
											if (v221 == (689 - (364 + 324))) then
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[6 - 3]][v81[v83[2 + 2]]];
												v75 = v75 + (4 - 3);
												v221 = 2 - 0;
											end
											if ((335 < 1904) and (v221 == (5 - 3))) then
												v83 = v71[v75];
												v81[v83[1270 - (1249 + 19)]] = v81[v83[3]][v83[4 + 0]];
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v221 = 1089 - (686 + 400);
											end
											if (v221 == (0 + 0)) then
												v81[v83[231 - (73 + 156)]] = v81[v83[1 + 2]][v83[815 - (721 + 90)]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[6 - 4]] = v81[v83[473 - (224 + 246)]][v83[5 - 1]];
												v221 = 1 - 0;
											end
											if ((v221 == (1 + 3)) or (2211 >= 3084)) then
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2]] = v83[3];
												break;
											end
										end
									elseif (v84 > (25 + 8)) then
										local v1089;
										local v1090;
										local v1091, v1092;
										local v1093;
										v81[v83[2]] = v81[v83[5 - 2]][v83[12 - 8]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[515 - (203 + 310)]] = {};
										v75 = v75 + (1994 - (1238 + 755));
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[1537 - (709 + 825)]][v81[v83[7 - 3]]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[866 - (196 + 668)]] = v61[v83[11 - 8]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[835 - (171 + 662)]] = v81[v83[96 - (4 + 89)]];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[3]] + v83[4];
										v75 = v75 + (4 - 3);
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[2 + 1]];
										v75 = v75 + (1487 - (35 + 1451));
										v83 = v71[v75];
										v1093 = v83[2];
										v1091, v1092 = v74(v81[v1093](v13(v81, v1093 + (1454 - (28 + 1425)), v83[3])));
										v76 = (v1092 + v1093) - (1994 - (941 + 1052));
										v1090 = 0 + 0;
										for v3962 = v1093, v76 do
											v1090 = v1090 + (1515 - (822 + 692));
											v81[v3962] = v1091[v1090];
										end
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v1093 = v83[1 + 1];
										v1091, v1092 = v74(v81[v1093](v13(v81, v1093 + 1, v76)));
										v76 = (v1092 + v1093) - (298 - (45 + 252));
										v1090 = 0 + 0;
										for v3965 = v1093, v76 do
											local v3966 = 0 + 0;
											while true do
												if ((4394 == 4394) and (v3966 == (0 - 0))) then
													v1090 = v1090 + (434 - (114 + 319));
													v81[v3965] = v1091[v1090];
													break;
												end
											end
										end
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v1093 = v83[2 - 0];
										v1089 = v81[v1093];
										for v3967 = v1093 + 1 + 0, v76 do
											v7(v1089, v81[v3967]);
										end
									else
										local v1109 = 0;
										while true do
											if ((v1109 == (5 - 1)) or (3667 <= 253)) then
												v81[v83[3 - 1]] = v81[v83[1966 - (556 + 1407)]][v83[4]];
												v75 = v75 + (1207 - (741 + 465));
												v83 = v71[v75];
												v81[v83[467 - (170 + 295)]] = v81[v83[3]][v83[4]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v1109 = 3 + 2;
											end
											if (((2 + 0) == v1109) or (4563 < 1626)) then
												v81[v83[4 - 2]] = v81[v83[3 + 0]][v81[v83[4]]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2]][v81[v83[2 + 1]]] = v81[v83[3 + 1]];
												v75 = v75 + (1231 - (957 + 273));
												v83 = v71[v75];
												v1109 = 3;
											end
											if (v1109 == (1 + 2)) then
												v81[v83[1 + 1]] = v81[v83[11 - 8]] + v83[10 - 6];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[14 - 11]][v81[v83[1784 - (389 + 1391)]]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v1109 = 1 + 3;
											end
											if (v1109 == (2 - 1)) then
												v81[v83[2]] = v81[v83[954 - (783 + 168)]][v83[13 - 9]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[313 - (309 + 2)]] = v81[v83[3]][v81[v83[12 - 8]]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v1109 = 2;
											end
											if ((2211 > 34) and ((1219 - (1090 + 122)) == v1109)) then
												v81[v83[1 + 1]][v81[v83[9 - 6]]] = v81[v83[3 + 1]];
												v75 = v75 + (1119 - (628 + 490));
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[3];
												break;
											end
											if ((4812 >= 4440) and (v1109 == (12 - 7))) then
												v81[v83[2]] = v81[v83[13 - 10]][v81[v83[778 - (431 + 343)]]];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[8 - 5]][v83[4 + 0]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v1109 = 1701 - (556 + 1139);
											end
											if (v1109 == (21 - (6 + 9))) then
												v81[v83[1 + 1]] = v81[v83[2 + 1]][v81[v83[173 - (28 + 141)]]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2 - 0]] = v81[v83[3 + 0]][v81[v83[4]]];
												v75 = v75 + (1318 - (486 + 831));
												v83 = v71[v75];
												v1109 = 18 - 11;
											end
											if ((1291 > 876) and (0 == v1109)) then
												v81[v83[6 - 4]] = v81[v83[1 + 2]][v83[12 - 8]];
												v75 = v75 + (1264 - (668 + 595));
												v83 = v71[v75];
												v81[v83[2 + 0]] = v81[v83[1 + 2]][v81[v83[10 - 6]]];
												v75 = v75 + (291 - (23 + 267));
												v83 = v71[v75];
												v1109 = 1945 - (1129 + 815);
											end
										end
									end
								elseif ((v84 <= (423 - (371 + 16))) or (475 == 396)) then
									if (v84 == 35) then
										v81[v83[2]] = v83[1753 - (1326 + 424)];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[7 - 5]] = v81[v83[3]][v81[v83[122 - (88 + 30)]]];
										v75 = v75 + (772 - (720 + 51));
										v83 = v71[v75];
										v81[v83[4 - 2]] = v83[1779 - (421 + 1355)];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[1086 - (286 + 797)]][v81[v83[4]]];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[4 - 1]][v81[v83[443 - (397 + 42)]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]][v81[v83[3]]] = v81[v83[2 + 2]];
										v75 = v75 + (801 - (24 + 776));
										v83 = v71[v75];
										v81[v83[2]] = v83[4 - 1];
									else
										v81[v83[787 - (222 + 563)]] = v81[v83[6 - 3]] + v83[3 + 1];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[192 - (23 + 167)]] = v81[v83[1801 - (690 + 1108)]][v81[v83[2 + 2]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[850 - (40 + 808)]] = v61[v83[1 + 2]];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[2 + 1]][v83[3 + 1]];
										v75 = v75 + (572 - (47 + 524));
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[2 + 1]][v83[4]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2 - 0]] = v81[v83[6 - 3]][v81[v83[4]]];
										v75 = v75 + (1727 - (1165 + 561));
										v83 = v71[v75];
										v81[v83[1 + 1]][v81[v83[9 - 6]]] = v81[v83[2 + 2]];
										v75 = v75 + (480 - (341 + 138));
										v83 = v71[v75];
										v81[v83[2]] = v83[1 + 2];
									end
								elseif ((4210 == 4210) and (v84 > 37)) then
									v61[v83[3]] = v81[v83[3 - 1]];
								else
									local v1140;
									local v1141, v1142;
									local v1143;
									v81[v83[328 - (89 + 237)]] = v61[v83[9 - 6]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[883 - (581 + 300)]] = v81[v83[1223 - (855 + 365)]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[4 - 2]] = v83[1 + 2];
									v75 = v75 + (1236 - (1030 + 205));
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[3 + 0]] + v81[v83[290 - (156 + 130)]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[4 - 2]] = v83[4 - 1];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[2 + 1]][v81[v83[73 - (10 + 59)]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v1143 = v83[9 - 7];
									v1141, v1142 = v74(v81[v1143](v13(v81, v1143 + (1164 - (671 + 492)), v83[3 + 0])));
									v76 = (v1142 + v1143) - (1216 - (369 + 846));
									v1140 = 0 + 0;
									for v3968 = v1143, v76 do
										v1140 = v1140 + 1;
										v81[v3968] = v1141[v1140];
									end
									v75 = v75 + 1;
									v83 = v71[v75];
									v1143 = v83[2 + 0];
									v81[v1143] = v81[v1143](v13(v81, v1143 + (1946 - (1036 + 909)), v76));
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 - 0]][v81[v83[206 - (11 + 192)]]] = v81[v83[3 + 1]];
									v75 = v75 + (176 - (135 + 40));
									v83 = v71[v75];
									v81[v83[2]] = v83[6 - 3];
								end
							elseif (v84 <= 45) then
								if (v84 <= (25 + 16)) then
									if ((2918 < 3377) and (v84 <= (85 - 46))) then
										local v222 = 0;
										while true do
											if ((1 <= 283) and (v222 == (2 - 0))) then
												v81[v83[178 - (50 + 126)]] = v81[v83[8 - 5]][v81[v83[1 + 3]]];
												v75 = v75 + (1414 - (1233 + 180));
												v83 = v71[v75];
												v222 = 972 - (522 + 447);
											end
											if ((v222 == (1424 - (107 + 1314))) or (3606 < 1671)) then
												v81[v83[1 + 1]][v81[v83[8 - 5]]] = v81[v83[2 + 2]];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v222 = 15 - 11;
											end
											if (v222 == (1911 - (716 + 1194))) then
												v81[v83[1 + 1]] = v81[v83[3]][v83[4]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v222 = 2;
											end
											if (v222 == 4) then
												v75 = v83[506 - (74 + 429)];
												break;
											end
											if (v222 == (0 - 0)) then
												v81[v83[1 + 1]] = v61[v83[6 - 3]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v222 = 1;
											end
										end
									elseif ((3768 == 3768) and (v84 == (123 - 83))) then
										local v1162;
										v81[v83[4 - 2]] = v81[v83[3]];
										v75 = v75 + (434 - (279 + 154));
										v83 = v71[v75];
										v81[v83[780 - (454 + 324)]] = v83[3 + 0];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[19 - (12 + 5)]] = #v81[v83[3]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[4 - 2]] = v83[2 + 1];
										v75 = v75 + (1094 - (277 + 816));
										v83 = v71[v75];
										v81[v83[8 - 6]] = #v81[v83[1186 - (1058 + 125)]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v1162 = v83[1 + 1];
										v81[v1162] = v81[v1162](v13(v81, v1162 + 1, v83[978 - (815 + 160)]));
										v75 = v75 + (4 - 3);
										v83 = v71[v75];
										v81[v83[4 - 2]] = v83[3];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1 + 1]] = #v81[v83[3]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										if ((v81[v83[1900 - (41 + 1857)]] == v81[v83[1897 - (1222 + 671)]]) or (2670 < 538)) then
											v75 = v75 + (2 - 1);
										else
											v75 = v83[3 - 0];
										end
									else
										local v1175 = 1182 - (229 + 953);
										local v1176;
										while true do
											if ((1800 < 2822) and (v1175 == (1781 - (1111 + 663)))) then
												v75 = v83[1582 - (874 + 705)];
												break;
											end
											if ((2298 == 2298) and (v1175 == (1 + 0))) then
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[3]];
												v75 = v75 + 1 + 0;
												v1175 = 3 - 1;
											end
											if ((220 < 1058) and (v1175 == (1 + 3))) then
												v83 = v71[v75];
												v1176 = v83[681 - (642 + 37)];
												do
													return v81[v1176](v13(v81, v1176 + 1, v83[1 + 2]));
												end
												v1175 = 1 + 4;
											end
											if (v1175 == (4 - 2)) then
												v83 = v71[v75];
												v81[v83[456 - (233 + 221)]] = v81[v83[6 - 3]];
												v75 = v75 + 1;
												v1175 = 3 + 0;
											end
											if (v1175 == (1544 - (718 + 823))) then
												v83 = v71[v75];
												v81[v83[2 + 0]] = v81[v83[808 - (266 + 539)]];
												v75 = v75 + (2 - 1);
												v1175 = 1229 - (636 + 589);
											end
											if (v1175 == 5) then
												v75 = v75 + 1;
												v83 = v71[v75];
												v1176 = v83[4 - 2];
												v1175 = 6;
											end
											if (v1175 == (11 - 5)) then
												do
													return v13(v81, v1176, v76);
												end
												v75 = v75 + 1;
												v83 = v71[v75];
												v1175 = 6 + 1;
											end
											if (v1175 == (0 + 0)) then
												v1176 = nil;
												v81[v83[1017 - (657 + 358)]] = v61[v83[7 - 4]];
												v75 = v75 + (2 - 1);
												v1175 = 1188 - (1151 + 36);
											end
										end
									end
								elseif (v84 <= (42 + 1)) then
									if (v84 > (12 + 30)) then
										v81[v83[5 - 3]] = v81[v83[1835 - (1552 + 280)]][v81[v83[838 - (64 + 770)]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[4 - 2]] = v83[3];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1245 - (157 + 1086)]] = v81[v83[5 - 2]][v81[v83[17 - 13]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 - 0]] = v81[v83[3 - 0]][v81[v83[823 - (599 + 220)]]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[1933 - (1813 + 118)]] = v83[3 + 0];
										v75 = v75 + (1218 - (841 + 376));
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[3 - 0]][v81[v83[1 + 3]]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[861 - (464 + 395)]] = v81[v83[3]][v81[v83[10 - 6]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[839 - (467 + 370)]] = v81[v83[5 - 2]] + v81[v83[3 + 1]];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[1 + 1]][v81[v83[6 - 3]]] = v81[v83[4]];
										v75 = v75 + (521 - (150 + 370));
										v83 = v71[v75];
										v81[v83[1284 - (74 + 1208)]] = v83[7 - 4];
									else
										v81[v83[9 - 7]] = v81[v83[3 + 0]] + v81[v83[394 - (14 + 376)]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[3 - 1]] = v81[v83[2 + 1]][v81[v83[4 + 0]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v83[3 + 0];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[81 - (23 + 55)]][v81[v83[9 - 5]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[4 - 1];
									end
								elseif ((1868 == 1868) and (v84 > 44)) then
									v81[v83[1 + 1]] = v81[v83[3]] + v81[v83[905 - (652 + 249)]];
								else
									v81[v83[2]] = v81[v83[7 - 4]][v81[v83[4]]];
									v75 = v75 + (1869 - (708 + 1160));
									v83 = v71[v75];
									v81[v83[5 - 3]] = v83[5 - 2];
									v75 = v75 + (28 - (10 + 17));
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[1735 - (1400 + 332)]][v81[v83[7 - 3]]];
									v75 = v75 + (1909 - (242 + 1666));
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[2 + 1]][v81[v83[4 + 0]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[942 - (850 + 90)]] = v83[4 - 1];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1392 - (360 + 1030)]] = v81[v83[3]][v81[v83[4 + 0]]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3 - 0]][v81[v83[1665 - (909 + 752)]]];
									v75 = v75 + (1224 - (109 + 1114));
									v83 = v71[v75];
									v81[v83[3 - 1]] = v81[v83[3]] / v81[v83[2 + 2]];
									v75 = v75 + (243 - (6 + 236));
									v83 = v71[v75];
									v81[v83[2 + 0]][v81[v83[3 + 0]]] = v81[v83[8 - 4]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v75 = v83[3];
								end
							elseif (v84 <= 48) then
								if (v84 <= 46) then
									v81[v83[1135 - (1076 + 57)]] = v83[1 + 2];
									v75 = v75 + (690 - (579 + 110));
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[3 + 0]][v81[v83[4]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v83[410 - (174 + 233)];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[3 - 1]] = v81[v83[3]][v81[v83[2 + 2]]];
									v75 = v75 + (1175 - (663 + 511));
									v83 = v71[v75];
									v81[v83[2 + 0]][v81[v83[1 + 2]]] = v81[v83[12 - 8]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[6 - 3];
								elseif (v84 == 47) then
									local v1224;
									local v1225;
									v81[v83[4 - 2]] = v81[v83[2 + 1]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3 + 0]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v1225 = v83[724 - (478 + 244)];
									v81[v1225] = v81[v1225]();
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[519 - (440 + 77)]] = {};
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[10 - 7]];
									v75 = v75 + (1557 - (655 + 901));
									v83 = v71[v75];
									v1225 = v83[2];
									v81[v1225] = v81[v1225](v13(v81, v1225 + 1 + 0, v83[3]));
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v1225 = v83[2 + 0];
									v76 = (v1225 + v82) - 1;
									for v3984 = v1225, v76 do
										v1224 = v77[v3984 - v1225];
										v81[v3984] = v1224;
									end
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v1225 = v83[2];
									do
										return v81[v1225](v13(v81, v1225 + (1446 - (695 + 750)), v76));
									end
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v1225 = v83[2 - 0];
									do
										return v13(v81, v1225, v76);
									end
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									do
										return;
									end
								else
									v81[v83[353 - (285 + 66)]] = v81[v83[6 - 3]][v81[v83[4]]];
									v75 = v75 + (1311 - (682 + 628));
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[302 - (176 + 123)];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[3 + 0]][v81[v83[4]]];
									v75 = v75 + (270 - (239 + 30));
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[1 + 2]][v81[v83[4]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v83[4 - 1];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[318 - (306 + 9)]][v81[v83[13 - 9]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3]] * v81[v83[3 + 1]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[5 - 3]][v81[v83[1378 - (1140 + 235)]]] = v81[v83[4]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v83[3 + 0];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v75 = v83[55 - (33 + 19)];
								end
							elseif (v84 <= (19 + 31)) then
								if ((v84 == (146 - 97)) or (759 >= 4671)) then
									local v1252 = 0;
									local v1253;
									local v1254;
									local v1255;
									while true do
										if (v1252 == (2 + 1)) then
											v81[v83[3 - 1]] = v83[3 + 0];
											v75 = v75 + (690 - (586 + 103));
											v83 = v71[v75];
											v1255 = v83[1 + 1];
											v1252 = 12 - 8;
										end
										if (v1252 == 1) then
											v75 = v75 + (1489 - (1309 + 179));
											v83 = v71[v75];
											v81[v83[2 - 0]] = v83[2 + 1];
											v75 = v75 + (2 - 1);
											v1252 = 2 + 0;
										end
										if (v1252 == 2) then
											v83 = v71[v75];
											v81[v83[3 - 1]] = v81[v83[5 - 2]][v81[v83[4]]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1252 = 3;
										end
										if (v1252 == (613 - (295 + 314))) then
											v1254 = v81[v1255];
											v1253 = v81[v1255 + (4 - 2)];
											if (v1253 > 0) then
												if ((v1254 > v81[v1255 + (1963 - (1300 + 662))]) or (2621 <= 2066)) then
													v75 = v83[9 - 6];
												else
													v81[v1255 + (1758 - (1178 + 577))] = v1254;
												end
											elseif (v1254 < v81[v1255 + 1 + 0]) then
												v75 = v83[8 - 5];
											else
												v81[v1255 + 3] = v1254;
											end
											break;
										end
										if ((v1252 == (1405 - (851 + 554))) or (3184 < 2843)) then
											v1253 = nil;
											v1254 = nil;
											v1255 = nil;
											v81[v83[2 + 0]] = v81[v83[8 - 5]] + v81[v83[8 - 4]];
											v1252 = 303 - (115 + 187);
										end
									end
								else
									local v1256 = 0 + 0;
									while true do
										if ((2 + 0) == v1256) then
											v83 = v71[v75];
											v81[v83[7 - 5]][v81[v83[1164 - (160 + 1001)]]] = v81[v83[4]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1256 = 3 + 0;
										end
										if (v1256 == (11 - 5)) then
											v81[v83[360 - (237 + 121)]] = v81[v83[3]][v83[901 - (525 + 372)]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[6 - 4]] = v81[v83[3]][v81[v83[146 - (96 + 46)]]];
											v1256 = 784 - (643 + 134);
										end
										if (v1256 == 3) then
											v81[v83[2]] = v81[v83[2 + 1]] + v83[9 - 5];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[7 - 5]] = v81[v83[3 + 0]][v81[v83[7 - 3]]];
											v1256 = 7 - 3;
										end
										if (8 == v1256) then
											v83 = v71[v75];
											v81[v83[721 - (316 + 403)]] = v83[2 + 1];
											break;
										end
										if ((v1256 == (0 - 0)) or (2241 >= 2907)) then
											v81[v83[1 + 1]] = v61[v83[7 - 4]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[10 - 7]][v83[4]];
											v1256 = 4 - 3;
										end
										if (v1256 == (7 - 3)) then
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[5 - 2]][v83[1 + 3]];
											v75 = v75 + (2 - 1);
											v1256 = 5;
										end
										if (v1256 == 5) then
											v83 = v71[v75];
											v81[v83[19 - (12 + 5)]] = v61[v83[11 - 8]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v1256 = 6;
										end
										if ((v1256 == 1) or (4304 < 3469)) then
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[4 - 2]] = v81[v83[1 + 2]][v81[v83[1977 - (1656 + 317)]]];
											v75 = v75 + 1 + 0;
											v1256 = 2 + 0;
										end
										if (v1256 == 7) then
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[9 - 7]][v81[v83[3]]] = v81[v83[358 - (5 + 349)]];
											v75 = v75 + (4 - 3);
											v1256 = 1279 - (266 + 1005);
										end
									end
								end
							elseif ((v84 == (34 + 17)) or (2713 > 4455)) then
								local v1257 = 0 - 0;
								local v1258;
								local v1259;
								local v1260;
								local v1261;
								while true do
									if (v1257 == (6 - 1)) then
										v1261 = v83[2];
										v1259, v1260 = v74(v81[v1261](v13(v81, v1261 + (1697 - (561 + 1135)), v83[3 - 0])));
										v76 = (v1260 + v1261) - (3 - 2);
										v1258 = 0;
										for v6908 = v1261, v76 do
											local v6909 = 0;
											while true do
												if ((v6909 == (1066 - (507 + 559))) or (2315 > 4254)) then
													v1258 = v1258 + 1;
													v81[v6908] = v1259[v1258];
													break;
												end
											end
										end
										break;
									end
									if (((0 - 0) == v1257) or (2431 > 3602)) then
										v1258 = nil;
										v1259, v1260 = nil;
										v1261 = nil;
										v81[v83[2]] = v81[v83[9 - 6]][v81[v83[392 - (212 + 176)]]];
										v75 = v75 + (906 - (250 + 655));
										v83 = v71[v75];
										v1257 = 2 - 1;
									end
									if (v1257 == (1 - 0)) then
										v81[v83[2]] = v81[v83[4 - 1]][v81[v83[1960 - (1869 + 87)]]];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[1903 - (484 + 1417)]] = v61[v83[6 - 3]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v1257 = 2 - 0;
									end
									if ((775 - (48 + 725)) == v1257) then
										v81[v83[2 - 0]] = v81[v83[3]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[7 - 4];
										v75 = v75 + 1;
										v83 = v71[v75];
										v1257 = 3;
									end
									if ((1 + 2) == v1257) then
										v81[v83[1 + 1]] = v81[v83[856 - (152 + 701)]] + v81[v83[4]];
										v75 = v75 + (1312 - (430 + 881));
										v83 = v71[v75];
										v81[v83[2]] = v83[2 + 1];
										v75 = v75 + (896 - (557 + 338));
										v83 = v71[v75];
										v1257 = 4;
									end
									if (v1257 == (2 + 2)) then
										v81[v83[5 - 3]] = v81[v83[10 - 7]] + v81[v83[10 - 6]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[803 - (499 + 302)]] = v81[v83[869 - (39 + 827)]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v1257 = 11 - 6;
									end
								end
							else
								v81[v83[7 - 5]] = v81[v83[3 - 0]][v83[1 + 3]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[5 - 3]] = v81[v83[1 + 2]][v81[v83[4]]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2 - 0]][v81[v83[107 - (103 + 1)]]] = v81[v83[558 - (475 + 79)]];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[6 - 4]] = v81[v83[1 + 2]] + v83[4 + 0];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[3]][v81[v83[4]]];
								v75 = v75 + (1504 - (1395 + 108));
								v83 = v71[v75];
								v81[v83[5 - 3]] = v81[v83[3]][v83[1208 - (7 + 1197)]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[322 - (27 + 292)]][v83[11 - 7]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2 - 0]][v81[v83[12 - 9]]] = v81[v83[7 - 3]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[141 - (43 + 96)]] = v83[12 - 9];
							end
						elseif (v84 <= 79) then
							if ((1394 == 1394) and (v84 <= (146 - 81))) then
								if (v84 <= (49 + 9)) then
									if (v84 <= (16 + 39)) then
										if ((v84 <= 53) or (4827 < 2256)) then
											local v236 = 0 - 0;
											local v237;
											local v238;
											local v239;
											local v240;
											while true do
												if ((v236 == (4 + 4)) or (3466 >= 3471)) then
													v238 = 0 - 0;
													for v4442 = v240, v76 do
														v238 = v238 + 1 + 0;
														v81[v4442] = v237[v238];
													end
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v236 = 9;
												end
												if (v236 == (1755 - (1414 + 337))) then
													v81[v83[1942 - (1642 + 298)]] = v81[v83[7 - 4]] + v81[v83[11 - 7]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[2]] = v81[v83[8 - 5]];
													v236 = 2 + 3;
												end
												if (v236 == (8 + 2)) then
													v75 = v75 + (973 - (357 + 615));
													v83 = v71[v75];
													v81[v83[2 + 0]] = v81[v83[3]];
													break;
												end
												if (v236 == 7) then
													v83 = v71[v75];
													v240 = v83[4 - 2];
													v237, v239 = v74(v81[v240](v13(v81, v240 + 1, v76)));
													v76 = (v239 + v240) - (1 + 0);
													v236 = 16 - 8;
												end
												if ((1 + 0) == v236) then
													v81[v83[2]] = v81[v83[1 + 2]][v81[v83[4]]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[1303 - (384 + 917)]] = v61[v83[700 - (128 + 569)]];
													v236 = 1545 - (1407 + 136);
												end
												if (v236 == (1892 - (687 + 1200))) then
													v75 = v75 + 1;
													v83 = v71[v75];
													v240 = v83[1712 - (556 + 1154)];
													v237, v239 = v74(v81[v240](v13(v81, v240 + (3 - 2), v83[98 - (9 + 86)])));
													v236 = 427 - (275 + 146);
												end
												if (v236 == (1 + 2)) then
													v83 = v71[v75];
													v81[v83[66 - (29 + 35)]] = v83[3];
													v75 = v75 + (4 - 3);
													v83 = v71[v75];
													v236 = 11 - 7;
												end
												if ((26 - 20) == v236) then
													v76 = (v239 + v240) - (1 + 0);
													v238 = 1012 - (53 + 959);
													for v4445 = v240, v76 do
														v238 = v238 + (409 - (312 + 96));
														v81[v4445] = v237[v238];
													end
													v75 = v75 + 1;
													v236 = 11 - 4;
												end
												if ((v236 == (287 - (147 + 138))) or (1688 <= 1418)) then
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[901 - (813 + 86)]] = v81[v83[3 + 0]];
													v75 = v75 + (1 - 0);
													v236 = 495 - (18 + 474);
												end
												if (v236 == (4 + 5)) then
													v240 = v83[6 - 4];
													v237 = {v81[v240](v13(v81, v240 + (304 - (121 + 182)), v76))};
													v238 = 0 + 0;
													for v4448 = v240, v83[1244 - (988 + 252)] do
														v238 = v238 + 1 + 0;
														v81[v4448] = v237[v238];
													end
													v236 = 4 + 6;
												end
												if ((v236 == (1970 - (49 + 1921))) or (4350 <= 2953)) then
													v237 = nil;
													v238 = nil;
													v237, v239 = nil;
													v240 = nil;
													v236 = 891 - (223 + 667);
												end
											end
										elseif ((v84 == 54) or (4362 >= 4894)) then
											local v1279 = 52 - (51 + 1);
											while true do
												if (v1279 == 5) then
													v81[v83[2]] = v83[5 - 2];
													break;
												end
												if (v1279 == (0 - 0)) then
													v81[v83[1127 - (146 + 979)]] = v81[v83[1 + 2]][v81[v83[609 - (311 + 294)]]];
													v75 = v75 + (2 - 1);
													v83 = v71[v75];
													v81[v83[1 + 1]] = {};
													v75 = v75 + (1444 - (496 + 947));
													v83 = v71[v75];
													v1279 = 1359 - (1233 + 125);
												end
												if (v1279 == (1 + 1)) then
													v81[v83[2 + 0]] = v81[v83[3]] + v81[v83[1 + 3]];
													v75 = v75 + (1646 - (963 + 682));
													v83 = v71[v75];
													v81[v83[2 + 0]] = v83[1507 - (504 + 1000)];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v1279 = 3 + 0;
												end
												if ((1 + 2) == v1279) then
													v81[v83[2 - 0]] = v81[v83[3 + 0]] + v81[v83[3 + 1]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[184 - (156 + 26)]] = v83[2 + 1];
													v75 = v75 + (1 - 0);
													v83 = v71[v75];
													v1279 = 168 - (149 + 15);
												end
												if (4 == v1279) then
													v81[v83[962 - (890 + 70)]] = v81[v83[120 - (39 + 78)]] + v81[v83[486 - (14 + 468)]];
													v75 = v75 + (2 - 1);
													v83 = v71[v75];
													v81[v83[2]] = v81[v83[3]][v81[v83[11 - 7]]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v1279 = 3 + 2;
												end
												if (v1279 == (1 + 0)) then
													v81[v83[1 + 1]][v81[v83[2 + 1]]] = v81[v83[2 + 2]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[3 - 1]] = v83[3 + 0];
													v75 = v75 + (3 - 2);
													v83 = v71[v75];
													v1279 = 1 + 1;
												end
											end
										else
											v81[v83[53 - (12 + 39)]] = v81[v83[3]][v81[v83[4 + 0]]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[6 - 4]][v81[v83[3]]] = v81[v83[2 + 2]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[7 - 4];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[9 - 7]] = v81[v83[1713 - (1596 + 114)]][v81[v83[4]]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v75 = v83[3];
										end
									elseif (v84 <= (769 - (164 + 549))) then
										local v241 = 1438 - (1059 + 379);
										local v242;
										local v243;
										local v244;
										local v245;
										while true do
											if ((4266 >= 1425) and (v241 == 1)) then
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[2 + 0]] = v81[v83[1 + 2]];
												v75 = v75 + (393 - (145 + 247));
												v241 = 2 + 0;
											end
											if (v241 == (3 + 3)) then
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[2]][v81[v83[3]]] = v81[v83[4]];
												v75 = v75 + 1;
												v241 = 2 + 5;
											end
											if ((7 + 0) == v241) then
												v83 = v71[v75];
												v81[v83[2]] = v83[3];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v241 = 728 - (254 + 466);
											end
											if (v241 == (560 - (544 + 16))) then
												v242 = nil;
												v243, v244 = nil;
												v245 = nil;
												v81[v83[5 - 3]] = v61[v83[3]];
												v241 = 629 - (294 + 334);
											end
											if ((648 <= 2263) and (v241 == 8)) then
												v75 = v83[256 - (236 + 17)];
												break;
											end
											if (v241 == (2 + 1)) then
												v81[v83[2 + 0]] = v81[v83[3]][v83[14 - 10]];
												v75 = v75 + (4 - 3);
												v83 = v71[v75];
												v245 = v83[2 + 0];
												v241 = 4;
											end
											if ((5 + 0) == v241) then
												v75 = v75 + (795 - (413 + 381));
												v83 = v71[v75];
												v245 = v83[1 + 1];
												v81[v245] = v81[v245](v13(v81, v245 + 1, v76));
												v241 = 12 - 6;
											end
											if (v241 == (4 - 2)) then
												v83 = v71[v75];
												v81[v83[1972 - (582 + 1388)]] = v81[v83[4 - 1]] + v83[3 + 1];
												v75 = v75 + (365 - (326 + 38));
												v83 = v71[v75];
												v241 = 8 - 5;
											end
											if ((2280 < 3987) and (v241 == (5 - 1))) then
												v243, v244 = v74(v81[v245](v13(v81, v245 + 1, v83[3])));
												v76 = (v244 + v245) - (621 - (47 + 573));
												v242 = 0 + 0;
												for v4451 = v245, v76 do
													local v4452 = 0 - 0;
													while true do
														if ((0 - 0) == v4452) then
															v242 = v242 + (1665 - (1269 + 395));
															v81[v4451] = v243[v242];
															break;
														end
													end
												end
												v241 = 5;
											end
										end
									elseif ((v84 > 57) or (365 > 1874)) then
										v81[v83[494 - (76 + 416)]] = v81[v83[446 - (319 + 124)]][v83[9 - 5]];
										v75 = v75 + (1008 - (564 + 443));
										v83 = v71[v75];
										v81[v83[5 - 3]] = v81[v83[461 - (337 + 121)]][v81[v83[11 - 7]]];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[1913 - (1261 + 650)]] = v81[v83[2 + 1]][v83[6 - 2]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1819 - (772 + 1045)]] = v81[v83[3]][v81[v83[4]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[146 - (102 + 42)]] = v81[v83[1847 - (1524 + 320)]][v81[v83[1274 - (1049 + 221)]]];
										v75 = v75 + (157 - (18 + 138));
										v83 = v71[v75];
										v81[v83[4 - 2]][v81[v83[1105 - (67 + 1035)]]] = v81[v83[352 - (136 + 212)]];
										v75 = v75 + (4 - 3);
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[3 + 0]] + v83[4 + 0];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1606 - (240 + 1364)]] = v83[1085 - (1050 + 32)];
									else
										v81[v83[7 - 5]] = v81[v83[3]] * v81[v83[4]];
									end
								elseif ((v84 <= (37 + 24)) or (4549 < 1567)) then
									if (v84 <= (1114 - (331 + 724))) then
										local v246;
										v246 = v83[1 + 1];
										v81[v246] = v81[v246]();
										v75 = v75 + (645 - (269 + 375));
										v83 = v71[v75];
										v81[v83[727 - (267 + 458)]] = v81[v83[1 + 2]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[3 - 1]] = v61[v83[821 - (667 + 151)]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v246 = v83[1499 - (1410 + 87)];
										v81[v246] = v81[v246]();
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1899 - (1504 + 393)]] = v81[v83[8 - 5]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[798 - (461 + 335)]] = v83[1 + 2];
									elseif (v84 > (1821 - (1730 + 31))) then
										local v1307 = 0;
										local v1308;
										while true do
											if ((4109 == 4109) and ((1668 - (728 + 939)) == v1307)) then
												for v6910 = v83[6 - 4], v83[3] do
													v81[v6910] = nil;
												end
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[2]] = v61[v83[6 - 3]];
												v1307 = 2;
											end
											if ((1072 - (138 + 930)) == v1307) then
												v81[v83[2 + 0]] = v83[3 + 0];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v1308 = v83[8 - 6];
												v1307 = 1771 - (459 + 1307);
											end
											if (v1307 == (1875 - (474 + 1396))) then
												v81[v1308] = v81[v1308](v13(v81, v1308 + (1 - 0), v83[3 + 0]));
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[5 - 3]] = v83[3];
												break;
											end
											if (((0 + 0) == v1307) or (3157 < 315)) then
												v1308 = nil;
												v81[v83[6 - 4]] = v83[3];
												v75 = v75 + 1;
												v83 = v71[v75];
												v1307 = 4 - 3;
											end
											if ((v1307 == (593 - (562 + 29))) or (2939 <= 2421)) then
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[1421 - (374 + 1045)]] = v61[v83[3]];
												v75 = v75 + 1 + 0;
												v1307 = 3;
											end
											if ((2240 < 2699) and (v1307 == (9 - 6))) then
												v83 = v71[v75];
												v81[v83[640 - (448 + 190)]] = v81[v83[1 + 2]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v1307 = 3 + 1;
											end
										end
									else
										local v1309 = 0;
										while true do
											if (4 == v1309) then
												v81[v83[7 - 5]] = v81[v83[8 - 5]][v81[v83[1498 - (1307 + 187)]]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v1309 = 19 - 14;
											end
											if ((v1309 == (11 - 6)) or (3055 <= 2818)) then
												if ((v81[v83[5 - 3]] <= v81[v83[687 - (232 + 451)]]) or (4716 <= 2804)) then
													v75 = v75 + 1 + 0;
												else
													v75 = v83[3];
												end
												break;
											end
											if (v1309 == 0) then
												v81[v83[2 + 0]] = v81[v83[567 - (510 + 54)]][v81[v83[4]]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v1309 = 1 - 0;
											end
											if ((39 - (13 + 23)) == v1309) then
												v81[v83[2]] = v81[v83[5 - 2]][v81[v83[4]]];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v1309 = 7 - 3;
											end
											if (v1309 == (1090 - (830 + 258))) then
												v81[v83[6 - 4]] = v83[2 + 1];
												v75 = v75 + 1;
												v83 = v71[v75];
												v1309 = 3;
											end
											if (v1309 == 1) then
												v81[v83[2]] = v81[v83[3 + 0]][v81[v83[1445 - (860 + 581)]]];
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v1309 = 2 + 0;
											end
										end
									end
								elseif (v84 <= 63) then
									if ((v84 > (303 - (237 + 4))) or (393 > 4241)) then
										v81[v83[4 - 2]] = v81[v83[6 - 3]][v81[v83[4]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[3 - 1]] = v81[v83[3 + 0]] + v81[v83[3 + 1]];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[2]] = v83[2 + 1];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[1429 - (85 + 1341)]] - v81[v83[4]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[2]] = v83[8 - 5];
									elseif (v83[374 - (45 + 327)] < v81[v83[7 - 3]]) then
										v75 = v75 + (503 - (444 + 58));
									else
										v75 = v83[2 + 1];
									end
								elseif ((4501 > 4485) and (v84 == (12 + 52))) then
									local v1318 = 0;
									while true do
										if (v1318 == (1 + 0)) then
											v83 = v71[v75];
											v81[v83[5 - 3]] = v81[v83[1735 - (64 + 1668)]][v81[v83[1977 - (1227 + 746)]]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[3 - 1]] = v83[497 - (415 + 79)];
											v1318 = 1 + 1;
										end
										if ((1661 <= 3530) and (v1318 == (491 - (142 + 349)))) then
											v81[v83[1 + 1]] = v83[3];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[3 + 0]][v81[v83[4]]];
											v75 = v75 + (2 - 1);
											v1318 = 1;
										end
										if (v1318 == 4) then
											v83 = v71[v75];
											v81[v83[1866 - (1710 + 154)]] = v81[v83[321 - (200 + 118)]][v81[v83[2 + 2]]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[4 - 1]][v81[v83[4 + 0]]];
											v1318 = 5;
										end
										if (v1318 == (6 + 0)) then
											v81[v83[2 + 0]] = v83[1 + 2];
											break;
										end
										if ((5 == v1318) or (1382 >= 4993)) then
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[1252 - (363 + 887)]][v81[v83[5 - 2]]] = v81[v83[18 - 14]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1318 = 1 + 5;
										end
										if (v1318 == (6 - 3)) then
											v81[v83[2 + 0]] = v81[v83[1667 - (674 + 990)]][v81[v83[4]]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[3 - 0];
											v75 = v75 + (1056 - (507 + 548));
											v1318 = 841 - (289 + 548);
										end
										if ((v1318 == (1820 - (821 + 997))) or (3137 == 2260)) then
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[258 - (195 + 60)]][v81[v83[4]]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1318 = 1504 - (251 + 1250);
										end
									end
								else
									local v1319;
									v81[v83[5 - 3]] = v81[v83[3]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1034 - (809 + 223)]] = v61[v83[3 - 0]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v1319 = v83[6 - 4];
									v81[v1319] = v81[v1319](v13(v81, v1319 + 1 + 0, v83[2 + 1]));
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[619 - (14 + 603)]] = v81[v83[132 - (118 + 11)]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									for v4032 = v83[2 + 0], v83[8 - 5] do
										v81[v4032] = nil;
									end
									v75 = v75 + (950 - (551 + 398));
									v83 = v71[v75];
									v61[v83[3]] = v81[v83[2 + 0]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[3 + 0];
								end
							elseif ((4244 > 2705) and (v84 <= (267 - 195))) then
								if (v84 <= (156 - 88)) then
									if (v84 <= (22 + 44)) then
										local v259;
										v81[v83[7 - 5]] = v61[v83[1 + 2]];
										v75 = v75 + (90 - (40 + 49));
										v83 = v71[v75];
										v81[v83[2]] = v61[v83[3]];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[492 - (99 + 391)]] = v61[v83[3]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[8 - 6]] = v61[v83[7 - 4]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v259 = v83[2 + 0];
										do
											return v81[v259](v13(v81, v259 + (2 - 1), v83[1607 - (1032 + 572)]));
										end
										v75 = v75 + (418 - (203 + 214));
										v83 = v71[v75];
										v259 = v83[1819 - (568 + 1249)];
										do
											return v13(v81, v259, v76);
										end
										v75 = v75 + 1;
										v83 = v71[v75];
										do
											return;
										end
									elseif (v84 == (53 + 14)) then
										local v1333 = 0 - 0;
										while true do
											if (v1333 == (0 - 0)) then
												v81[v83[1308 - (913 + 393)]] = v81[v83[8 - 5]][v81[v83[5 - 1]]];
												v75 = v75 + (411 - (269 + 141));
												v83 = v71[v75];
												v81[v83[4 - 2]] = v81[v83[1984 - (362 + 1619)]][v83[1629 - (950 + 675)]];
												v1333 = 1 + 0;
											end
											if (v1333 == (1180 - (216 + 963))) then
												v75 = v75 + (1288 - (485 + 802));
												v83 = v71[v75];
												v81[v83[561 - (432 + 127)]] = v81[v83[1076 - (1065 + 8)]][v83[3 + 1]];
												v75 = v75 + 1;
												v1333 = 1603 - (635 + 966);
											end
											if ((v1333 == (2 + 0)) or (4619 < 3081)) then
												v83 = v71[v75];
												v81[v83[44 - (5 + 37)]] = v81[v83[7 - 4]][v81[v83[2 + 2]]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v1333 = 4 - 1;
											end
											if (v1333 == (2 + 2)) then
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[3 - 1]] = v83[11 - 8];
												break;
											end
											if (v1333 == (5 - 2)) then
												v81[v83[4 - 2]] = #v81[v83[3 + 0]];
												v75 = v75 + (530 - (318 + 211));
												v83 = v71[v75];
												v81[v83[9 - 7]][v81[v83[1590 - (963 + 624)]]] = v81[v83[2 + 2]];
												v1333 = 850 - (518 + 328);
											end
										end
									elseif ((v83[4 - 2] < v81[v83[4]]) or (191 > 4019)) then
										v75 = v83[3 - 0];
									else
										v75 = v75 + (318 - (301 + 16));
									end
								elseif (v84 <= (205 - 135)) then
									if ((4732 == 4732) and (v84 == (193 - 124))) then
										local v1334 = 0;
										while true do
											if ((3683 >= 1805) and (v1334 == (10 - 6))) then
												v81[v83[2]][v81[v83[3 + 0]]] = v81[v83[3 + 1]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v1334 = 10 - 5;
											end
											if (v1334 == (2 + 1)) then
												v81[v83[1 + 1]] = #v81[v83[9 - 6]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v1334 = 2 + 2;
											end
											if ((2 == v1334) or (947 > 1459)) then
												v81[v83[1021 - (829 + 190)]] = v81[v83[3]][v81[v83[14 - 10]]];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v1334 = 3 - 0;
											end
											if ((1245 >= 375) and (v1334 == 6)) then
												v81[v83[2]] = v81[v83[7 - 4]] + v83[1 + 3];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v1334 = 21 - 14;
											end
											if ((4332 >= 309) and (v1334 == (0 + 0))) then
												v81[v83[615 - (520 + 93)]] = v81[v83[279 - (259 + 17)]][v83[1 + 3]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v1334 = 1;
											end
											if (v1334 == 8) then
												v81[v83[2]] = v83[2 + 1];
												break;
											end
											if ((v1334 == (16 - 11)) or (280 >= 4169)) then
												v81[v83[593 - (396 + 195)]] = v81[v83[8 - 5]] + v83[1765 - (440 + 1321)];
												v75 = v75 + (1830 - (1059 + 770));
												v83 = v71[v75];
												v1334 = 27 - 21;
											end
											if (v1334 == 1) then
												v81[v83[547 - (424 + 121)]] = v81[v83[1 + 2]][v83[4]];
												v75 = v75 + (1348 - (641 + 706));
												v83 = v71[v75];
												v1334 = 1 + 1;
											end
											if (v1334 == (447 - (249 + 191))) then
												v81[v83[2]] = v81[v83[13 - 10]][v81[v83[2 + 2]]];
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v1334 = 435 - (183 + 244);
											end
										end
									else
										local v1335 = 0;
										while true do
											if (v1335 == (1 + 4)) then
												v83 = v71[v75];
												v81[v83[732 - (434 + 296)]] = v83[9 - 6];
												v75 = v75 + (513 - (169 + 343));
												v83 = v71[v75];
												v1335 = 6 + 0;
											end
											if (v1335 == (4 - 1)) then
												v81[v83[2]] = v81[v83[8 - 5]] + v83[4 + 0];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[8 - 5]] + v83[4];
												v1335 = 1127 - (651 + 472);
											end
											if (v1335 == (1 + 0)) then
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[3]][v81[v83[4 - 0]]];
												v75 = v75 + 1;
												v1335 = 485 - (397 + 86);
											end
											if ((2396 <= 3548) and (v1335 == (880 - (423 + 453)))) then
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[1 + 1]] = v81[v83[1 + 2]][v81[v83[4 + 0]]];
												v75 = v75 + 1 + 0;
												v1335 = 5 + 0;
											end
											if (v1335 == 0) then
												v81[v83[2]] = v61[v83[1193 - (50 + 1140)]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2 + 0]] = v81[v83[2 + 1]][v83[1 + 3]];
												v1335 = 1 - 0;
											end
											if ((5 + 1) == v1335) then
												v75 = v83[599 - (157 + 439)];
												break;
											end
											if (v1335 == (2 - 0)) then
												v83 = v71[v75];
												v81[v83[6 - 4]][v81[v83[3]]] = v81[v83[11 - 7]];
												v75 = v75 + (919 - (782 + 136));
												v83 = v71[v75];
												v1335 = 3;
											end
										end
									end
								elseif (v84 > (926 - (112 + 743))) then
									if (v81[v83[1173 - (1026 + 145)]] == v83[4]) then
										v75 = v75 + 1;
									else
										v75 = v83[3];
									end
								else
									local v1336;
									local v1337, v1338;
									local v1339;
									v81[v83[1 + 1]] = v81[v83[721 - (493 + 225)]][v81[v83[4]]];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[2 + 0]] = v61[v83[7 - 4]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[5 - 3]] = v81[v83[1 + 2]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 - 0]] = v81[v83[1598 - (210 + 1385)]] + v83[4];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1691 - (1201 + 488)]] = v81[v83[2 + 1]] + v83[6 - 2];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[587 - (352 + 233)]] = v81[v83[7 - 4]][v83[3 + 1]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v1339 = v83[5 - 3];
									v1337, v1338 = v74(v81[v1339](v13(v81, v1339 + (575 - (489 + 85)), v83[1504 - (277 + 1224)])));
									v76 = (v1338 + v1339) - (1494 - (663 + 830));
									v1336 = 0 + 0;
									for v4034 = v1339, v76 do
										v1336 = v1336 + (2 - 1);
										v81[v4034] = v1337[v1336];
									end
									v75 = v75 + (876 - (461 + 414));
									v83 = v71[v75];
									v1339 = v83[1 + 1];
									v81[v1339] = v81[v1339](v13(v81, v1339 + 1 + 0, v76));
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]][v81[v83[253 - (172 + 78)]]] = v81[v83[6 - 2]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v75 = v83[3];
								end
							elseif ((v84 <= (108 - 33)) or (1588 >= 3118)) then
								if (v84 <= (20 + 53)) then
									local v270;
									local v271, v272;
									local v273;
									v81[v83[1 + 1]] = v61[v83[3]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2 - 0]] = v81[v83[1 + 2]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3]] + v83[2 + 2];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[6 - 3]] + v83[4];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[2 + 1]][v83[451 - (133 + 314)]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v273 = v83[215 - (199 + 14)];
									v271, v272 = v74(v81[v273](v13(v81, v273 + (3 - 2), v83[1552 - (647 + 902)])));
									v76 = (v272 + v273) - 1;
									v270 = 0;
									for v865 = v273, v76 do
										local v866 = 0 - 0;
										while true do
											if (v866 == (233 - (85 + 148))) then
												v270 = v270 + 1;
												v81[v865] = v271[v270];
												break;
											end
										end
									end
									v75 = v75 + 1;
									v83 = v71[v75];
									v273 = v83[2];
									v81[v273] = v81[v273](v13(v81, v273 + 1, v76));
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1291 - (426 + 863)]][v81[v83[3]]] = v81[v83[18 - 14]];
									v75 = v75 + (1655 - (873 + 781));
									v83 = v71[v75];
									v81[v83[2 - 0]] = v83[3];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v75 = v83[2 + 1];
								elseif ((v84 == 74) or (2121 <= 1356)) then
									local v1357;
									v81[v83[2]] = v61[v83[3]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[7 - 5]] = v61[v83[3 - 0]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v83[3];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2]] = v83[3];
									v75 = v75 + (1948 - (414 + 1533));
									v83 = v71[v75];
									v81[v83[2 + 0]] = #v81[v83[558 - (443 + 112)]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v1357 = v83[1481 - (888 + 591)];
									do
										return v81[v1357](v13(v81, v1357 + (2 - 1), v83[1 + 2]));
									end
									v75 = v75 + 1;
									v83 = v71[v75];
									v1357 = v83[7 - 5];
									do
										return v13(v81, v1357, v76);
									end
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									do
										return;
									end
								else
									v81[v83[1 + 1]] = v81[v83[1 + 2]][v83[7 - 3]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[1681 - (136 + 1542)]][v81[v83[12 - 8]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 - 0]] = v81[v83[3 + 0]][v83[490 - (68 + 418)]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[4 - 2]] = v81[v83[5 - 2]][v81[v83[4 + 0]]];
									v75 = v75 + (1093 - (770 + 322));
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[1 + 2]] % v81[v83[1 + 3]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2]][v81[v83[3]]] = v81[v83[7 - 3]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v75 = v83[7 - 4];
								end
							elseif (v84 <= (282 - 205)) then
								if ((3807 > 3095) and (v84 == (43 + 33))) then
									local v1379 = 0 - 0;
									local v1380;
									while true do
										if ((17 == 17) and (v1379 == (3 + 3))) then
											v83 = v71[v75];
											v1380 = v83[2 + 0];
											do
												return v13(v81, v1380, v1380 + v83[3 + 0]);
											end
											v75 = v75 + 1;
											v1379 = 26 - 19;
										end
										if (v1379 == 4) then
											v81[v83[2]] = v81[v83[3 - 0]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[9 - 7]] = v81[v83[9 - 6]];
											v1379 = 5;
										end
										if (v1379 == (1 + 1)) then
											v75 = v75 + (4 - 3);
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[834 - (762 + 69)]];
											v75 = v75 + (3 - 2);
											v1379 = 3 + 0;
										end
										if ((v1379 == (5 + 2)) or (3081 >= 4287)) then
											v83 = v71[v75];
											v75 = v83[7 - 4];
											break;
										end
										if (v1379 == (1 + 2)) then
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[3]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1379 = 15 - 11;
										end
										if ((v1379 == (158 - (8 + 149))) or (897 > 3112)) then
											v81[v83[1322 - (1199 + 121)]] = v81[v83[4 - 1]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[10 - 7]];
											v1379 = 2;
										end
										if (v1379 == (0 - 0)) then
											v1380 = nil;
											v81[v83[2 + 0]] = v81[v83[1810 - (518 + 1289)]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1379 = 1 - 0;
										end
										if (v1379 == (1 + 4)) then
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[472 - (304 + 165)]];
											v75 = v75 + 1 + 0;
											v1379 = 166 - (54 + 106);
										end
									end
								else
									local v1381 = 0;
									local v1382;
									local v1383;
									local v1384;
									local v1385;
									while true do
										if ((5 == v1381) or (2756 == 4341)) then
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1971 - (1618 + 351)]] = v81[v83[3 + 0]] + v83[4];
											v75 = v75 + (1017 - (10 + 1006));
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[1 + 2]] + v83[12 - 8];
											v1381 = 1039 - (912 + 121);
										end
										if (v1381 == 2) then
											v81[v83[1 + 1]] = v81[v83[1292 - (1140 + 149)]] + v83[3 + 1];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[3]];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v1381 = 5 - 2;
										end
										if (v1381 == 9) then
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[6 - 4]][v81[v83[189 - (165 + 21)]]] = v81[v83[115 - (61 + 50)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[9 - 7]] = v81[v83[3]] + v83[7 - 3];
											v1381 = 4 + 6;
										end
										if ((1468 - (1295 + 165)) == v1381) then
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[1400 - (819 + 578)]][v83[4]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1404 - (331 + 1071)]] = v81[v83[3]] - v81[v83[4]];
											v1381 = 752 - (588 + 155);
										end
										if (v1381 == (1282 - (546 + 736))) then
											v1382 = nil;
											v1383, v1384 = nil;
											v1385 = nil;
											v81[v83[1939 - (1834 + 103)]] = v81[v83[2 + 1]][v81[v83[11 - 7]]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1381 = 1767 - (1536 + 230);
										end
										if (v1381 == (498 - (128 + 363))) then
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[4 - 2]] = v81[v83[3]][v83[4]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 - 0]] = v81[v83[8 - 5]][v81[v83[4]]];
											v1381 = 19 - 11;
										end
										if ((3167 == 3167) and (v1381 == (3 + 0))) then
											v1385 = v83[1011 - (615 + 394)];
											v1383, v1384 = v74(v81[v1385](v13(v81, v1385 + 1, v83[3 + 0])));
											v76 = (v1384 + v1385) - (1 + 0);
											v1382 = 0 - 0;
											for v6912 = v1385, v76 do
												local v6913 = 0;
												while true do
													if ((2333 > 446) and ((0 - 0) == v6913)) then
														v1382 = v1382 + (652 - (59 + 592));
														v81[v6912] = v1383[v1382];
														break;
													end
												end
											end
											v75 = v75 + (2 - 1);
											v1381 = 7 - 3;
										end
										if (v1381 == (1 + 0)) then
											v81[v83[173 - (70 + 101)]] = v61[v83[3]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[3 + 0]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v1381 = 243 - (123 + 118);
										end
										if (v1381 == (1 + 3)) then
											v83 = v71[v75];
											v1385 = v83[2];
											v81[v1385] = v81[v1385](v13(v81, v1385 + 1, v76));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1401 - (653 + 746)]][v81[v83[4 - 1]]] = v81[v83[4]];
											v1381 = 7 - 2;
										end
										if (v1381 == (26 - 16)) then
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[2 + 1]] + v83[4];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[3]] + v83[1 + 3];
											v1381 = 11;
										end
										if (v1381 == 11) then
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[4 - 1];
											v75 = v75 + 1;
											v83 = v71[v75];
											v75 = v83[1237 - (885 + 349)];
											break;
										end
										if ((5 + 1) == v1381) then
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[8 - 5]][v81[v83[972 - (915 + 53)]]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[803 - (768 + 33)]] = v81[v83[11 - 8]][v83[4]];
											v1381 = 7;
										end
									end
								end
							elseif ((v84 > (137 - 59)) or (3273 < 837)) then
								v81[v83[330 - (287 + 41)]] = v81[v83[850 - (638 + 209)]][v81[v83[3 + 1]]];
								v75 = v75 + (1687 - (96 + 1590));
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[3]][v81[v83[4]]];
								v75 = v75 + (1673 - (741 + 931));
								v83 = v71[v75];
								do
									return v81[v83[2]];
								end
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v83[8 - 5];
								v75 = v75 + (4 - 3);
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[2 + 1]] + v81[v83[2 + 2]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[11 - 8]][v81[v83[4]]];
								v75 = v75 + 1;
								v83 = v71[v75];
								do
									return;
								end
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v75 = v83[2 + 1];
							else
								local v1395 = 0 - 0;
								local v1396;
								while true do
									if ((2301 <= 4642) and ((3 + 0) == v1395)) then
										v75 = v75 + (495 - (64 + 430));
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[3 + 0]] + v83[367 - (106 + 257)];
										v1395 = 4;
									end
									if (((1 + 0) == v1395) or (4191 <= 2183)) then
										v83 = v71[v75];
										v1396 = v83[723 - (496 + 225)];
										v81[v1396] = v81[v1396]();
										v1395 = 3 - 1;
									end
									if (v1395 == 2) then
										v75 = v75 + (4 - 3);
										v83 = v71[v75];
										v81[v83[2]][v81[v83[1661 - (256 + 1402)]]] = v81[v83[1903 - (30 + 1869)]];
										v1395 = 1372 - (213 + 1156);
									end
									if ((2056 <= 2503) and (v1395 == 4)) then
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v83[191 - (96 + 92)];
										break;
									end
									if (v1395 == (0 + 0)) then
										v1396 = nil;
										v81[v83[2]] = v81[v83[902 - (142 + 757)]][v81[v83[4 + 0]]];
										v75 = v75 + 1 + 0;
										v1395 = 80 - (32 + 47);
									end
								end
							end
						elseif ((v84 <= (2069 - (1053 + 924))) or (2194 > 3745)) then
							if (v84 <= (84 + 1)) then
								if ((4482 == 4482) and (v84 <= (140 - 58))) then
									if ((v84 <= (1728 - (685 + 963))) or (2502 >= 4437)) then
										v81[v83[2]] = v81[v83[5 - 2]] * v83[4];
									elseif (v84 == 81) then
										v81[v83[2 - 0]] = v81[v83[1712 - (541 + 1168)]][v81[v83[4]]];
										v75 = v75 + (1598 - (645 + 952));
										v83 = v71[v75];
										v81[v83[840 - (669 + 169)]] = v83[3];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[6 - 4]] = v81[v83[6 - 3]][v81[v83[4]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[768 - (181 + 584)]][v81[v83[1399 - (665 + 730)]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[5 - 3]] = v83[5 - 2];
										v75 = v75 + (1351 - (540 + 810));
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[11 - 8]][v81[v83[10 - 6]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[206 - (166 + 37)]][v81[v83[4]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1883 - (22 + 1859)]] = v81[v83[3]] + v81[v83[1776 - (843 + 929)]];
										v75 = v75 + (263 - (30 + 232));
										v83 = v71[v75];
										v81[v83[5 - 3]][v81[v83[3]]] = v81[v83[781 - (55 + 722)]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[2]] = v83[3];
									else
										local v1414 = 1675 - (78 + 1597);
										while true do
											if (v1414 == (1 + 0)) then
												v81[v83[2 + 0]] = v81[v83[3 + 0]][v83[553 - (305 + 244)]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v1414 = 107 - (95 + 10);
											end
											if ((4470 > 1426) and (v1414 == (2 + 0))) then
												v81[v83[6 - 4]][v81[v83[3 - 0]]] = v81[v83[766 - (592 + 170)]];
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v1414 = 7 - 4;
											end
											if ((2 + 1) == v1414) then
												v81[v83[1 + 1]] = v81[v83[6 - 3]] + v83[1 + 3];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v1414 = 511 - (353 + 154);
											end
											if (0 == v1414) then
												v81[v83[2 - 0]] = v81[v83[3 - 0]][v83[3 + 1]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v1414 = 1 + 0;
											end
											if (v1414 == (5 - 1)) then
												v81[v83[3 - 1]] = v83[6 - 3];
												break;
											end
										end
									end
								elseif (v84 <= (169 - (7 + 79))) then
									v81[v83[1 + 1]] = v81[v83[184 - (24 + 157)]][v81[v83[7 - 3]]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[1 + 2]][v83[10 - 6]];
									v75 = v75 + (381 - (262 + 118));
									v83 = v71[v75];
									v81[v83[1085 - (1038 + 45)]] = {};
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2]][v81[v83[233 - (19 + 211)]]] = v81[v83[117 - (88 + 25)]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3]] + v83[2 + 2];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[1039 - (1007 + 29)]][v81[v83[2 + 2]]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[9 - 7]] = v83[3];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v75 = v83[3];
								elseif (v84 > (895 - (340 + 471))) then
									local v1415 = 0 - 0;
									while true do
										if (v1415 == 1) then
											v81[v83[2]] = v81[v83[592 - (276 + 313)]][v81[v83[9 - 5]]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1415 = 2;
										end
										if (v1415 == (3 + 4)) then
											v81[v83[2]] = v83[1 + 2];
											break;
										end
										if ((v1415 == (1975 - (495 + 1477))) or (4263 > 4449)) then
											v81[v83[5 - 3]] = v83[2 + 1];
											v75 = v75 + (404 - (342 + 61));
											v83 = v71[v75];
											v1415 = 2 + 2;
										end
										if ((v1415 == 6) or (531 >= 4703)) then
											v81[v83[2]][v81[v83[168 - (4 + 161)]]] = v81[v83[3 + 1]];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v1415 = 18 - 11;
										end
										if (v1415 == (502 - (322 + 175))) then
											v81[v83[565 - (173 + 390)]] = v81[v83[1 + 2]][v81[v83[318 - (203 + 111)]]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1415 = 6;
										end
										if (v1415 == (0 + 0)) then
											v81[v83[2 + 0]] = v83[3];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v1415 = 1;
										end
										if (v1415 == (2 + 0)) then
											v81[v83[708 - (57 + 649)]] = v61[v83[387 - (328 + 56)]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1415 = 3;
										end
										if ((1728 < 1775) and (v1415 == (2 + 2))) then
											v81[v83[514 - (433 + 79)]] = v81[v83[1 + 2]][v81[v83[4 + 0]]];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v1415 = 5;
										end
									end
								else
									local v1416 = 0 - 0;
									while true do
										if ((v1416 == (3 + 0)) or (1244 == 3167)) then
											v81[v83[2 + 0]][v81[v83[3]]] = v81[v83[1040 - (562 + 474)]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v1416 = 7 - 3;
										end
										if ((504 <= 1762) and (v1416 == (907 - (76 + 829)))) then
											v81[v83[2]] = v81[v83[1676 - (1506 + 167)]][v83[4]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v1416 = 269 - (58 + 208);
										end
										if ((v1416 == (3 + 1)) or (3775 <= 2976)) then
											v75 = v83[3 + 0];
											break;
										end
										if ((v1416 == (1 + 0)) or (2783 < 621)) then
											v81[v83[7 - 5]] = v81[v83[340 - (258 + 79)]][v83[1 + 3]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v1416 = 2;
										end
										if ((1470 - (1219 + 251)) == v1416) then
											v81[v83[1673 - (1231 + 440)]] = v81[v83[61 - (34 + 24)]][v81[v83[3 + 1]]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v1416 = 1 + 0;
										end
									end
								end
							elseif (v84 <= (267 - 179)) then
								if (v84 <= (275 - 189)) then
									v81[v83[5 - 3]] = v81[v83[9 - 6]][v83[8 - 4]];
									v75 = v75 + (1590 - (877 + 712));
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[2 + 1]][v81[v83[758 - (242 + 512)]]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[629 - (92 + 535)]] = v81[v83[3 + 0]][v83[7 - 3]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[10 - 7]][v81[v83[4 + 0]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[5 - 2]][v81[v83[5 - 1]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1787 - (1476 + 309)]][v81[v83[1287 - (299 + 985)]]] = v81[v83[1 + 3]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[9 - 6]] + v83[97 - (86 + 7)];
									v75 = v75 + (4 - 3);
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[883 - (672 + 208)];
									v75 = v75 + 1;
									v83 = v71[v75];
									v75 = v83[3];
								elseif ((1723 < 4326) and (v84 == (38 + 49))) then
									v81[v83[2]] = v83[3];
									v75 = v75 + (133 - (14 + 118));
									v83 = v71[v75];
									v81[v83[447 - (339 + 106)]] = v81[v83[3 + 0]][v81[v83[4]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[1398 - (440 + 955)];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[3 - 1]] = v81[v83[1 + 2]][v81[v83[9 - 5]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[355 - (260 + 93)]][v81[v83[3 + 0]]] = v81[v83[4]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[3 - 1]] = v83[1977 - (1181 + 793)];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[310 - (105 + 202)]] + v81[v83[4 + 0]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[812 - (352 + 458)]] = v81[v83[3]][v81[v83[16 - 12]]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[8 - 5];
								else
									v81[v83[2]] = v81[v83[952 - (438 + 511)]] % v83[1387 - (1262 + 121)];
								end
							elseif (v84 <= (1158 - (728 + 340))) then
								if (v84 > (1879 - (816 + 974))) then
									local v1433 = 0;
									while true do
										if ((v1433 == (5 - 3)) or (121 > 4474)) then
											v81[v83[7 - 5]] = v81[v83[342 - (163 + 176)]][v81[v83[10 - 6]]];
											v75 = v75 + (4 - 3);
											v83 = v71[v75];
											v1433 = 3;
										end
										if (v1433 == 0) then
											v81[v83[2]] = v81[v83[1 + 2]][v83[4]];
											v75 = v75 + (1811 - (1564 + 246));
											v83 = v71[v75];
											v1433 = 346 - (124 + 221);
										end
										if (v1433 == (1 + 0)) then
											v81[v83[453 - (115 + 336)]] = v81[v83[6 - 3]][v83[4]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1433 = 48 - (45 + 1);
										end
										if (v1433 == (1 + 5)) then
											v81[v83[1992 - (1282 + 708)]] = v83[1215 - (583 + 629)];
											break;
										end
										if ((v1433 == (1 + 4)) or (1417 == 784)) then
											v81[v83[5 - 3]] = v81[v83[2 + 1]][v81[v83[1174 - (943 + 227)]]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1433 = 1637 - (1539 + 92);
										end
										if (v1433 == (1949 - (706 + 1240))) then
											v81[v83[2]][v81[v83[261 - (81 + 177)]]] = v81[v83[4]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v1433 = 261 - (212 + 45);
										end
										if (v1433 == (13 - 9)) then
											v81[v83[1948 - (708 + 1238)]] = v81[v83[3]] + v83[1 + 3];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1433 = 2 + 3;
										end
									end
								else
									local v1434 = 1667 - (586 + 1081);
									while true do
										if ((70 <= 1818) and (v1434 == (518 - (348 + 163)))) then
											v81[v83[2 + 0]][v81[v83[283 - (215 + 65)]]] = v81[v83[9 - 5]];
											v75 = v75 + (1860 - (1541 + 318));
											v83 = v71[v75];
											v1434 = 8 + 0;
										end
										if (v1434 == (3 + 1)) then
											v81[v83[2]] = v83[3 + 0];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1434 = 1755 - (1036 + 714);
										end
										if (v1434 == (4 + 2)) then
											v81[v83[2 + 0]] = v81[v83[3]][v81[v83[1284 - (883 + 397)]]];
											v75 = v75 + (591 - (563 + 27));
											v83 = v71[v75];
											v1434 = 27 - 20;
										end
										if ((v1434 == 8) or (1470 <= 480)) then
											v81[v83[1988 - (1369 + 617)]] = v83[1490 - (85 + 1402)];
											break;
										end
										if ((2047 < 4750) and (v1434 == (2 + 1))) then
											v81[v83[4 - 2]] = v81[v83[3]][v81[v83[407 - (274 + 129)]]];
											v75 = v75 + (218 - (12 + 205));
											v83 = v71[v75];
											v1434 = 4;
										end
										if (v1434 == (5 + 0)) then
											v81[v83[7 - 5]] = v81[v83[3 + 0]][v81[v83[388 - (27 + 357)]]];
											v75 = v75 + (481 - (91 + 389));
											v83 = v71[v75];
											v1434 = 303 - (90 + 207);
										end
										if (v1434 == (1 + 1)) then
											v81[v83[863 - (706 + 155)]] = v83[3];
											v75 = v75 + (1796 - (730 + 1065));
											v83 = v71[v75];
											v1434 = 3;
										end
										if (v1434 == (1564 - (1339 + 224))) then
											v81[v83[2]] = v81[v83[2 + 1]][v81[v83[4 + 0]]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v1434 = 2;
										end
										if (v1434 == (843 - (268 + 575))) then
											v81[v83[1296 - (919 + 375)]] = v81[v83[8 - 5]] + v81[v83[975 - (180 + 791)]];
											v75 = v75 + (1806 - (323 + 1482));
											v83 = v71[v75];
											v1434 = 1919 - (1177 + 741);
										end
									end
								end
							elseif (v84 > (6 + 85)) then
								if (v81[v83[2]] <= v81[v83[14 - 10]]) then
									v75 = v75 + 1 + 0;
								else
									v75 = v83[3];
								end
							else
								local v1435 = 0 - 0;
								local v1436;
								local v1437;
								local v1438;
								local v1439;
								while true do
									if (v1435 == (1 + 8)) then
										v81[v83[2]] = v81[v83[112 - (96 + 13)]];
										v75 = v75 + (1922 - (962 + 959));
										v83 = v71[v75];
										v81[v83[4 - 2]] = v83[1 + 2];
										v75 = v75 + 1;
										v1435 = 1361 - (461 + 890);
									end
									if (v1435 == 0) then
										v1436 = nil;
										v1437 = nil;
										v1436, v1438 = nil;
										v1439 = nil;
										v81[v83[2]] = v81[v83[3 + 0]];
										v1435 = 3 - 2;
									end
									if (v1435 == (248 - (19 + 224))) then
										v1437 = 0 + 0;
										for v6914 = v1439, v76 do
											local v6915 = 198 - (37 + 161);
											while true do
												if (v6915 == 0) then
													v1437 = v1437 + 1 + 0;
													v81[v6914] = v1436[v1437];
													break;
												end
											end
										end
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v1439 = v83[2];
										v1435 = 6 + 0;
									end
									if ((846 >= 285) and (v1435 == (71 - (60 + 1)))) then
										v83 = v71[v75];
										v75 = v83[926 - (826 + 97)];
										break;
									end
									if (v1435 == (6 + 0)) then
										v1436, v1438 = v74(v81[v1439](v13(v81, v1439 + (3 - 2), v76)));
										v76 = (v1438 + v1439) - (1 - 0);
										v1437 = 685 - (375 + 310);
										for v6916 = v1439, v76 do
											v1437 = v1437 + (2000 - (1864 + 135));
											v81[v6916] = v1436[v1437];
										end
										v75 = v75 + (2 - 1);
										v1435 = 2 + 5;
									end
									if ((3663 == 3663) and (v1435 == 2)) then
										v81[v83[2]] = v61[v83[2 + 1]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[4 - 2]] = v81[v83[3]];
										v75 = v75 + 1;
										v1435 = 3;
									end
									if (v1435 == (1134 - (314 + 817))) then
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[217 - (32 + 182)]] + v83[3 + 1];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[67 - (39 + 26)]] = v81[v83[147 - (54 + 90)]][v83[4]];
										v1435 = 202 - (45 + 153);
									end
									if (v1435 == (5 + 2)) then
										v83 = v71[v75];
										v1439 = v83[554 - (457 + 95)];
										v1436 = {v81[v1439](v13(v81, v1439 + 1, v76))};
										v1437 = 0 - 0;
										for v6919 = v1439, v83[9 - 5] do
											local v6920 = 0;
											while true do
												if ((2359 >= 1909) and (v6920 == (0 - 0))) then
													v1437 = v1437 + 1 + 0;
													v81[v6919] = v1436[v1437];
													break;
												end
											end
										end
										v1435 = 27 - 19;
									end
									if ((v1435 == 1) or (2542 < 1166)) then
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[5 - 3]] = v81[v83[751 - (485 + 263)]][v81[v83[711 - (575 + 132)]]];
										v75 = v75 + (862 - (750 + 111));
										v83 = v71[v75];
										v1435 = 2;
									end
									if ((1018 - (445 + 565)) == v1435) then
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[5 - 2]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v1435 = 319 - (189 + 121);
									end
									if (v1435 == (1 + 3)) then
										v75 = v75 + (1348 - (634 + 713));
										v83 = v71[v75];
										v1439 = v83[540 - (493 + 45)];
										v1436, v1438 = v74(v81[v1439](v13(v81, v1439 + (969 - (493 + 475)), v83[1 + 2])));
										v76 = (v1438 + v1439) - 1;
										v1435 = 789 - (158 + 626);
									end
								end
							end
						elseif (v84 <= (47 + 52)) then
							if ((v84 <= 95) or (2314 == 365)) then
								if ((4693 > 796) and (v84 <= (153 - 60))) then
									v81[v83[1 + 1]] = v81[v83[3]][v81[v83[1 + 3]]];
									v75 = v75 + (1092 - (1035 + 56));
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[962 - (114 + 845)]][v81[v83[2 + 2]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[5 - 3]] = v83[3];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3]][v81[v83[1053 - (179 + 870)]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 - 0]] = v81[v83[3]][v81[v83[882 - (827 + 51)]]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[476 - (95 + 378)]][v81[v83[1 + 3]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]][v81[v83[4 - 1]]] = v81[v83[4 + 0]];
									v75 = v75 + (1012 - (334 + 677));
									v83 = v71[v75];
									v81[v83[7 - 5]] = v83[1059 - (1049 + 7)];
								elseif ((4827 >= 973) and (v84 > (410 - 316))) then
									local v1440 = 0 - 0;
									while true do
										if (v1440 == (1 + 1)) then
											v81[v83[5 - 3]] = v81[v83[5 - 2]][v81[v83[2 + 2]]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1440 = 3;
										end
										if ((1428 - (1004 + 416)) == v1440) then
											v75 = v83[1960 - (1621 + 336)];
											break;
										end
										if ((v1440 == (1942 - (337 + 1602))) or (4282 == 2535)) then
											v81[v83[2]] = v81[v83[1520 - (1014 + 503)]][v81[v83[1019 - (446 + 569)]]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1440 = 11 - 7;
										end
										if (v1440 == (3 + 3)) then
											v81[v83[3 - 1]] = v81[v83[1 + 2]] % v81[v83[4]];
											v75 = v75 + (506 - (223 + 282));
											v83 = v71[v75];
											v1440 = 1 + 6;
										end
										if (v1440 == (0 - 0)) then
											v81[v83[2 - 0]] = v81[v83[673 - (623 + 47)]][v81[v83[4]]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1440 = 46 - (32 + 13);
										end
										if ((2233 <= 4785) and (v1440 == (3 + 1))) then
											v81[v83[2 + 0]] = v83[1804 - (1070 + 731)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1440 = 5 + 0;
										end
										if (v1440 == (1405 - (1257 + 147))) then
											v81[v83[1 + 1]] = v83[5 - 2];
											v75 = v75 + (134 - (98 + 35));
											v83 = v71[v75];
											v1440 = 1 + 1;
										end
										if ((v1440 == (24 - 17)) or (401 == 1816)) then
											v81[v83[6 - 4]][v81[v83[3 + 0]]] = v81[v83[4 + 0]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1440 = 565 - (395 + 162);
										end
										if (v1440 == (5 + 0)) then
											v81[v83[1943 - (816 + 1125)]] = v81[v83[3]][v81[v83[5 - 1]]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1440 = 1154 - (701 + 447);
										end
									end
								else
									local v1441 = 0 - 0;
									local v1442;
									local v1443;
									local v1444;
									while true do
										if (v1441 == (1 - 0)) then
											v1444 = 0;
											for v6921 = v1442, v83[1345 - (391 + 950)] do
												v1444 = v1444 + (2 - 1);
												v81[v6921] = v1443[v1444];
											end
											break;
										end
										if (((0 - 0) == v1441) or (4472 <= 2732)) then
											v1442 = v83[4 - 2];
											v1443 = {v81[v1442](v13(v81, v1442 + 1 + 0, v76))};
											v1441 = 3 - 2;
										end
									end
								end
							elseif ((3648 < 3700) and (v84 <= (1619 - (251 + 1271)))) then
								if (v84 > (86 + 10)) then
									local v1445 = 0 - 0;
									local v1446;
									local v1447;
									local v1448;
									local v1449;
									while true do
										if (v1445 == (19 - 11)) then
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v1449 = v83[1261 - (1147 + 112)];
											v1447 = v81[v1449];
											v1445 = 9;
										end
										if ((1877 <= 2038) and (v1445 == (0 + 0))) then
											v1446 = nil;
											v1447 = nil;
											v1448 = nil;
											v1449 = nil;
											v1445 = 1 - 0;
										end
										if (v1445 == 5) then
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[699 - (335 + 362)]] = {};
											v75 = v75 + 1 + 0;
											v1445 = 8 - 2;
										end
										if (v1445 == (18 - 11)) then
											v81[v83[7 - 5]] = v81[v83[14 - 11]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[8 - 5];
											v1445 = 574 - (237 + 329);
										end
										if (v1445 == (14 - 10)) then
											v81[v83[2]] = v81[v83[2 + 1]] - v83[3 + 1];
											v75 = v75 + (1125 - (408 + 716));
											v83 = v71[v75];
											v81[v83[2]] = {};
											v1445 = 5;
										end
										if (v1445 == (33 - 24)) then
											v1446 = v81[v1449 + (823 - (344 + 477))];
											if (v1446 > (0 + 0)) then
												if (v1447 > v81[v1449 + (1762 - (1188 + 573))]) then
													v75 = v83[7 - 4];
												else
													v81[v1449 + 3] = v1447;
												end
											elseif ((1061 < 2971) and (v1447 < v81[v1449 + 1 + 0])) then
												v75 = v83[3];
											else
												v81[v1449 + (9 - 6)] = v1447;
											end
											break;
										end
										if (v1445 == 1) then
											v81[v83[2 - 0]] = v83[7 - 4];
											v75 = v75 + (1530 - (508 + 1021));
											v83 = v71[v75];
											v1449 = v83[2 + 0];
											v1445 = 1168 - (228 + 938);
										end
										if (v1445 == 3) then
											v1449 = v83[687 - (332 + 353)];
											v81[v1449] = v81[v1449](v13(v81, v1449 + (1 - 0), v76));
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v1445 = 4 + 0;
										end
										if ((767 <= 2182) and (v1445 == (2 + 0))) then
											v76 = (v1449 + v82) - 1;
											for v6924 = v1449, v76 do
												v1448 = v77[v6924 - v1449];
												v81[v6924] = v1448;
											end
											v75 = v75 + 1;
											v83 = v71[v75];
											v1445 = 3;
										end
										if ((4530 > 2836) and (v1445 == (23 - 17))) then
											v83 = v71[v75];
											v81[v83[425 - (18 + 405)]] = v83[2 + 1];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1445 = 10 - 3;
										end
									end
								else
									v81[v83[2]] = v81[v83[3]][v83[982 - (194 + 784)]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1772 - (694 + 1076)]] = v81[v83[1907 - (122 + 1782)]][v81[v83[4]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[3 + 0]][v83[3 + 1]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[1973 - (214 + 1756)]][v81[v83[19 - 15]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1 + 1]][v81[v83[3]]] = v81[v83[589 - (217 + 368)]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[3 + 0]] + v83[1 + 3];
									v75 = v75 + (890 - (844 + 45));
									v83 = v71[v75];
									v81[v83[2]] = v83[287 - (242 + 42)];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v75 = v83[6 - 3];
								end
							elseif (v84 > (1298 - (132 + 1068))) then
								v81[v83[2]] = v81[v83[4 - 1]][v83[4]];
								v75 = v75 + (1624 - (214 + 1409));
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[3 + 0]][v83[1638 - (497 + 1137)]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[3]][v81[v83[944 - (9 + 931)]]];
								v75 = v75 + (290 - (181 + 108));
								v83 = v71[v75];
								v81[v83[2 + 0]] = v81[v83[3]][v83[9 - 5]];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[3]] - v81[v83[3 + 1]];
								v75 = v75 + (477 - (296 + 180));
								v83 = v71[v75];
								v81[v83[1405 - (1183 + 220)]][v81[v83[1268 - (1037 + 228)]]] = v81[v83[4]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[5 - 3]] = v81[v83[10 - 7]] + v83[738 - (527 + 207)];
								v75 = v75 + (528 - (187 + 340));
								v83 = v71[v75];
								v81[v83[1872 - (1298 + 572)]] = v81[v83[6 - 3]][v81[v83[174 - (144 + 26)]]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[4 - 2]] = v83[6 - 3];
							else
								v81[v83[1 + 1]] = v81[v83[8 - 5]][v81[v83[9 - 5]]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[9 - 7]] = v81[v83[3]][v81[v83[4]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]] = #v81[v83[3]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[2 + 0]][v81[v83[2 + 1]]] = v81[v83[206 - (5 + 197)]];
								v75 = v75 + (687 - (339 + 347));
								v83 = v71[v75];
								v81[v83[4 - 2]] = v83[10 - 7];
							end
						elseif ((v84 <= (478 - (365 + 11))) or (4885 <= 2758)) then
							if ((2591 >= 1729) and (v84 <= 100)) then
								local v331 = 0 + 0;
								local v332;
								while true do
									if ((1521 > 330) and (v331 == (23 - 17))) then
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[926 - (837 + 87)]] = v81[v83[3]][v81[v83[6 - 2]]];
										v331 = 1677 - (837 + 833);
									end
									if (v331 == (2 + 3)) then
										v75 = v75 + (1388 - (356 + 1031));
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[2 + 1]] + v81[v83[1650 - (73 + 1573)]];
										v331 = 1394 - (1307 + 81);
									end
									if ((v331 == (235 - (7 + 227))) or (1722 == 1128)) then
										v83 = v71[v75];
										v81[v83[2 - 0]] = v81[v83[169 - (90 + 76)]][v81[v83[12 - 8]]];
										v75 = v75 + 1 + 0;
										v331 = 2 + 0;
									end
									if (v331 == (4 + 0)) then
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[2]] = v83[263 - (197 + 63)];
										v331 = 2 + 3;
									end
									if (((1 + 2) == v331) or (2128 >= 3553)) then
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]][v81[v83[3 - 0]]] = v81[v83[1373 - (618 + 751)]];
										v331 = 3 + 1;
									end
									if (v331 == (1912 - (206 + 1704))) then
										v83 = v71[v75];
										v332 = v83[2 - 0];
										v81[v332] = v81[v332]();
										v331 = 5 - 2;
									end
									if (v331 == 7) then
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v83[1278 - (155 + 1120)];
										break;
									end
									if (v331 == (1506 - (396 + 1110))) then
										v332 = nil;
										v81[v83[4 - 2]] = v81[v83[3]][v81[v83[2 + 2]]];
										v75 = v75 + 1 + 0;
										v331 = 1 + 0;
									end
								end
							elseif (v84 > 101) then
								v81[v83[978 - (230 + 746)]] = v81[v83[604 - (473 + 128)]] / v83[52 - (39 + 9)];
							else
								v81[v83[268 - (38 + 228)]] = v81[v83[3]] + v81[v83[6 - 2]];
								v75 = v75 + (474 - (106 + 367));
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[1865 - (354 + 1508)]][v81[v83[12 - 8]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2 + 0]] = v83[3 - 0];
								v75 = v75 + (1245 - (334 + 910));
								v83 = v71[v75];
								v81[v83[897 - (92 + 803)]] = v81[v83[2 + 1]][v81[v83[1185 - (1035 + 146)]]];
								v75 = v75 + (617 - (230 + 386));
								v83 = v71[v75];
								v81[v83[2 + 0]] = v81[v83[3]][v81[v83[1514 - (353 + 1157)]]];
								v75 = v75 + (1115 - (53 + 1061));
								v83 = v71[v75];
								do
									return v81[v83[1637 - (1568 + 67)]];
								end
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v83[7 - 4];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[8 - 5]] + v81[v83[9 - 5]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[1214 - (615 + 597)]] = v83[3 + 0];
							end
						elseif ((3273 >= 1739) and (v84 <= 104)) then
							if (v84 == (153 - 50)) then
								local v1501 = 0 + 0;
								while true do
									if ((214 < 1254) and (v1501 == 3)) then
										v81[v83[1 + 1]][v81[v83[3]]] = v81[v83[4]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1901 - (1056 + 843)]] = v83[3];
										v1501 = 4;
									end
									if (v1501 == (0 - 0)) then
										v81[v83[2 - 0]] = v81[v83[8 - 5]][v83[3 + 1]];
										v75 = v75 + (1977 - (286 + 1690));
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[914 - (98 + 813)]][v83[2 + 2]];
										v1501 = 1;
									end
									if (v1501 == (4 - 2)) then
										v83 = v71[v75];
										v81[v83[2 + 0]] = #v81[v83[510 - (263 + 244)]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v1501 = 3;
									end
									if ((4 == v1501) or (1773 > 1975)) then
										v75 = v75 + (1688 - (1502 + 185));
										v83 = v71[v75];
										v75 = v83[3];
										break;
									end
									if (v1501 == (1 + 0)) then
										v75 = v75 + (4 - 3);
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[7 - 4]][v81[v83[1531 - (629 + 898)]]];
										v75 = v75 + 1;
										v1501 = 2;
									end
								end
							else
								v81[v83[2]] = v81[v83[8 - 5]] + v83[10 - 6];
								v75 = v75 + (366 - (12 + 353));
								v83 = v71[v75];
								v81[v83[1913 - (1680 + 231)]] = v81[v83[1 + 2]][v81[v83[4]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[1151 - (212 + 937)]] = v81[v83[3]][v83[3 + 1]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1064 - (111 + 951)]] = v81[v83[1 + 2]][v83[31 - (18 + 9)]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[537 - (31 + 503)]][v81[v83[1636 - (595 + 1037)]]];
								v75 = v75 + (1445 - (189 + 1255));
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[4 - 1]][v83[1283 - (1170 + 109)]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[3]] + v81[v83[1821 - (348 + 1469)]];
								v75 = v75 + (1290 - (1115 + 174));
								v83 = v71[v75];
								v81[v83[4 - 2]][v81[v83[1017 - (85 + 929)]]] = v81[v83[3 + 1]];
								v75 = v75 + (1868 - (1151 + 716));
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[3]] + v83[4 + 0];
								v75 = v75 + (1705 - (95 + 1609));
								v83 = v71[v75];
								v81[v83[6 - 4]] = v81[v83[761 - (364 + 394)]] + v83[4 + 0];
							end
						elseif (v84 > (32 + 73)) then
							local v1516 = 0;
							local v1517;
							local v1518;
							local v1519;
							local v1520;
							while true do
								if (v1516 == 0) then
									v1517 = nil;
									v1518, v1519 = nil;
									v1520 = nil;
									v81[v83[1 + 1]] = v81[v83[3]][v81[v83[4 + 0]]];
									v75 = v75 + 1 + 0;
									v1516 = 1 + 0;
								end
								if (v1516 == (3 + 3)) then
									v1520 = v83[2 + 0];
									v1518, v1519 = v74(v81[v1520](v13(v81, v1520 + 1 + 0, v83[3])));
									v76 = (v1519 + v1520) - (957 - (719 + 237));
									v1517 = 0 - 0;
									for v6927 = v1520, v76 do
										v1517 = v1517 + 1 + 0;
										v81[v6927] = v1518[v1517];
									end
									break;
								end
								if ((v1516 == (4 - 2)) or (2753 > 4358)) then
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[4 - 2]] = v61[v83[1994 - (761 + 1230)]];
									v75 = v75 + (194 - (80 + 113));
									v83 = v71[v75];
									v1516 = 2 + 1;
								end
								if (v1516 == (1 + 0)) then
									v83 = v71[v75];
									v81[v83[1 + 1]] = {};
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[11 - 8]][v81[v83[1 + 3]]];
									v1516 = 2;
								end
								if (v1516 == (1 + 3)) then
									v83 = v71[v75];
									v81[v83[1245 - (965 + 278)]] = v81[v83[1732 - (1391 + 338)]] + v81[v83[4]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[6 - 3];
									v1516 = 2 + 3;
								end
								if ((v1516 == (1411 - (496 + 912))) or (3435 <= 1453)) then
									v81[v83[6 - 4]] = v81[v83[3]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[5 - 2];
									v75 = v75 + (1331 - (1190 + 140));
									v1516 = 2 + 2;
								end
								if (v1516 == 5) then
									v75 = v75 + (719 - (317 + 401));
									v83 = v71[v75];
									v81[v83[951 - (303 + 646)]] = v81[v83[10 - 7]][v81[v83[1736 - (1675 + 57)]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v1516 = 6;
								end
							end
						elseif (v81[v83[2 + 0]] > v83[10 - 6]) then
							v75 = v75 + 1 + 0;
						else
							v75 = v83[980 - (338 + 639)];
						end
					elseif (v84 <= (539 - (320 + 59))) then
						if (v84 <= (68 + 65)) then
							if (v84 <= (851 - (628 + 104))) then
								if (v84 <= (138 - 26)) then
									if ((4067 >= 1631) and (v84 <= (2000 - (439 + 1452)))) then
										if (v84 <= (2054 - (105 + 1842))) then
											local v333 = 0 - 0;
											local v334;
											local v335;
											local v336;
											local v337;
											while true do
												if (v333 == (9 - 5)) then
													v83 = v71[v75];
													v337 = v83[2];
													v81[v337] = v81[v337](v13(v81, v337 + (4 - 3), v76));
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[2]][v81[v83[4 - 1]]] = v81[v83[3 + 1]];
													v333 = 5;
												end
												if (v333 == (1166 - (274 + 890))) then
													v81[v83[2 + 0]] = v81[v83[3 + 0]] + v81[v83[2 + 2]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[2 + 0]] = v81[v83[3 - 0]];
													v75 = v75 + (820 - (731 + 88));
													v83 = v71[v75];
													v333 = 3;
												end
												if (v333 == (6 + 1)) then
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[1 + 1]] = v81[v83[3 - 0]][v81[v83[4]]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[5 - 3]] = v83[8 - 5];
													v333 = 8;
												end
												if (v333 == (18 - 9)) then
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[1 + 1]] = v81[v83[1 + 2]][v81[v83[3 + 1]]];
													v75 = v75 + (159 - (139 + 19));
													v83 = v71[v75];
													v81[v83[1 + 1]] = v81[v83[1996 - (1687 + 306)]][v81[v83[14 - 10]]];
													v333 = 1164 - (1018 + 136);
												end
												if ((2354 == 2354) and ((0 + 0) == v333)) then
													v334 = nil;
													v335, v336 = nil;
													v337 = nil;
													v81[v83[2]] = v61[v83[3]];
													v75 = v75 + (4 - 3);
													v83 = v71[v75];
													v333 = 816 - (117 + 698);
												end
												if (v333 == (486 - (305 + 176))) then
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[2]] = v83[1 + 2];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[2]] = v81[v83[3 + 0]] + v81[v83[4]];
													v333 = 6;
												end
												if ((10 - 4) == v333) then
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[2 - 0]] = v83[6 - 3];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[2]] = v81[v83[5 - 2]] + v81[v83[264 - (159 + 101)]];
													v333 = 33 - 26;
												end
												if (v333 == (27 - 19)) then
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[6 - 4]] = v81[v83[5 - 2]][v81[v83[4]]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[268 - (112 + 154)]] = v83[3];
													v333 = 20 - 11;
												end
												if ((v333 == 3) or (1309 == 3691)) then
													v337 = v83[2];
													v335, v336 = v74(v81[v337](v13(v81, v337 + (32 - (21 + 10)), v83[1722 - (531 + 1188)])));
													v76 = (v336 + v337) - (1 + 0);
													v334 = 663 - (96 + 567);
													for v4460 = v337, v76 do
														v334 = v334 + (1 - 0);
														v81[v4460] = v335[v334];
													end
													v75 = v75 + 1 + 0;
													v333 = 14 - 10;
												end
												if (v333 == (1696 - (867 + 828))) then
													v81[v83[4 - 2]] = v81[v83[3]];
													v75 = v75 + (3 - 2);
													v83 = v71[v75];
													v81[v83[4 - 2]] = v83[3];
													v75 = v75 + (1 - 0);
													v83 = v71[v75];
													v333 = 2;
												end
												if (v333 == (5 + 5)) then
													v75 = v75 + (1 - 0);
													v83 = v71[v75];
													v81[v83[773 - (134 + 637)]][v81[v83[1 + 2]]] = v81[v83[1161 - (775 + 382)]];
													v75 = v75 + (1 - 0);
													v83 = v71[v75];
													v81[v83[609 - (45 + 562)]] = v83[865 - (545 + 317)];
													break;
												end
											end
										elseif ((1516 > 172) and (v84 > 108)) then
											v81[v83[2 - 0]] = v61[v83[1029 - (763 + 263)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v61[v83[1753 - (512 + 1238)]];
											v75 = v75 + (1595 - (272 + 1322));
											v83 = v71[v75];
											v81[v83[3 - 1]] = v83[1249 - (533 + 713)];
											v75 = v75 + (29 - (14 + 14));
											v83 = v71[v75];
											v81[v83[827 - (499 + 326)]] = #v81[v83[4 - 1]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[426 - (104 + 320)]] = v81[v83[2000 - (1929 + 68)]][v81[v83[4]]];
											v75 = v75 + (1324 - (1206 + 117));
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[1595 - (683 + 909)]][v81[v83[12 - 8]]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											do
												return v81[v83[779 - (772 + 5)]];
											end
											v75 = v75 + (1428 - (19 + 1408));
											v83 = v71[v75];
											do
												return;
											end
										else
											local v1533 = 288 - (134 + 154);
											while true do
												if (v1533 == 4) then
													v81[v83[2]] = v81[v83[4 - 1]][v81[v83[12 - 8]]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v1533 = 2 + 3;
												end
												if (v1533 == (0 + 0)) then
													v81[v83[204 - (10 + 192)]] = v83[50 - (13 + 34)];
													v75 = v75 + 1;
													v83 = v71[v75];
													v1533 = 1290 - (342 + 947);
												end
												if ((2505 < 4949) and (5 == v1533)) then
													v81[v83[8 - 6]] = v81[v83[1711 - (119 + 1589)]][v81[v83[8 - 4]]];
													v75 = v75 + (1 - 0);
													v83 = v71[v75];
													v1533 = 6;
												end
												if (v1533 == (555 - (545 + 7))) then
													v81[v83[5 - 3]] = v83[2 + 1];
													v75 = v75 + (1704 - (494 + 1209));
													v83 = v71[v75];
													v1533 = 10 - 6;
												end
												if (v1533 == 6) then
													v81[v83[1000 - (197 + 801)]][v81[v83[5 - 2]]] = v81[v83[19 - 15]];
													v75 = v75 + (955 - (919 + 35));
													v83 = v71[v75];
													v1533 = 6 + 1;
												end
												if ((7 - 5) == v1533) then
													v81[v83[469 - (369 + 98)]] = v61[v83[1118 - (400 + 715)]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v1533 = 2 + 1;
												end
												if (v1533 == (1326 - (744 + 581))) then
													v81[v83[2 + 0]] = v81[v83[1625 - (653 + 969)]][v81[v83[7 - 3]]];
													v75 = v75 + (1632 - (12 + 1619));
													v83 = v71[v75];
													v1533 = 2;
												end
												if (v1533 == (170 - (103 + 60))) then
													v81[v83[9 - 7]] = v83[3];
													break;
												end
											end
										end
									elseif ((717 > 504) and (v84 <= (480 - 370))) then
										v81[v83[9 - 7]] = v81[v83[3]][v81[v83[1666 - (710 + 952)]]];
									elseif (v84 > (1979 - (555 + 1313))) then
										local v1534 = v83[2 + 0];
										local v1535 = {v81[v1534]()};
										local v1536 = v83[4 + 0];
										local v1537 = 0 + 0;
										for v4101 = v1534, v1536 do
											local v4102 = 1468 - (1261 + 207);
											while true do
												if ((3435 == 3435) and (v4102 == (252 - (245 + 7)))) then
													v1537 = v1537 + 1;
													v81[v4101] = v1535[v1537];
													break;
												end
											end
										end
									else
										local v1538 = 747 - (212 + 535);
										while true do
											if (0 == v1538) then
												v81[v83[2]] = v81[v83[14 - 11]][v83[4]];
												v75 = v75 + (1477 - (905 + 571));
												v83 = v71[v75];
												v1538 = 4 - 3;
											end
											if (v1538 == (4 - 0)) then
												v81[v83[7 - 5]][v81[v83[1 + 2]]] = v81[v83[1467 - (522 + 941)]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v1538 = 1516 - (292 + 1219);
											end
											if (v1538 == (1118 - (787 + 325))) then
												v81[v83[5 - 3]] = v83[3];
												break;
											end
											if ((4301 >= 318) and (v1538 == (5 + 0))) then
												v81[v83[4 - 2]] = v81[v83[3]] + v83[538 - (424 + 110)];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v1538 = 4 + 2;
											end
											if ((1 + 0) == v1538) then
												v81[v83[314 - (33 + 279)]] = v61[v83[1 + 2]];
												v75 = v75 + (1354 - (1338 + 15));
												v83 = v71[v75];
												v1538 = 2;
											end
											if ((464 < 1234) and (v1538 == 2)) then
												v81[v83[1425 - (528 + 895)]] = v81[v83[2 + 1]][v83[1928 - (1606 + 318)]];
												v75 = v75 + (1820 - (298 + 1521));
												v83 = v71[v75];
												v1538 = 3;
											end
											if (v1538 == (12 - 9)) then
												v81[v83[312 - (154 + 156)]] = v81[v83[11 - 8]][v81[v83[8 - 4]]];
												v75 = v75 + (1116 - (712 + 403));
												v83 = v71[v75];
												v1538 = 454 - (168 + 282);
											end
										end
									end
								elseif (v84 <= 115) then
									if (v84 <= (231 - 118)) then
										local v340 = 0 + 0;
										local v341;
										while true do
											if ((1 + 2) == v340) then
												v83 = v71[v75];
												v341 = v83[5 - 3];
												v81[v341] = v81[v341]();
												v340 = 4;
											end
											if (v340 == (1455 - (1242 + 209))) then
												v75 = v75 + (680 - (20 + 659));
												v83 = v71[v75];
												v81[v83[2]][v81[v83[2 + 1]]] = v81[v83[3 + 1]];
												v340 = 7 - 2;
											end
											if (v340 == (10 - 5)) then
												v75 = v75 + (620 - (427 + 192));
												v83 = v71[v75];
												v81[v83[4 - 2]] = v83[2 + 1];
												break;
											end
											if ((1949 - (1427 + 520)) == v340) then
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[2 + 1]][v81[v83[15 - 11]]];
												v75 = v75 + 1 + 0;
												v340 = 3;
											end
											if (v340 == 1) then
												v83 = v71[v75];
												v81[v83[1234 - (712 + 520)]] = v81[v83[6 - 3]][v81[v83[1350 - (565 + 781)]]];
												v75 = v75 + 1;
												v340 = 567 - (35 + 530);
											end
											if ((v340 == (0 + 0)) or (1228 >= 1774)) then
												v341 = nil;
												v81[v83[6 - 4]] = v83[3];
												v75 = v75 + (1379 - (1330 + 48));
												v340 = 1;
											end
										end
									elseif ((4090 > 1368) and (v84 > (81 + 33))) then
										local v1539 = 0 + 0;
										local v1540;
										while true do
											if ((0 - 0) == v1539) then
												v1540 = nil;
												v81[v83[8 - 6]] = v61[v83[3]];
												v75 = v75 + (1170 - (854 + 315));
												v1539 = 3 - 2;
											end
											if ((1318 < 4118) and (v1539 == (2 + 2))) then
												v75 = v75 + (45 - (31 + 13));
												v83 = v71[v75];
												do
													return;
												end
												break;
											end
											if (v1539 == (4 - 1)) then
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												do
													return v81[v83[2 + 0]];
												end
												v1539 = 4;
											end
											if (2 == v1539) then
												v75 = v75 + (564 - (281 + 282));
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[3]] - v83[10 - 6];
												v1539 = 2 + 1;
											end
											if (v1539 == (950 - (216 + 733))) then
												v83 = v71[v75];
												v1540 = v83[1849 - (137 + 1710)];
												v81[v1540] = v81[v1540]();
												v1539 = 5 - 3;
											end
										end
									else
										v81[v83[540 - (100 + 438)]] = v81[v83[1368 - (205 + 1160)]] + v81[v83[3 + 1]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v83[2 + 1];
										v75 = v75 + (1306 - (535 + 770));
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[2 + 1]] + v81[v83[4]];
										v75 = v75 + (1995 - (211 + 1783));
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[1432 - (1236 + 193)]][v81[v83[4]]];
										v75 = v75 + (911 - (793 + 117));
										v83 = v71[v75];
										v81[v83[1894 - (1607 + 285)]] = v83[863 - (747 + 113)];
									end
								elseif (v84 <= (2093 - (80 + 1896))) then
									if ((548 < 2182) and (v84 > (559 - 443))) then
										v81[v83[2 - 0]] = v81[v83[3 + 0]] + v81[v83[9 - 5]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[2 + 1]][v81[v83[11 - 7]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[6 - 3];
										v75 = v75 + (455 - (246 + 208));
										v83 = v71[v75];
										v81[v83[1894 - (614 + 1278)]] = v81[v83[3]][v81[v83[2 + 2]]];
										v75 = v75 + (315 - (249 + 65));
										v83 = v71[v75];
										v81[v83[4 - 2]] = {};
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[3]][v81[v83[1279 - (726 + 549)]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1426 - (916 + 508)]] = v61[v83[9 - 6]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[326 - (140 + 183)]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[566 - (297 + 267)]] = v83[2 + 1];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[344 - (37 + 305)]] = v81[v83[1269 - (323 + 943)]] + v81[v83[4]];
									else
										v81[v83[1 + 1]] = v81[v83[3 - 0]][v83[1539 - (394 + 1141)]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[1 + 2]][v81[v83[4]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2 - 0]][v81[v83[3 - 0]]] = v81[v83[4 + 0]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[531 - (87 + 442)]] = v81[v83[3]] + v83[809 - (13 + 792)];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v83[3 + 0];
									end
								elseif (v84 > (50 + 68)) then
									v81[v83[2]] = v81[v83[3 + 0]] + v81[v83[1869 - (1231 + 634)]];
									v75 = v75 + (1767 - (1362 + 404));
									v83 = v71[v75];
									v81[v83[5 - 3]] = v83[3 + 0];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[1018 - (660 + 356)]] = v81[v83[4 - 1]] + v81[v83[4 + 0]];
									v75 = v75 + (1951 - (1111 + 839));
									v83 = v71[v75];
									v81[v83[953 - (496 + 455)]] = v81[v83[701 - (66 + 632)]][v81[v83[5 - 1]]];
									v75 = v75 + (1137 - (441 + 695));
									v83 = v71[v75];
									v81[v83[5 - 3]] = v83[5 - 2];
									v75 = v75 + (4 - 3);
									v83 = v71[v75];
									v75 = v83[2 + 1];
								else
									v81[v83[1840 - (286 + 1552)]] = {};
								end
							elseif (v84 <= (1403 - (1016 + 261))) then
								if (v84 <= (1442 - (708 + 612))) then
									if ((1241 <= 1550) and (v84 <= (333 - 213))) then
										local v342 = v83[1 + 1];
										v81[v342] = v81[v342]();
									elseif ((1114 <= 2934) and (v84 == (500 - (113 + 266)))) then
										v81[v83[1172 - (979 + 191)]] = v81[v83[5 - 2]][v81[v83[1739 - (339 + 1396)]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[3]][v83[7 - 3]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[350 - (187 + 160)]][v83[4]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[6 - 4]] = v81[v83[1 + 2]][v81[v83[12 - 8]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]][v81[v83[3]]] = v81[v83[4]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[3 - 1]] = v83[331 - (56 + 272)];
									else
										v81[v83[2 + 0]] = v81[v83[3 + 0]][v83[9 - 5]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[642 - (455 + 185)]][v81[v83[791 - (757 + 31)]]] = v81[v83[4]];
										v75 = v75 + (2000 - (762 + 1237));
										v83 = v71[v75];
										v81[v83[3 - 1]] = v81[v83[3]] + v83[273 - (265 + 4)];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[5 - 2];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v75 = v83[1 + 2];
									end
								elseif ((2107 > 496) and (v84 <= (343 - 219))) then
									if (v84 == 123) then
										local v1606 = v83[3 - 1];
										local v1607 = {v81[v1606](v13(v81, v1606 + (1 - 0), v83[3]))};
										local v1608 = 1734 - (1691 + 43);
										for v4120 = v1606, v83[4 + 0] do
											v1608 = v1608 + (3 - 2);
											v81[v4120] = v1607[v1608];
										end
									else
										v81[v83[1 + 1]] = v81[v83[10 - 7]][v81[v83[180 - (127 + 49)]]];
										v75 = v75 + (1681 - (281 + 1399));
										v83 = v71[v75];
										v81[v83[2]] = v61[v83[3]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1661 - (184 + 1475)]] = v83[3 - 0];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[4 - 2]] = v81[v83[2 + 1]][v81[v83[4]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1293 - (260 + 1031)]] = v81[v83[3]][v81[v83[4]]];
										v75 = v75 + (1178 - (313 + 864));
										v83 = v71[v75];
										v81[v83[694 - (655 + 37)]][v81[v83[3 + 0]]] = v81[v83[6 - 2]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2]] = v83[2 + 1];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[3 - 1]] = v81[v83[773 - (383 + 387)]] + v81[v83[2 + 2]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[3]][v81[v83[4]]];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[1 + 2];
										v75 = v75 + (511 - (304 + 206));
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[3]][v81[v83[229 - (182 + 43)]]];
										v75 = v75 + (776 - (264 + 511));
										v83 = v71[v75];
										v81[v83[1 + 1]] = v61[v83[6 - 3]];
										v75 = v75 + (982 - (128 + 853));
										v83 = v71[v75];
										v81[v83[2]] = v83[1705 - (1635 + 67)];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[2 + 1]][v81[v83[201 - (131 + 66)]]];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[9 - 7]] = v81[v83[2 + 1]][v81[v83[3 + 1]]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[2 - 0]][v81[v83[1608 - (306 + 1299)]]] = v81[v83[2 + 2]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2]] = v83[792 - (671 + 118)];
									end
								elseif (v84 == (492 - 367)) then
									v81[v83[78 - (73 + 3)]] = v81[v83[8 - 5]] + v81[v83[18 - 14]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[1757 - (1668 + 87)]] = v81[v83[1 + 2]][v81[v83[1903 - (296 + 1603)]]];
									v75 = v75 + (107 - (79 + 27));
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[3];
									v75 = v75 + (1008 - (700 + 307));
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[3]][v81[v83[1803 - (1477 + 322)]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[4 - 2]] = v61[v83[3 + 0]];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[2]] = v83[3 + 0];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[8 - 6]] = v81[v83[7 - 4]][v81[v83[2 + 2]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[4 - 2]] = v81[v83[4 - 1]][v81[v83[4]]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[1788 - (20 + 1766)]][v81[v83[5 - 2]]] = v81[v83[813 - (88 + 721)]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[2 + 1];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[3]] + v81[v83[9 - 5]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2]] = v83[440 - (93 + 344)];
								else
									v81[v83[2]] = v81[v83[1216 - (960 + 253)]][v83[1 + 3]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[5 - 3]] = v81[v83[8 - 5]][v81[v83[4]]];
									v75 = v75 + (1417 - (74 + 1342));
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[477 - (33 + 441)]][v83[11 - 7]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1421 - (64 + 1355)]] = v81[v83[4 - 1]][v81[v83[15 - (5 + 6)]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1 + 1]][v81[v83[449 - (369 + 77)]]] = v81[v83[1 + 3]];
									v75 = v75 + (739 - (438 + 300));
									v83 = v71[v75];
									v81[v83[296 - (50 + 244)]] = v81[v83[3]] + v83[1205 - (95 + 1106)];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[9 - 7]] = v81[v83[1899 - (1741 + 155)]][v81[v83[11 - 7]]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2]] = v83[5 - 2];
								end
							elseif ((1413 >= 1083) and (v84 <= (64 + 65))) then
								if (v84 <= (59 + 68)) then
									local v344;
									v81[v83[2 + 0]] = v61[v83[7 - 4]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[1779 - (1263 + 514)]] = v81[v83[3]];
									v75 = v75 + (498 - (73 + 424));
									v83 = v71[v75];
									v81[v83[2]] = v83[3];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[310 - (93 + 215)]] = v83[3];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v344 = v83[1937 - (1756 + 179)];
									v81[v344] = v81[v344](v13(v81, v344 + 1, v83[1682 - (550 + 1129)]));
									v75 = v75 + (108 - (57 + 50));
									v83 = v71[v75];
									v81[v83[631 - (30 + 599)]] = v81[v83[3]] * v83[1 + 3];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[920 - (794 + 124)]] = v81[v83[1 + 2]] + v81[v83[1 + 3]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2]] = v83[1930 - (1299 + 628)];
								elseif ((v84 > (281 - 153)) or (2087 >= 2118)) then
									local v1668;
									v81[v83[5 - 3]] = v83[3 + 0];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[1447 - (335 + 1110)]] = v81[v83[3 + 0]][v81[v83[13 - 9]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[4 - 1]][v81[v83[336 - (268 + 64)]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v1668 = v83[2];
									v81[v1668] = v81[v1668]();
									v75 = v75 + (1279 - (243 + 1035));
									v83 = v71[v75];
									v81[v83[4 - 2]][v81[v83[13 - 10]]] = v81[v83[16 - 12]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v83[3 + 0];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 - 0]] = v81[v83[103 - (90 + 10)]] + v81[v83[808 - (209 + 595)]];
									v75 = v75 + (806 - (603 + 202));
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[3];
								else
									local v1683;
									v81[v83[6 - 4]] = v61[v83[2 + 1]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2]] = v61[v83[1 + 2]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[8 - 6]] = v61[v83[282 - (174 + 105)]];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[915 - (532 + 381)]] = v81[v83[3 + 0]] + v81[v83[4]];
									v75 = v75 + (840 - (137 + 702));
									v83 = v71[v75];
									v81[v83[5 - 3]] = v81[v83[1 + 2]] - v83[14 - 10];
									v75 = v75 + 1;
									v83 = v71[v75];
									v1683 = v83[1888 - (1819 + 67)];
									v81[v1683] = v81[v1683](v13(v81, v1683 + 1, v83[2 + 1]));
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[1360 - (259 + 1098)]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v61[v83[1 + 2]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[6 - 4]] = v81[v83[2 + 1]] + v81[v83[4]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v61[v83[14 - 11]] = v81[v83[1708 - (667 + 1039)]];
								end
							elseif ((v84 <= (1150 - (274 + 745))) or (4769 == 2887)) then
								if (v84 > 130) then
									local v1699;
									local v1700;
									local v1701;
									local v1702;
									local v1701, v1703;
									local v1704;
									v81[v83[2 + 0]] = v81[v83[3]][v81[v83[2 + 2]]];
									v75 = v75 + (431 - (288 + 142));
									v83 = v71[v75];
									v81[v83[1308 - (301 + 1005)]] = v61[v83[2 + 1]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[1875 - (674 + 1199)]] = v81[v83[3 + 0]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[5 - 3]] = v81[v83[3]] + v83[4];
									v75 = v75 + (4 - 3);
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[448 - (92 + 353)]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v1704 = v83[2];
									v1701, v1703 = v74(v81[v1704](v13(v81, v1704 + 1, v83[7 - 4])));
									v76 = (v1703 + v1704) - (1 - 0);
									v1702 = 0 - 0;
									for v4123 = v1704, v76 do
										v1702 = v1702 + 1 + 0;
										v81[v4123] = v1701[v1702];
									end
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v1704 = v83[3 - 1];
									v1701, v1703 = v74(v81[v1704](v13(v81, v1704 + (4 - 3), v76)));
									v76 = (v1703 + v1704) - (1 + 0);
									v1702 = 0 - 0;
									for v4126 = v1704, v76 do
										v1702 = v1702 + (266 - (34 + 231));
										v81[v4126] = v1701[v1702];
									end
									v75 = v75 + (1318 - (930 + 387));
									v83 = v71[v75];
									v1704 = v83[2 + 0];
									v1701 = {v81[v1704](v13(v81, v1704 + (2 - 1), v76))};
									v1702 = 697 - (389 + 308);
									for v4129 = v1704, v83[9 - 5] do
										local v4130 = 0;
										while true do
											if (((0 - 0) == v4130) or (4657 <= 4605)) then
												v1702 = v1702 + (2 - 1);
												v81[v4129] = v1701[v1702];
												break;
											end
										end
									end
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[325 - (125 + 197)]];
									v75 = v75 + (998 - (339 + 658));
									v83 = v71[v75];
									v81[v83[4 - 2]] = v81[v83[5 - 2]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3]] + v81[v83[1352 - (743 + 605)]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[11 - 8]] - v83[12 - 8];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[252 - (197 + 52)];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[4 - 2]] = v81[v83[2 + 1]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[2 + 1]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2]] = v83[10 - 7];
									v75 = v75 + 1;
									v83 = v71[v75];
									v1704 = v83[4 - 2];
									v1700 = v81[v1704];
									v1699 = v81[v1704 + 1 + 1];
									if ((v1699 > (0 - 0)) or (1744 >= 4525)) then
										if ((v1700 > v81[v1704 + (1098 - (97 + 1000))]) or (3849 < 2971)) then
											v75 = v83[3];
										else
											v81[v1704 + (10 - 7)] = v1700;
										end
									elseif (v1700 < v81[v1704 + (1846 - (143 + 1702))]) then
										v75 = v83[5 - 2];
									else
										v81[v1704 + 3] = v1700;
									end
								else
									local v1728;
									local v1729, v1730;
									local v1731;
									v81[v83[2]] = v61[v83[372 - (40 + 329)]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[3 - 0]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[67 - (9 + 56)]] = v81[v83[587 - (531 + 53)]] + v83[4 + 0];
									v75 = v75 + (774 - (89 + 684));
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[1 + 2]][v83[2 + 2]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v1731 = v83[2];
									v1729, v1730 = v74(v81[v1731](v13(v81, v1731 + (1 - 0), v83[3])));
									v76 = (v1730 + v1731) - 1;
									v1728 = 0;
									for v4131 = v1731, v76 do
										local v4132 = 0 + 0;
										while true do
											if (v4132 == (0 + 0)) then
												v1728 = v1728 + 1;
												v81[v4131] = v1729[v1728];
												break;
											end
										end
									end
									v75 = v75 + (614 - (238 + 375));
									v83 = v71[v75];
									v1731 = v83[2 + 0];
									do
										return v81[v1731](v13(v81, v1731 + (1 - 0), v76));
									end
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v1731 = v83[5 - 3];
									do
										return v13(v81, v1731, v76);
									end
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[5 - 3]] = v83[6 - 3];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v75 = v83[3 - 0];
								end
							elseif (v84 == 132) then
								v81[v83[2]] = v81[v83[3]] - v83[4];
							else
								v81[v83[2 + 0]] = v81[v83[1 + 2]][v81[v83[2 + 2]]];
								v75 = v75 + (463 - (428 + 34));
								v83 = v71[v75];
								v81[v83[1 + 1]] = v83[4 - 1];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[4 - 2]] = v81[v83[6 - 3]][v81[v83[922 - (223 + 695)]]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[6 - 4]] = v81[v83[514 - (329 + 182)]][v81[v83[1 + 3]]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[1 + 1]] = v83[1 + 2];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2 + 0]] = v81[v83[6 - 3]][v81[v83[4 - 0]]];
								v75 = v75 + (1201 - (177 + 1023));
								v83 = v71[v75];
								v81[v83[3 - 1]] = v81[v83[1 + 2]][v81[v83[4]]];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[2]][v81[v83[3]]] = v81[v83[1469 - (120 + 1345)]];
								v75 = v75 + (338 - (8 + 329));
								v83 = v71[v75];
								v81[v83[127 - (19 + 106)]] = v83[3];
								v75 = v75 + (3 - 2);
								v83 = v71[v75];
								v81[v83[2 - 0]] = v81[v83[3]] + v81[v83[4 + 0]];
							end
						elseif (v84 <= (429 - 283)) then
							if (v84 <= (360 - 221)) then
								if (v84 <= (522 - 386)) then
									if (v84 <= (282 - 148)) then
										v81[v83[1 + 1]] = v81[v83[1506 - (957 + 546)]][v81[v83[16 - 12]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v83[1 + 2];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[706 - (227 + 476)]][v81[v83[4]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[3 - 1]] = v81[v83[4 - 1]][v81[v83[5 - 1]]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[2]] = v83[3 - 0];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[956 - (166 + 788)]] = v81[v83[989 - (21 + 965)]][v81[v83[700 - (127 + 569)]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[2 + 1]] + v81[v83[5 - 1]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]][v81[v83[7 - 4]]] = v81[v83[2 + 2]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1294 - (1162 + 130)]] = v83[5 - 2];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v75 = v83[3];
									elseif ((v84 == (302 - 167)) or (4027 < 427)) then
										local v1765 = 0;
										while true do
											if (((939 - (889 + 47)) == v1765) or (4326 > 4624)) then
												v81[v83[2 + 0]] = v83[3];
												break;
											end
											if (((1266 - (1153 + 111)) == v1765) or (4974 == 3938)) then
												v83 = v71[v75];
												v81[v83[2]] = {};
												v75 = v75 + 1;
												v83 = v71[v75];
												v1765 = 3 - 0;
											end
											if ((v1765 == (1 + 0)) or (1116 >= 3762)) then
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[1 + 1]] = {};
												v75 = v75 + 1 + 0;
												v1765 = 2;
											end
											if (v1765 == (0 + 0)) then
												v81[v83[3 - 1]] = v81[v83[3 + 0]];
												v75 = v75 + (97 - (23 + 73));
												v83 = v71[v75];
												v81[v83[2]] = v61[v83[288 - (26 + 259)]];
												v1765 = 1 + 0;
											end
										end
									else
										v81[v83[2 - 0]] = v81[v83[3]][v81[v83[4]]];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[1631 - (1094 + 535)]] = v83[3];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[1879 - (1554 + 322)]][v81[v83[1429 - (989 + 436)]]];
										v75 = v75 + (1179 - (816 + 362));
										v83 = v71[v75];
										v81[v83[3 - 1]] = v81[v83[7 - 4]][v81[v83[14 - 10]]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[4 - 2]][v81[v83[13 - 10]]] = v81[v83[1 + 3]];
										v75 = v75 + (764 - (86 + 677));
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[1 + 2];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[1029 - (263 + 763)]] + v81[v83[2 + 2]];
										v75 = v75 + (859 - (649 + 209));
										v83 = v71[v75];
										v81[v83[8 - 6]] = v81[v83[734 - (643 + 88)]][v81[v83[4]]];
										v75 = v75 + (1770 - (54 + 1715));
										v83 = v71[v75];
										v81[v83[7 - 5]] = v83[3];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[3 - 1]] = v81[v83[3 + 0]][v81[v83[1 + 3]]];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[1385 - (132 + 1251)]] = v61[v83[3 + 0]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2]] = v83[3 + 0];
										v75 = v75 + (459 - (185 + 273));
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[1 + 2]][v81[v83[4]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[5 - 3]] = v81[v83[2 + 1]][v81[v83[1228 - (361 + 863)]]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[1329 - (443 + 884)]][v81[v83[7 - 4]]] = v81[v83[1 + 3]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 - 0]] = v83[3 + 0];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[6 - 3]] + v81[v83[751 - (16 + 731)]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[3 + 0]][v81[v83[764 - (527 + 233)]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[6 - 3];
									end
								elseif ((v84 <= 137) or (4732 == 1094)) then
									local v374 = 0 + 0;
									while true do
										if (v374 == (1788 - (1107 + 678))) then
											v81[v83[2 + 0]] = v81[v83[3]][v81[v83[4 + 0]]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v374 = 54 - (4 + 46);
										end
										if (v374 == 0) then
											v81[v83[2]] = v81[v83[11 - 8]][v81[v83[6 - 2]]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v374 = 1 - 0;
										end
										if ((2 - 0) == v374) then
											v81[v83[1398 - (1262 + 134)]] = v83[3];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v374 = 1 + 2;
										end
										if ((v374 == (1 + 0)) or (2691 < 2454)) then
											v81[v83[797 - (383 + 412)]] = v81[v83[3 + 0]][v81[v83[4]]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v374 = 1 + 1;
										end
										if (v374 == (2 + 2)) then
											v81[v83[2 + 0]] = v83[3 - 0];
											break;
										end
									end
								elseif ((4578 == 4578) and (v84 == (119 + 19))) then
									v81[v83[5 - 3]] = v83[3 - 0];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[3]][v81[v83[711 - (667 + 40)]]];
									v75 = v75 + (1311 - (436 + 874));
									v83 = v71[v75];
									v81[v83[2]] = v83[3];
									v75 = v75 + (1607 - (762 + 844));
									v83 = v71[v75];
									v81[v83[2 - 0]] = v81[v83[6 - 3]][v81[v83[1 + 3]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[3];
									v75 = v75 + (477 - (209 + 267));
									v83 = v71[v75];
									v81[v83[3 - 1]] = v81[v83[8 - 5]][v81[v83[1715 - (1611 + 100)]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[787 - (14 + 770)]][v81[v83[1788 - (1165 + 619)]]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[383 - (229 + 152)]] = v81[v83[197 - (107 + 87)]] ^ v81[v83[6 - 2]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]][v81[v83[3]]] = v81[v83[4 + 0]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[9 - 7]] = v83[3];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v75 = v83[3 + 0];
								else
									local v1809 = 14 - (13 + 1);
									while true do
										if (v1809 == (4 + 0)) then
											v75 = v83[2 + 1];
											break;
										end
										if ((v1809 == 1) or (4835 < 265)) then
											v81[v83[2]] = v81[v83[1061 - (987 + 71)]][v81[v83[4]]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1809 = 5 - 3;
										end
										if (v1809 == 0) then
											v81[v83[2 - 0]] = v81[v83[702 - (514 + 185)]] + v81[v83[4]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1809 = 1;
										end
										if ((3 - 1) == v1809) then
											v81[v83[7 - 5]] = v83[3];
											v75 = v75 + (1505 - (771 + 733));
											v83 = v71[v75];
											v1809 = 5 - 2;
										end
										if (v1809 == (6 - 3)) then
											v81[v83[1169 - (407 + 760)]] = v81[v83[2 + 1]][v81[v83[1 + 3]]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1809 = 4;
										end
									end
								end
							elseif ((1088 == 1088) and (v84 <= (1996 - (169 + 1685)))) then
								if ((v84 <= (26 + 114)) or (200 >= 3460)) then
									local v375 = 391 - (41 + 350);
									while true do
										if ((4080 == 4080) and (v375 == 2)) then
											v81[v83[5 - 3]] = v81[v83[7 - 4]][v81[v83[4]]];
											v75 = v75 + (4 - 3);
											v83 = v71[v75];
											v375 = 6 - 3;
										end
										if (v375 == (1 + 0)) then
											v81[v83[889 - (790 + 97)]] = v81[v83[13 - 10]] + v83[2 + 2];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v375 = 247 - (235 + 10);
										end
										if ((4610 > 1856) and (v375 == (3 + 1))) then
											v75 = v83[3];
											break;
										end
										if (v375 == 0) then
											v81[v83[3 - 1]] = v81[v83[1186 - (887 + 296)]] + v83[1049 - (512 + 533)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v375 = 1425 - (662 + 762);
										end
										if (v375 == (680 - (334 + 343))) then
											v81[v83[6 - 4]] = v81[v83[3]][v83[4]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v375 = 4;
										end
									end
								elseif (v84 > (630 - (198 + 291))) then
									v81[v83[1 + 1]] = v81[v83[577 - (141 + 433)]][v81[v83[18 - 14]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v83[3];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[779 - (227 + 550)]] = v81[v83[3]][v81[v83[4]]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[5 - 3]] = v81[v83[106 - (72 + 31)]][v81[v83[352 - (89 + 259)]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]] = #v81[v83[1 + 2]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2 + 0]][v81[v83[5 - 2]]] = v81[v83[4]];
									v75 = v75 + (1404 - (1333 + 70));
									v83 = v71[v75];
									v81[v83[1834 - (701 + 1131)]] = v83[130 - (55 + 72)];
									v75 = v75 + (157 - (99 + 57));
									v83 = v71[v75];
									v81[v83[2 - 0]] = v81[v83[2 + 1]] + v81[v83[1583 - (1243 + 336)]];
									v75 = v75 + (1330 - (774 + 555));
									v83 = v71[v75];
									v81[v83[2]] = v83[2 + 1];
								elseif ((v83[801 - (150 + 649)] == v81[v83[4]]) or (1278 < 426)) then
									v75 = v75 + 1 + 0;
								else
									v75 = v83[3];
								end
							elseif (v84 <= (218 - 74)) then
								if (v84 == (276 - 133)) then
									local v1826 = 1984 - (1122 + 862);
									local v1827;
									local v1828;
									local v1829;
									local v1830;
									while true do
										if ((v1826 == (3 - 1)) or (2091 < 1573)) then
											v81[v83[1 + 1]] = v81[v83[5 - 2]][v81[v83[3 + 1]]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[745 - (549 + 194)]] = v61[v83[2 + 1]];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v1826 = 3;
										end
										if ((218 <= 4212) and (3 == v1826)) then
											v81[v83[1 + 1]] = v81[v83[3 - 0]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[7 - 5]] = v81[v83[3]] + v83[1707 - (453 + 1250)];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v1826 = 4 + 0;
										end
										if (v1826 == 13) then
											v75 = v75 + (576 - (203 + 372));
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[8 - 5]][v83[4]];
											v75 = v75 + (1383 - (978 + 404));
											v83 = v71[v75];
											v81[v83[6 - 4]][v81[v83[3 + 0]]] = v81[v83[322 - (56 + 262)]];
											v1826 = 6 + 8;
										end
										if (v1826 == (125 - (108 + 6))) then
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]][v81[v83[1955 - (653 + 1299)]]] = v81[v83[4 + 0]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[4 - 2]] = v81[v83[1925 - (1042 + 880)]] + v83[1 + 3];
											v1826 = 12;
										end
										if (0 == v1826) then
											v1827 = nil;
											v1828, v1829 = nil;
											v1830 = nil;
											v81[v83[1004 - (16 + 986)]] = v81[v83[3]] + v83[1222 - (700 + 518)];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v1826 = 1 - 0;
										end
										if ((14 == v1826) or (3602 < 3141)) then
											v75 = v75 + (1512 - (617 + 894));
											v83 = v71[v75];
											v75 = v83[5 - 2];
											break;
										end
										if ((v1826 == (463 - (271 + 187))) or (4227 <= 2634)) then
											v1830 = v83[1586 - (731 + 853)];
											v1828, v1829 = v74(v81[v1830](v13(v81, v1830 + 1, v83[10 - 7])));
											v76 = (v1829 + v1830) - (1522 - (199 + 1322));
											v1827 = 0 - 0;
											for v6940 = v1830, v76 do
												v1827 = v1827 + 1 + 0;
												v81[v6940] = v1828[v1827];
											end
											v75 = v75 + (1661 - (1291 + 369));
											v1826 = 1 + 5;
										end
										if (v1826 == 9) then
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[3]][v83[4]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[1 + 2]][v81[v83[689 - (561 + 124)]]];
											v1826 = 10 + 0;
										end
										if (v1826 == (861 - (25 + 828))) then
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[3 - 1]] = v81[v83[593 - (99 + 491)]][v83[52 - (18 + 30)]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[4 - 2]] = v81[v83[5 - 2]][v81[v83[5 - 1]]];
											v1826 = 3 + 6;
										end
										if (v1826 == (13 - 9)) then
											v81[v83[734 - (501 + 231)]] = v81[v83[3 + 0]] + v83[4];
											v75 = v75 + (1699 - (470 + 1228));
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[3]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1826 = 691 - (537 + 149);
										end
										if (12 == v1826) then
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[5 - 2]][v81[v83[12 - 8]]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[2 + 1]][v83[3 + 1]];
											v1826 = 6 + 7;
										end
										if (v1826 == (1 + 0)) then
											v81[v83[1 + 1]] = v81[v83[3 + 0]][v81[v83[6 - 2]]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[581 - (134 + 445)]] = v81[v83[5 - 2]][v83[4]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1826 = 2 + 0;
										end
										if ((v1826 == (38 - 28)) or (4519 <= 4409)) then
											v75 = v75 + (261 - (36 + 224));
											v83 = v71[v75];
											v81[v83[1862 - (1033 + 827)]] = v81[v83[1849 - (1002 + 844)]][v83[4]];
											v75 = v75 + (1351 - (1126 + 224));
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[3 + 0]][v81[v83[13 - 9]]];
											v1826 = 11;
										end
										if (v1826 == (70 - (48 + 16))) then
											v83 = v71[v75];
											v1830 = v83[2 + 0];
											v81[v1830] = v81[v1830](v13(v81, v1830 + (4 - 3), v76));
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[1 + 1]][v81[v83[1092 - (910 + 179)]]] = v81[v83[7 - 3]];
											v1826 = 7;
										end
										if (v1826 == (15 - 8)) then
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1381 - (933 + 446)]] = v81[v83[2 + 1]] + v83[4];
											v75 = v75 + (1525 - (248 + 1276));
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[2 + 1]][v81[v83[4]]];
											v1826 = 27 - 19;
										end
									end
								else
									local v1831 = v83[6 - 4];
									local v1832 = {};
									for v4158 = 1, #v80 do
										local v4159 = v80[v4158];
										for v4464 = 0, #v4159 do
											local v4465 = 1545 - (151 + 1394);
											local v4466;
											local v4467;
											local v4468;
											while true do
												if ((4514 >= 1479) and ((944 - (929 + 15)) == v4465)) then
													v4466 = v4159[v4464];
													v4467 = v4466[1997 - (1173 + 823)];
													v4465 = 1 - 0;
												end
												if (((1777 - (482 + 1294)) == v4465) or (3414 <= 210)) then
													v4468 = v4466[3 - 1];
													if (((v4467 == v81) and (v4468 >= v1831)) or (349 <= 242)) then
														v1832[v4468] = v4467[v4468];
														v4466[1 + 0] = v1832;
													end
													break;
												end
											end
										end
									end
								end
							elseif (v84 > (1451 - (1125 + 181))) then
								v81[v83[2]] = v81[v83[8 - 5]] + v81[v83[3 + 1]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[1191 - (626 + 563)]] = v81[v83[1253 - (153 + 1097)]][v81[v83[4]]];
								v75 = v75 + (3 - 2);
								v83 = v71[v75];
								v81[v83[1 + 1]] = v83[7 - 4];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[2 + 1]][v81[v83[4 + 0]]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2]] = v83[3];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2 + 0]] = v81[v83[3 + 0]][v81[v83[4]]];
								v75 = v75 + (1158 - (199 + 958));
								v83 = v71[v75];
								v81[v83[2 + 0]] = v81[v83[7 - 4]][v81[v83[8 - 4]]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2]] = v83[3];
								v75 = v75 + (1177 - (1169 + 7));
								v83 = v71[v75];
								v81[v83[1875 - (751 + 1122)]] = v81[v83[1 + 2]][v81[v83[4 + 0]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[3]] - v81[v83[6 - 2]];
								v75 = v75 + (1182 - (589 + 592));
								v83 = v71[v75];
								v81[v83[3 - 1]][v81[v83[1 + 2]]] = v81[v83[28 - (13 + 11)]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v83[1263 - (684 + 576)];
							else
								v81[v83[1 + 1]] = v81[v83[7 - 4]] + v83[4];
							end
						elseif (v84 <= 153) then
							if (v84 <= (74 + 75)) then
								if (v84 <= 147) then
									v81[v83[1 + 1]] = v81[v83[3 - 0]] ^ v81[v83[4 + 0]];
								elseif (v84 == (132 + 16)) then
									v81[v83[2 + 0]] = v81[v83[1 + 2]][v81[v83[2 + 2]]];
									v75 = v75 + (1849 - (230 + 1618));
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[1 + 2]][v83[4]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3]][v83[207 - (131 + 72)]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[206 - (144 + 60)]] = v81[v83[3]][v81[v83[16 - 12]]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[1 + 2]][v83[19 - 15]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[1925 - (523 + 1399)]][v81[v83[4 + 0]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[406 - (72 + 332)]] = v81[v83[3]] + v81[v83[980 - (269 + 707)]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[4 - 2]][v81[v83[133 - (123 + 7)]]] = v81[v83[4]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[13 - 10]] + v83[9 - 5];
									v75 = v75 + (1089 - (38 + 1050));
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[2 + 1];
									v75 = v75 + 1;
									v83 = v71[v75];
									v75 = v83[2 + 1];
								else
									v81[v83[2]] = v81[v83[826 - (426 + 397)]][v83[1410 - (751 + 655)]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[3 - 1]] = v81[v83[1 + 2]][v81[v83[1249 - (39 + 1206)]]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[843 - (566 + 275)]] = #v81[v83[938 - (167 + 768)]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]][v81[v83[3]]] = v81[v83[5 - 1]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[3 - 0]] + v83[19 - (8 + 7)];
									v75 = v75 + (1684 - (1510 + 173));
									v83 = v71[v75];
									v81[v83[2 - 0]] = v81[v83[1 + 2]] + v83[4];
									v75 = v75 + (254 - (30 + 223));
									v83 = v71[v75];
									v81[v83[1258 - (300 + 956)]] = v83[3];
								end
							elseif (v84 <= (273 - (22 + 100))) then
								if (v84 > (330 - 180)) then
									local v1877;
									local v1878;
									local v1879;
									local v1880;
									local v1879, v1881;
									local v1882;
									v81[v83[2]] = v83[285 - (47 + 235)];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[489 - (21 + 465)]][v81[v83[3 + 1]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v61[v83[3 - 0]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1219 - (553 + 664)]] = v83[2 + 1];
									v75 = v75 + (79 - (73 + 5));
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[1718 - (1128 + 587)]][v81[v83[15 - 11]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[692 - (558 + 132)]] = v81[v83[7 - 4]][v81[v83[4]]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[1 + 1]][v81[v83[3]]] = v81[v83[4 + 0]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[3 + 0];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[2 + 1]] + v81[v83[4]];
									v75 = v75 + (772 - (294 + 477));
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3]][v81[v83[2 + 2]]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2]] = v83[5 - 2];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[3]][v81[v83[8 - 4]]];
									v75 = v75 + (983 - (97 + 885));
									v83 = v71[v75];
									v81[v83[2]] = v83[2 + 1];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[367 - (271 + 94)]] = v81[v83[1606 - (777 + 826)]][v81[v83[2 + 2]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1357 - (117 + 1238)]] = v81[v83[1718 - (686 + 1029)]][v81[v83[4]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1358 - (1074 + 282)]][v81[v83[1620 - (1359 + 258)]]] = v81[v83[8 - 4]];
									v75 = v75 + (1936 - (1730 + 205));
									v83 = v71[v75];
									v81[v83[530 - (67 + 461)]] = v83[4 - 1];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 - 0]] = v81[v83[6 - 3]] + v81[v83[4]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[631 - (129 + 500)]] = v81[v83[1714 - (1157 + 554)]][v81[v83[5 - 1]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v83[610 - (82 + 525)];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[4 - 2]] = v81[v83[1626 - (948 + 675)]][v81[v83[2 + 2]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[5 - 3]] = v83[3];
									v75 = v75 + (854 - (406 + 447));
									v83 = v71[v75];
									v81[v83[119 - (91 + 26)]] = v81[v83[10 - 7]][v81[v83[4 + 0]]];
									v75 = v75 + (987 - (968 + 18));
									v83 = v71[v75];
									v81[v83[2]][v81[v83[3 + 0]]] = v81[v83[4 + 0]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[269 - (172 + 95)]] = v83[9 - 6];
									v75 = v75 + (266 - (260 + 5));
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3]] + v81[v83[10 - 6]];
									v75 = v75 + (820 - (265 + 554));
									v83 = v71[v75];
									v81[v83[1573 - (1440 + 131)]] = v81[v83[8 - 5]][v81[v83[4]]];
									v75 = v75 + (1396 - (253 + 1142));
									v83 = v71[v75];
									v81[v83[255 - (133 + 120)]] = v83[3];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[1958 - (809 + 1147)]] = v81[v83[500 - (178 + 319)]][v81[v83[7 - 3]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v83[1273 - (1255 + 15)];
									v75 = v75 + (1543 - (1221 + 321));
									v83 = v71[v75];
									v81[v83[5 - 3]] = v81[v83[3 + 0]][v81[v83[14 - 10]]];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[1 + 1]][v81[v83[3]]] = v81[v83[4 + 0]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v83[6 - 3];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[409 - (204 + 203)]] = v81[v83[81 - (48 + 30)]] + v81[v83[2 + 2]];
									v75 = v75 + (1965 - (1472 + 492));
									v83 = v71[v75];
									v81[v83[2]] = v83[8 - 5];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[613 - (258 + 353)]] = v81[v83[1997 - (1382 + 612)]] + v81[v83[4 + 0]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3]][v81[v83[1 + 3]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v83[8 - 5];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[121 - (35 + 84)]] = v81[v83[218 - (75 + 140)]][v81[v83[14 - 10]]];
									v75 = v75 + (1800 - (923 + 876));
									v83 = v71[v75];
									v81[v83[5 - 3]] = v81[v83[3]];
									v75 = v75 + (813 - (284 + 528));
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[1022 - (867 + 152)]][v81[v83[1110 - (709 + 397)]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v61[v83[10 - 7]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[38 - (21 + 15)]] = v81[v83[4 - 1]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[8 - 5];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[4 - 2]] = v81[v83[3]] + v81[v83[2 + 2]];
									v75 = v75 + (136 - (97 + 38));
									v83 = v71[v75];
									v81[v83[82 - (52 + 28)]] = v83[3];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[852 - (59 + 790)]] + v81[v83[4]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[943 - (467 + 473)];
									v75 = v75 + (4 - 3);
									v83 = v71[v75];
									v81[v83[5 - 3]] = v81[v83[7 - 4]][v81[v83[9 - 5]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v1882 = v83[2];
									v1879, v1881 = v74(v81[v1882](v13(v81, v1882 + (2 - 1), v83[11 - 8])));
									v76 = (v1881 + v1882) - (1 - 0);
									v1880 = 0 + 0;
									for v4160 = v1882, v76 do
										local v4161 = 0 + 0;
										while true do
											if (v4161 == (0 + 0)) then
												v1880 = v1880 + (238 - (58 + 179));
												v81[v4160] = v1879[v1880];
												break;
											end
										end
									end
									v75 = v75 + 1;
									v83 = v71[v75];
									v1882 = v83[2];
									v1879, v1881 = v74(v81[v1882](v13(v81, v1882 + (2 - 1), v76)));
									v76 = (v1881 + v1882) - (1254 - (677 + 576));
									v1880 = 0 + 0;
									for v4162 = v1882, v76 do
										local v4163 = 0;
										while true do
											if ((0 - 0) == v4163) then
												v1880 = v1880 + (221 - (88 + 132));
												v81[v4162] = v1879[v1880];
												break;
											end
										end
									end
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v1882 = v83[9 - 7];
									v1879 = {v81[v1882](v13(v81, v1882 + (292 - (12 + 279)), v76))};
									v1880 = 0;
									for v4164 = v1882, v83[6 - 2] do
										v1880 = v1880 + 1;
										v81[v4164] = v1879[v1880];
									end
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[949 - (652 + 295)]] = v81[v83[1 + 2]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[992 - (848 + 141)]];
									v75 = v75 + (741 - (372 + 368));
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[1133 - (542 + 588)]] + v81[v83[4]];
									v75 = v75 + (819 - (6 + 812));
									v83 = v71[v75];
									v81[v83[1707 - (1599 + 106)]] = v83[3];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[2 + 1]] - v81[v83[4]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[11 - 8];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[1 + 2]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[1 + 2]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v83[1 + 2];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v1882 = v83[1 + 1];
									v1878 = v81[v1882];
									v1877 = v81[v1882 + (1931 - (1690 + 239))];
									if (v1877 > (0 - 0)) then
										if ((2209 >= 1935) and (v1878 > v81[v1882 + 1 + 0])) then
											v75 = v83[6 - 3];
										else
											v81[v1882 + (7 - 4)] = v1878;
										end
									elseif (v1878 < v81[v1882 + 1]) then
										v75 = v83[3];
									else
										v81[v1882 + 3 + 0] = v1878;
									end
								else
									v81[v83[7 - 5]] = v81[v83[1871 - (1736 + 132)]][v81[v83[3 + 1]]];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[2]] = v83[13 - 10];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[35 - (27 + 5)]][v81[v83[1 + 3]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[2 + 1]][v81[v83[2 + 2]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v83[1120 - (771 + 346)];
									v75 = v75 + (1635 - (1577 + 57));
									v83 = v71[v75];
									v81[v83[2 - 0]] = v81[v83[1083 - (684 + 396)]][v81[v83[11 - 7]]];
									v75 = v75 + (1197 - (700 + 496));
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[255 - (65 + 187)]] + v81[v83[943 - (827 + 112)]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[4 - 2]][v81[v83[7 - 4]]] = v81[v83[19 - 15]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v83[1 + 2];
									v75 = v75 + (1197 - (551 + 645));
									v83 = v71[v75];
									v81[v83[345 - (166 + 177)]] = v81[v83[1859 - (1361 + 495)]] + v81[v83[10 - 6]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v83[6 - 3];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[226 - (148 + 76)]] = v81[v83[10 - 7]] + v81[v83[4]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[1745 - (735 + 1007)];
								end
							elseif ((v84 == 152) or (1369 == 4914)) then
								local v1974 = 0;
								while true do
									if ((v1974 == (282 - (111 + 168))) or (3459 >= 4887)) then
										v81[v83[2 + 0]][v81[v83[1 + 2]]] = v81[v83[7 - 3]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v75 = v83[3 + 0];
										break;
									end
									if ((v1974 == (1 + 0)) or (2964 <= 78)) then
										v75 = v75 + (4 - 3);
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[935 - (147 + 785)]] + v81[v83[670 - (483 + 183)]];
										v75 = v75 + (2 - 1);
										v1974 = 2;
									end
									if (v1974 == 2) then
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[1914 - (1790 + 121)]][v81[v83[12 - 8]]];
										v75 = v75 + (1540 - (259 + 1280));
										v83 = v71[v75];
										v1974 = 3;
									end
									if (v1974 == (1584 - (160 + 1424))) then
										v81[v83[2 + 0]] = v81[v83[1 + 2]] + v81[v83[774 - (479 + 291)]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[2]] = v83[3];
										v1974 = 972 - (569 + 402);
									end
								end
							else
								local v1975 = 1305 - (635 + 670);
								while true do
									if (v1975 == (4 - 2)) then
										v83 = v71[v75];
										v81[v83[7 - 5]] = v81[v83[601 - (42 + 556)]][v81[v83[4]]];
										v75 = v75 + (1402 - (1246 + 155));
										v83 = v71[v75];
										v1975 = 735 - (31 + 701);
									end
									if ((13 - 9) == v1975) then
										v75 = v75 + (500 - (393 + 106));
										v83 = v71[v75];
										v81[v83[1173 - (727 + 444)]] = v81[v83[8 - 5]][v81[v83[2 + 2]]];
										v75 = v75 + 1;
										v1975 = 658 - (269 + 384);
									end
									if (v1975 == (1570 - (598 + 971))) then
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[6 - 4]] = v81[v83[14 - 11]][v81[v83[4]]];
										v75 = v75 + (2 - 1);
										v1975 = 2;
									end
									if (v1975 == (1445 - (800 + 645))) then
										v81[v83[2]] = v81[v83[1 + 2]][v81[v83[4]]];
										v75 = v75 + (791 - (687 + 103));
										v83 = v71[v75];
										v81[v83[1164 - (142 + 1020)]] = v83[6 - 3];
										v1975 = 1 + 0;
									end
									if ((v1975 == 3) or (730 == 3621)) then
										v81[v83[515 - (306 + 207)]] = v83[3];
										v75 = v75 + (1405 - (112 + 1292));
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[3 + 0]][v81[v83[4]]];
										v1975 = 956 - (587 + 365);
									end
									if ((301 < 4219) and (v1975 == 5)) then
										v83 = v71[v75];
										v81[v83[1717 - (829 + 886)]] = v81[v83[3]] - v81[v83[9 - 5]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v1975 = 23 - 17;
									end
									if (v1975 == (19 - 13)) then
										v81[v83[2 + 0]][v81[v83[2 + 1]]] = v81[v83[6 - 2]];
										v75 = v75 + (978 - (613 + 364));
										v83 = v71[v75];
										v75 = v83[3 + 0];
										break;
									end
								end
							end
						elseif (v84 <= (70 + 86)) then
							if (v84 <= (35 + 119)) then
								v81[v83[4 - 2]] = v81[v83[10 - 7]][v81[v83[12 - 8]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[1941 - (1467 + 472)]] = v83[3 - 0];
								v75 = v75 + (1548 - (1077 + 470));
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[1 + 2]][v81[v83[4]]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1 + 1]][v81[v83[13 - 10]]] = v81[v83[4]];
								v75 = v75 + (430 - (12 + 417));
								v83 = v71[v75];
								v81[v83[4 - 2]] = v83[3];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2 - 0]] = v81[v83[3]] + v81[v83[7 - 3]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[1 + 1]] = v83[3];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[3]] + v81[v83[1 + 3]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[5 - 3]] = v83[1108 - (924 + 181)];
								v75 = v75 + (798 - (263 + 534));
								v83 = v71[v75];
								v75 = v83[1 + 2];
							elseif (v84 == (147 + 8)) then
								local v1976;
								local v1977;
								local v1976, v1978;
								local v1979;
								v81[v83[3 - 1]] = v81[v83[8 - 5]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[709 - (562 + 145)]] = v81[v83[1 + 2]][v81[v83[2 + 2]]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v61[v83[1 + 2]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[3 - 1]] = v81[v83[3]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[9 - 7]] = v81[v83[3]] + v83[2 + 2];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[2 + 1]];
								v75 = v75 + (1877 - (1459 + 417));
								v83 = v71[v75];
								v1979 = v83[2];
								v1976, v1978 = v74(v81[v1979](v13(v81, v1979 + 1, v83[289 - (194 + 92)])));
								v76 = (v1978 + v1979) - (1386 - (1057 + 328));
								v1977 = 0 - 0;
								for v4167 = v1979, v76 do
									local v4168 = 0 - 0;
									while true do
										if (v4168 == 0) then
											v1977 = v1977 + (533 - (5 + 527));
											v81[v4167] = v1976[v1977];
											break;
										end
									end
								end
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v1979 = v83[782 - (342 + 438)];
								v1976, v1978 = v74(v81[v1979](v13(v81, v1979 + 1, v76)));
								v76 = (v1978 + v1979) - (1 + 0);
								v1977 = 0 + 0;
								for v4169 = v1979, v76 do
									v1977 = v1977 + 1;
									v81[v4169] = v1976[v1977];
								end
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v1979 = v83[3 - 1];
								v1976 = {v81[v1979](v13(v81, v1979 + 1 + 0, v76))};
								v1977 = 0 - 0;
								for v4172 = v1979, v83[6 - 2] do
									v1977 = v1977 + (13 - (6 + 6));
									v81[v4172] = v1976[v1977];
								end
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[5 - 3]] = v81[v83[2 + 1]] + v81[v83[1257 - (206 + 1047)]];
							else
								local v1995 = 1112 - (470 + 642);
								while true do
									if (v1995 == (2 + 4)) then
										v81[v83[1069 - (552 + 515)]] = v81[v83[3 + 0]][v81[v83[4]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v1995 = 6 + 1;
									end
									if (v1995 == (5 + 0)) then
										v81[v83[2 + 0]] = v83[2 + 1];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v1995 = 6;
									end
									if (v1995 == (1058 - (701 + 350))) then
										v81[v83[2 + 0]] = v81[v83[3]] - v81[v83[3 + 1]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v1995 = 12 - 4;
									end
									if (v1995 == 3) then
										v81[v83[6 - 4]] = v81[v83[2 + 1]][v81[v83[9 - 5]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v1995 = 4;
									end
									if (v1995 == (4 + 0)) then
										v81[v83[7 - 5]] = v81[v83[1349 - (281 + 1065)]][v81[v83[4]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v1995 = 5;
									end
									if (v1995 == (41 - 32)) then
										v81[v83[2]] = v83[11 - 8];
										break;
									end
									if (v1995 == (1212 - (1114 + 97))) then
										v81[v83[2 - 0]] = v81[v83[1916 - (279 + 1634)]][v81[v83[4]]];
										v75 = v75 + (1281 - (1213 + 67));
										v83 = v71[v75];
										v1995 = 2;
									end
									if ((191 - (65 + 126)) == v1995) then
										v81[v83[2 + 0]] = v83[1088 - (189 + 896)];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v1995 = 1964 - (1872 + 91);
									end
									if ((v1995 == 2) or (1855 > 2408)) then
										v81[v83[4 - 2]] = v83[3 + 0];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v1995 = 3 + 0;
									end
									if ((3635 < 4494) and (v1995 == 8)) then
										v81[v83[1 + 1]][v81[v83[10 - 7]]] = v81[v83[80 - (22 + 54)]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v1995 = 9;
									end
								end
							end
						elseif ((2295 >= 592) and (v84 <= (397 - 239))) then
							if (v84 == (47 + 110)) then
								v81[v83[7 - 5]] = v81[v83[1537 - (553 + 981)]][v83[4 + 0]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2 + 0]] = v81[v83[3 + 0]][v81[v83[11 - 7]]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2 - 0]] = v81[v83[1900 - (1320 + 577)]][v83[4]];
								v75 = v75 + (850 - (667 + 182));
								v83 = v71[v75];
								v81[v83[1290 - (1115 + 173)]] = v81[v83[4 - 1]][v81[v83[4 + 0]]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2]][v81[v83[1758 - (1375 + 380)]]] = v81[v83[2 + 2]];
								v75 = v75 + (27 - (12 + 14));
								v83 = v71[v75];
								v81[v83[4 - 2]] = v81[v83[6 - 3]] + v83[9 - 5];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[2 - 0]] = v83[4 - 1];
							else
								local v2009;
								local v2010;
								local v2011;
								v81[v83[2]] = v81[v83[734 - (354 + 377)]];
								v75 = v75 + (4 - 3);
								v83 = v71[v75];
								v81[v83[2]] = v83[7 - 4];
								v75 = v75 + (1983 - (263 + 1719));
								v83 = v71[v75];
								v81[v83[1 + 1]] = #v81[v83[362 - (335 + 24)]];
								v75 = v75 + (952 - (882 + 69));
								v83 = v71[v75];
								v81[v83[1688 - (657 + 1029)]] = v83[1203 - (685 + 515)];
								v75 = v75 + (1639 - (745 + 893));
								v83 = v71[v75];
								v2011 = v83[2];
								v2010 = v81[v2011];
								v2009 = v81[v2011 + 1 + 1];
								if ((2728 == 2728) and (v2009 > 0)) then
									if (v2010 > v81[v2011 + (773 - (274 + 498))]) then
										v75 = v83[1 + 2];
									else
										v81[v2011 + 2 + 1] = v2010;
									end
								elseif ((v2010 < v81[v2011 + (1607 - (1035 + 571))]) or (1582 <= 1424)) then
									v75 = v83[2 + 1];
								else
									v81[v2011 + 2 + 1] = v2010;
								end
							end
						elseif (v84 > (583 - 424)) then
							v81[v83[5 - 3]] = v81[v83[3 + 0]][v81[v83[3 + 1]]];
							v75 = v75 + (2 - 1);
							v83 = v71[v75];
							v81[v83[226 - (109 + 115)]] = v83[1402 - (1047 + 352)];
							v75 = v75 + (1766 - (852 + 913));
							v83 = v71[v75];
							v81[v83[2 + 0]] = v81[v83[1348 - (384 + 961)]][v81[v83[9 - 5]]];
							v75 = v75 + (2 - 1);
							v83 = v71[v75];
							v81[v83[7 - 5]] = v81[v83[3]][v81[v83[596 - (591 + 1)]]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[2]] = v83[3];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[1472 - (218 + 1252)]] = v81[v83[3 + 0]][v81[v83[360 - (321 + 35)]]];
							v75 = v75 + (395 - (239 + 155));
							v83 = v71[v75];
							v81[v83[2 + 0]] = v81[v83[3]] + v81[v83[46 - (41 + 1)]];
							v75 = v75 + (201 - (80 + 120));
							v83 = v71[v75];
							v81[v83[2]][v81[v83[3 + 0]]] = v81[v83[7 - 3]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[2]] = v83[3 + 0];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[2]] = v81[v83[3]] + v81[v83[19 - 15]];
							v75 = v75 + (2 - 1);
							v83 = v71[v75];
							v81[v83[2]] = v83[12 - 9];
						else
							v81[v83[2 - 0]] = v81[v83[2 + 1]][v83[2 + 2]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[1 + 1]] = v81[v83[1229 - (165 + 1061)]][v81[v83[4 + 0]]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[1645 - (596 + 1047)]] = v81[v83[1 + 2]][v83[4 + 0]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[2 - 0]] = v81[v83[2 + 1]] - v81[v83[4]];
							v75 = v75 + (738 - (185 + 552));
							v83 = v71[v75];
							v81[v83[2 + 0]][v81[v83[3]]] = v81[v83[605 - (507 + 94)]];
							v75 = v75 + (4 - 3);
							v83 = v71[v75];
							v81[v83[1 + 1]] = v81[v83[3]] + v83[6 - 2];
							v75 = v75 + (1738 - (569 + 1168));
							v83 = v71[v75];
							v81[v83[2]] = v81[v83[5 - 2]] + v83[7 - 3];
							v75 = v75 + (352 - (118 + 233));
							v83 = v71[v75];
							v81[v83[346 - (279 + 65)]] = v81[v83[3]] + v83[6 - 2];
							v75 = v75 + (1 - 0);
							v83 = v71[v75];
							v81[v83[3 - 1]] = v81[v83[7 - 4]][v81[v83[1822 - (1414 + 404)]]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[758 - (347 + 409)]] = v81[v83[2 + 1]][v83[4]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[2 + 0]] = v81[v83[1 + 2]][v81[v83[4]]];
							v75 = v75 + (1579 - (420 + 1158));
							v83 = v71[v75];
							do
								return v81[v83[4 - 2]];
							end
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[613 - (406 + 205)]] = v83[10 - 7];
						end
					elseif ((v84 <= (103 + 84)) or (393 >= 2017)) then
						if (v84 <= (135 + 38)) then
							if (v84 <= (414 - 248)) then
								if (v84 <= (224 - (28 + 33))) then
									if (v84 <= (18 + 143)) then
										local v392 = v72[v83[1010 - (858 + 149)]];
										local v393;
										local v394 = {};
										v393 = v10({}, {__index=function(v867, v868)
											local v869 = v394[v868];
											return v869[1 + 0][v869[2]];
										end,__newindex=function(v870, v871, v872)
											local v873 = 0;
											local v874;
											while true do
												if (v873 == (0 - 0)) then
													v874 = v394[v871];
													v874[1508 - (829 + 678)][v874[2 + 0]] = v872;
													break;
												end
											end
										end});
										for v875 = 1217 - (143 + 1073), v83[4] do
											v75 = v75 + (1816 - (898 + 917));
											local v876 = v71[v75];
											if (v876[1 - 0] == (108 + 119)) then
												v394[v875 - 1] = {v81,v876[3 + 0]};
											else
												v394[v875 - (1 + 0)] = {v61,v876[1538 - (1105 + 430)]};
											end
											v80[#v80 + (2 - 1)] = v394;
										end
										v81[v83[6 - 4]] = v29(v392, v393, v62);
									elseif ((v84 == (363 - 201)) or (4350 == 423)) then
										v81[v83[3 - 1]] = v81[v83[3 + 0]][v81[v83[2 + 2]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[1994 - (1047 + 944)];
										v75 = v75 + (1303 - (206 + 1096));
										v83 = v71[v75];
										v81[v83[196 - (30 + 164)]] = v81[v83[13 - 10]][v81[v83[2 + 2]]];
										v75 = v75 + (1475 - (1383 + 91));
										v83 = v71[v75];
										v81[v83[7 - 5]] = v81[v83[5 - 2]][v81[v83[1664 - (1174 + 486)]]];
										v75 = v75 + (428 - (172 + 255));
										v83 = v71[v75];
										v81[v83[6 - 4]] = v83[6 - 3];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1530 - (594 + 934)]] = v81[v83[571 - (211 + 357)]][v81[v83[1 + 3]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[3 + 0]][v81[v83[4]]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[1417 - (159 + 1255)]] - v81[v83[4 + 0]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]][v81[v83[780 - (24 + 753)]]] = v81[v83[4]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2 - 0]] = v83[3];
										v75 = v75 + (1133 - (898 + 234));
										v83 = v71[v75];
										v81[v83[537 - (333 + 202)]] = v81[v83[3]] + v81[v83[2 + 2]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[3];
									else
										v81[v83[2]] = v81[v83[3]][v83[7 - 3]];
										v75 = v75 + (1280 - (1018 + 261));
										v83 = v71[v75];
										v81[v83[4 - 2]] = v61[v83[134 - (93 + 38)]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[2 + 1]][v83[4]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[3 + 0]][v81[v83[8 - 4]]];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[2]][v81[v83[3]]] = v81[v83[11 - 7]];
										v75 = v75 + (4 - 3);
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[6 - 3]] + v83[1 + 3];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 - 0]] = v81[v83[2 + 1]][v81[v83[424 - (14 + 406)]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[3 - 1]] = v83[10 - 7];
									end
								elseif ((3161 >= 2045) and (v84 <= (1794 - (20 + 1610)))) then
									v81[v83[1 + 1]] = v81[v83[8 - 5]][v83[11 - 7]];
									v75 = v75 + (518 - (243 + 274));
									v83 = v71[v75];
									v81[v83[1624 - (1437 + 185)]] = v81[v83[3]][v83[12 - 8]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[7 - 5]] = v81[v83[3 + 0]][v81[v83[1 + 3]]];
									v75 = v75 + (817 - (326 + 490));
									v83 = v71[v75];
									v81[v83[2]][v81[v83[3 + 0]]] = v81[v83[207 - (181 + 22)]];
									v75 = v75 + (76 - (35 + 40));
									v83 = v71[v75];
									v81[v83[7 - 5]] = v81[v83[3 - 0]] + v83[1 + 3];
									v75 = v75 + (879 - (297 + 581));
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3]] + v83[1 + 3];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[6 - 4]] = v83[3];
								elseif ((3332 > 2568) and (v84 == 165)) then
									v81[v83[1 + 1]] = v81[v83[12 - 9]][v81[v83[17 - 13]]];
									v75 = v75 + (1738 - (1505 + 232));
									v83 = v71[v75];
									v81[v83[1320 - (415 + 903)]] = v83[3];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[4 - 1]][v81[v83[4]]];
									v75 = v75 + (718 - (155 + 562));
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[120 - (71 + 46)]][v81[v83[5 - 1]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v83[688 - (436 + 249)];
									v75 = v75 + (1622 - (56 + 1565));
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[2 + 1]][v81[v83[988 - (80 + 904)]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[802 - (595 + 205)]] = v81[v83[6 - 3]][v81[v83[4]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[4 - 2]][v81[v83[3 + 0]]] = v81[v83[4]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v83[9 - 6];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[667 - (400 + 265)]] = v81[v83[5 - 2]] + v81[v83[1 + 3]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[1674 - (962 + 709)]][v81[v83[4]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[3 + 0];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v75 = v83[11 - 8];
								elseif (v81[v83[4 - 2]] < v81[v83[785 - (636 + 145)]]) then
									v75 = v75 + 1;
								else
									v75 = v83[3];
								end
							elseif (v84 <= (464 - (282 + 13))) then
								if (v84 <= (1315 - (366 + 782))) then
									v81[v83[91 - (10 + 79)]] = v81[v83[1710 - (1297 + 410)]][v83[13 - 9]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[281 - (262 + 16)]][v81[v83[4]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[6 - 3]][v83[4]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[1853 - (1056 + 794)]][v81[v83[4]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1350 - (741 + 607)]] = v81[v83[1759 - (730 + 1026)]][v81[v83[1797 - (248 + 1545)]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[994 - (191 + 801)]][v81[v83[14 - 11]]] = v81[v83[564 - (478 + 82)]];
									v75 = v75 + (1708 - (434 + 1273));
									v83 = v71[v75];
									v75 = v83[3];
								elseif ((v84 > (481 - 313)) or (2573 <= 2291)) then
									v81[v83[2]] = v83[3];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[8 - 6]] = v81[v83[576 - (349 + 224)]][v81[v83[4]]];
									v75 = v75 + (865 - (275 + 589));
									v83 = v71[v75];
									v81[v83[2]] = {};
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[3 - 1]][v81[v83[1535 - (1064 + 468)]]] = v81[v83[3 + 1]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[8 - 6]] = v83[706 - (676 + 27)];
								else
									v81[v83[2]] = v81[v83[3]][v83[11 - 7]];
									v75 = v75 + (1428 - (48 + 1379));
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[2 + 1]][v81[v83[6 - 2]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[117 - (79 + 36)]][v81[v83[3]]] = v81[v83[13 - 9]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[1 + 2]] + v83[4 + 0];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[3];
								end
							elseif (v84 <= 171) then
								if (v84 > (77 + 93)) then
									local v2129 = 1014 - (631 + 383);
									local v2130;
									local v2131;
									local v2132;
									local v2133;
									while true do
										if (v2129 == (1635 - (445 + 1190))) then
											v2130 = nil;
											v2131, v2132 = nil;
											v2133 = nil;
											v81[v83[1427 - (810 + 615)]] = v81[v83[3]][v81[v83[1298 - (819 + 475)]]];
											v2129 = 1;
										end
										if ((1667 <= 1727) and (v2129 == (1340 - (243 + 1092)))) then
											v83 = v71[v75];
											v81[v83[5 - 3]] = v83[3];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v2129 = 6;
										end
										if ((3642 >= 2739) and (v2129 == 9)) then
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v2133 = v83[1 + 1];
											do
												return v13(v81, v2133, v76);
											end
											v2129 = 10 + 0;
										end
										if ((v2129 == (11 - 4)) or (4686 == 3242)) then
											v2131, v2132 = v74(v81[v2133](v13(v81, v2133 + (2 - 1), v83[527 - (119 + 405)])));
											v76 = (v2132 + v2133) - 1;
											v2130 = 0 - 0;
											for v6957 = v2133, v76 do
												v2130 = v2130 + (3 - 2);
												v81[v6957] = v2131[v2130];
											end
											v2129 = 8;
										end
										if ((v2129 == (613 - (352 + 257))) or (1872 > 4054)) then
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[1166 - (88 + 1075)]] + v81[v83[1075 - (477 + 594)]];
											v75 = v75 + (724 - (328 + 395));
											v2129 = 509 - (164 + 340);
										end
										if (v2129 == 1) then
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[3]][v81[v83[9 - 5]]];
											v75 = v75 + (1230 - (1008 + 221));
											v2129 = 1513 - (1025 + 486);
										end
										if (v2129 == (17 - 9)) then
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v2133 = v83[221 - (108 + 111)];
											do
												return v81[v2133](v13(v81, v2133 + (99 - (82 + 16)), v76));
											end
											v2129 = 1738 - (533 + 1196);
										end
										if (v2129 == (16 - 5)) then
											v83 = v71[v75];
											v75 = v83[3];
											break;
										end
										if (v2129 == (222 - (161 + 51))) then
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[437 - (294 + 140)];
											v75 = v75 + 1;
											v2129 = 45 - 34;
										end
										if ((v2129 == (841 - (717 + 121))) or (1292 >= 4566)) then
											v81[v83[2]] = v81[v83[4 - 1]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[3];
											v2129 = 1714 - (1001 + 709);
										end
										if (v2129 == 6) then
											v81[v83[2 + 0]] = v81[v83[1123 - (242 + 878)]][v81[v83[4]]];
											v75 = v75 + (1784 - (1395 + 388));
											v83 = v71[v75];
											v2133 = v83[1 + 1];
											v2129 = 6 + 1;
										end
										if ((3766 <= 4403) and (v2129 == 2)) then
											v83 = v71[v75];
											v81[v83[2]] = v61[v83[3 + 0]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v2129 = 1950 - (1289 + 658);
										end
									end
								else
									v81[v83[2]] = v81[v83[2 + 1]][v83[6 - 2]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v61[v83[3]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[1978 - (337 + 1639)]] = v81[v83[3 + 0]][v83[4]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[5 - 3]] = v81[v83[6 - 3]][v81[v83[1741 - (630 + 1107)]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1 + 1]][v81[v83[3 - 0]]] = v81[v83[2 + 2]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[64 - (13 + 48)]] + v83[703 - (658 + 41)];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[1909 - (1591 + 316)]] = v81[v83[5 - 2]] + v83[1 + 3];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[9 - 6]][v81[v83[1280 - (1241 + 35)]]];
									v75 = v75 + (41 - (18 + 22));
									v83 = v71[v75];
									v81[v83[2 - 0]] = v83[1 + 2];
								end
							elseif (v84 > (1474 - (697 + 605))) then
								local v2149 = 0;
								local v2150;
								local v2151;
								local v2152;
								while true do
									if (v2149 == 1) then
										v81[v83[1 + 1]] = v81[v83[6 - 3]] - v81[v83[333 - (188 + 141)]];
										v75 = v75 + (4 - 3);
										v83 = v71[v75];
										v2149 = 4 - 2;
									end
									if ((v2149 == (957 - (34 + 916))) or (4787 <= 3756)) then
										for v6960 = 1, v2150 do
											v2151[v6960] = v81[v2152 + v6960];
										end
										break;
									end
									if ((525 >= 423) and (v2149 == (1739 - (357 + 1380)))) then
										v81[v83[2]] = {};
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v2149 = 2 + 1;
									end
									if (v2149 == 3) then
										v81[v83[1 + 1]] = v61[v83[1930 - (178 + 1749)]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v2149 = 11 - 7;
									end
									if (v2149 == (1419 - (142 + 1273))) then
										v81[v83[595 - (284 + 309)]] = v83[3 + 0];
										v75 = v75 + 1;
										v83 = v71[v75];
										v2149 = 695 - (622 + 68);
									end
									if (6 == v2149) then
										v2152 = v83[2 + 0];
										v2151 = v81[v2152];
										v2150 = v83[3];
										v2149 = 15 - 8;
									end
									if (v2149 == (4 + 1)) then
										v81[v83[2 + 0]] = v81[v83[1901 - (855 + 1043)]][v81[v83[4]]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v2149 = 20 - 14;
									end
									if (v2149 == 0) then
										v2150 = nil;
										v2151 = nil;
										v2152 = nil;
										v2149 = 3 - 2;
									end
								end
							else
								local v2153 = 0;
								local v2154;
								local v2155;
								local v2156;
								while true do
									if ((782 - (576 + 203)) == v2153) then
										v2156 = v83[4 - 2];
										v81[v2156] = v81[v2156]();
										v75 = v75 + (1 - 0);
										v2153 = 1988 - (709 + 1275);
									end
									if (v2153 == (6 + 1)) then
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v2156 = v83[7 - 5];
										v2153 = 126 - (31 + 87);
									end
									if ((v2153 == (136 - (44 + 87))) or (2682 < 1809)) then
										v83 = v71[v75];
										v2156 = v83[7 - 5];
										v81[v2156] = v81[v2156]();
										v2153 = 5 + 1;
									end
									if ((4143 > 1460) and (v2153 == (17 - 9))) then
										v2155 = v81[v2156];
										v2154 = v83[8 - 5];
										for v6963 = 787 - (284 + 502), v2154 do
											v2155[v6963] = v81[v2156 + v6963];
										end
										break;
									end
									if ((1 + 0) == v2153) then
										v81[v83[1188 - (124 + 1062)]] = {};
										v75 = v75 + 1;
										v83 = v71[v75];
										v2153 = 2;
									end
									if (v2153 == (1029 - (847 + 180))) then
										v81[v83[2 + 0]] = v61[v83[3]];
										v75 = v75 + (4 - 3);
										v83 = v71[v75];
										v2153 = 1366 - (369 + 994);
									end
									if (4 == v2153) then
										v83 = v71[v75];
										v81[v83[965 - (583 + 380)]] = v61[v83[1 + 2]];
										v75 = v75 + 1 + 0;
										v2153 = 3 + 2;
									end
									if (v2153 == (1979 - (1085 + 888))) then
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										for v6966 = v83[7 - 5], v83[3] do
											v81[v6966] = nil;
										end
										v2153 = 32 - 25;
									end
									if (v2153 == (0 - 0)) then
										v2154 = nil;
										v2155 = nil;
										v2156 = nil;
										v2153 = 1 + 0;
									end
								end
							end
						elseif (v84 <= (91 + 89)) then
							if ((v84 <= (73 + 103)) or (2772 < 256)) then
								if ((v84 <= (248 - 74)) or (231 == 3795)) then
									local v421;
									v81[v83[2]] = v81[v83[3]][v83[5 - 1]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[3 + 0]][v81[v83[4]]];
									v75 = v75 + (215 - (153 + 61));
									v83 = v71[v75];
									v421 = v83[945 - (704 + 239)];
									v81[v421] = v81[v421]();
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1 + 1]][v81[v83[1389 - (740 + 646)]]] = v81[v83[3 + 1]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1924 - (1547 + 375)]] = v83[2 + 1];
								elseif ((4247 >= 417) and (v84 > (578 - (211 + 192)))) then
									local v2157;
									local v2158;
									local v2159;
									local v2160;
									v2160 = v83[2];
									v2159 = {v81[v2160]()};
									v2158 = v83[5 - 1];
									v2157 = 781 - (425 + 356);
									for v4177 = v2160, v2158 do
										v2157 = v2157 + 1 + 0;
										v81[v4177] = v2159[v2157];
									end
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[1568 - (83 + 1483)]] = v81[v83[1275 - (123 + 1149)]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[1583 - (908 + 672)]];
									v75 = v75 + (514 - (206 + 307));
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[3]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v61[v83[65 - (18 + 44)]] = v81[v83[1 + 1]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v61[v83[3]] = v81[v83[4 - 2]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v61[v83[938 - (226 + 709)]] = v81[v83[728 - (235 + 491)]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v61[v83[1 + 2]] = v81[v83[1301 - (463 + 836)]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v62[v83[407 - (166 + 238)]] = v81[v83[2 - 0]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v62[v83[1444 - (1080 + 361)]] = v81[v83[2]];
								else
									local v2181 = v83[2 - 0];
									do
										return v13(v81, v2181, v76);
									end
								end
							elseif (v84 <= (71 + 107)) then
								if (v84 == 177) then
									v81[v83[2 - 0]] = v81[v83[303 - (254 + 46)]][v83[1 + 3]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[258 - (37 + 219)]] = v81[v83[1902 - (1330 + 569)]][v83[5 - 1]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[11 - 8]][v81[v83[5 - 1]]];
									v75 = v75 + (671 - (128 + 542));
									v83 = v71[v75];
									v81[v83[3 - 1]][v81[v83[10 - 7]]] = v81[v83[4]];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[10 - 7];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v75 = v83[3];
								else
									for v4180 = v83[2 + 0], v83[5 - 2] do
										v81[v4180] = nil;
									end
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3]];
									v75 = v75 + (813 - (96 + 716));
									v83 = v71[v75];
									v81[v83[1609 - (85 + 1522)]] = v81[v83[856 - (724 + 129)]];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[375 - (83 + 290)]] = v83[3 - 0];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v75 = v83[3 + 0];
								end
							elseif (v84 > 179) then
								local v2202 = v83[2 + 0];
								do
									return v13(v81, v2202, v2202 + v83[2 + 1]);
								end
							else
								v81[v83[2 - 0]] = v81[v83[2 + 1]][v81[v83[8 - 4]]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[3 - 1]] = v81[v83[3]][v83[451 - (190 + 257)]];
								v75 = v75 + (592 - (402 + 189));
								v83 = v71[v75];
								v81[v83[2 + 0]] = v81[v83[3]][v81[v83[4]]];
								v75 = v75 + (567 - (90 + 476));
								v83 = v71[v75];
								v81[v83[816 - (688 + 126)]] = v81[v83[2 + 1]][v83[1 + 3]];
								v75 = v75 + (500 - (34 + 465));
								v83 = v71[v75];
								v81[v83[8 - 6]] = v81[v83[6 - 3]][v81[v83[3 + 1]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[5 - 3]][v81[v83[3 + 0]]] = v81[v83[7 - 3]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v75 = v83[1810 - (587 + 1220)];
							end
						elseif ((v84 <= 183) or (283 >= 937)) then
							if (v84 <= (2073 - (1211 + 681))) then
								local v433;
								local v434;
								local v435;
								v81[v83[2]] = {};
								v75 = v75 + (78 - (64 + 13));
								v83 = v71[v75];
								v81[v83[657 - (121 + 534)]] = v61[v83[3]];
								v75 = v75 + (804 - (622 + 181));
								v83 = v71[v75];
								v81[v83[1 + 1]] = v61[v83[3]];
								v75 = v75 + (1670 - (296 + 1373));
								v83 = v71[v75];
								for v878 = v83[1 + 1], v83[3] do
									v81[v878] = nil;
								end
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v61[v83[1 + 2]];
								v75 = v75 + (1615 - (143 + 1471));
								v83 = v71[v75];
								v435 = v83[6 - 4];
								v434 = v81[v435];
								v433 = v83[2 + 1];
								for v880 = 1, v433 do
									v434[v880] = v81[v435 + v880];
								end
							elseif ((3116 <= 4290) and (v84 == (471 - 289))) then
								v81[v83[2]] = v81[v83[183 - (103 + 77)]][v83[3 + 1]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2]] = v61[v83[3]];
								v75 = v75 + (1158 - (895 + 262));
								v83 = v71[v75];
								v81[v83[3 - 1]] = v81[v83[3 + 0]][v83[1630 - (581 + 1045)]];
								v75 = v75 + (1276 - (582 + 693));
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[1189 - (454 + 732)]][v81[v83[6 - 2]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2 - 0]][v81[v83[3 - 0]]] = v81[v83[4]];
								v75 = v75 + (651 - (367 + 283));
								v83 = v71[v75];
								v81[v83[70 - (7 + 61)]] = v81[v83[8 - 5]] + v83[8 - 4];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[680 - (332 + 346)]] = v83[5 - 2];
							else
								local v2229 = v83[3 - 1];
								v81[v2229] = v81[v2229](v13(v81, v2229 + 1, v83[11 - 8]));
							end
						elseif ((v84 <= 185) or (1679 >= 3504)) then
							if (v84 == (177 + 7)) then
								local v2231;
								v81[v83[2 - 0]] = v81[v83[3 + 0]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2 - 0]] = v81[v83[3]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[4 - 2]] = v81[v83[3]];
								v75 = v75 + (1855 - (815 + 1039));
								v83 = v71[v75];
								v2231 = v83[778 - (336 + 440)];
								do
									return v81[v2231](v13(v81, v2231 + 1 + 0, v83[1 + 2]));
								end
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v2231 = v83[432 - (222 + 208)];
								do
									return v13(v81, v2231, v76);
								end
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[833 - (652 + 178)]] + v83[4];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[5 - 3]] = v83[3 + 0];
							else
								v81[v83[2]] = v81[v83[3]][v81[v83[9 - 5]]];
								v75 = v75 + (395 - (259 + 135));
								v83 = v71[v75];
								v81[v83[2]] = v61[v83[1463 - (1393 + 67)]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2 + 0]] = v83[3];
								v75 = v75 + (1449 - (1129 + 319));
								v83 = v71[v75];
								v81[v83[2 + 0]] = v81[v83[3 - 0]][v81[v83[416 - (137 + 275)]]];
								v75 = v75 + (440 - (140 + 299));
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[1104 - (421 + 680)]][v81[v83[4]]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2]][v81[v83[14 - 11]]] = v81[v83[12 - 8]];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[2 + 0]] = v83[543 - (58 + 482)];
								v75 = v75 + (680 - (310 + 369));
								v83 = v71[v75];
								v81[v83[2 + 0]] = v81[v83[289 - (274 + 12)]] + v81[v83[4 + 0]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[1764 - (681 + 1081)]] = v81[v83[3]][v81[v83[13 - 9]]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[2]] = v83[3];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[879 - (842 + 35)]] = v81[v83[4 - 1]][v81[v83[1871 - (180 + 1687)]]];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[973 - (269 + 702)]] = v61[v83[3]];
								v75 = v75 + (815 - (776 + 38));
								v83 = v71[v75];
								v81[v83[1 + 1]] = v83[5 - 2];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[3]][v81[v83[1 + 3]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[4 - 2]] = v81[v83[3]][v81[v83[3 + 1]]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[7 - 5]][v81[v83[2 + 1]]] = v81[v83[959 - (135 + 820)]];
								v75 = v75 + (137 - (118 + 18));
								v83 = v71[v75];
								v81[v83[1 + 1]] = v83[3];
								v75 = v75 + (4 - 3);
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[3 + 0]] + v81[v83[1 + 3]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2 + 0]] = v81[v83[1296 - (741 + 552)]][v81[v83[1 + 3]]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[2]] = v83[3];
							end
						elseif (v84 == (169 + 17)) then
							local v2267 = v81[v83[4]];
							if ((2030 <= 3278) and not v2267) then
								v75 = v75 + (885 - (779 + 105));
							else
								local v4472 = 0;
								while true do
									if (v4472 == (1781 - (1451 + 330))) then
										v81[v83[2]] = v2267;
										v75 = v83[1872 - (1259 + 610)];
										break;
									end
								end
							end
						else
							local v2268 = 850 - (4 + 846);
							local v2269;
							local v2270;
							local v2271;
							local v2272;
							while true do
								if (v2268 == 4) then
									v2272 = v83[1859 - (1108 + 749)];
									v2270, v2271 = v74(v81[v2272](v13(v81, v2272 + 1, v83[1744 - (1301 + 440)])));
									v76 = (v2271 + v2272) - 1;
									v2269 = 0;
									for v6968 = v2272, v76 do
										local v6969 = 0 - 0;
										while true do
											if (v6969 == 0) then
												v2269 = v2269 + 1 + 0;
												v81[v6968] = v2270[v2269];
												break;
											end
										end
									end
									v75 = v75 + 1 + 0;
									v2268 = 4 + 1;
								end
								if (v2268 == 5) then
									v83 = v71[v75];
									v2272 = v83[478 - (168 + 308)];
									v81[v2272] = v81[v2272](v13(v81, v2272 + 1, v76));
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2 + 0]][v81[v83[1350 - (469 + 878)]]] = v81[v83[4 + 0]];
									v2268 = 22 - 16;
								end
								if (v2268 == 3) then
									v81[v83[1 + 1]] = v81[v83[1 + 2]] + v83[4];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[4 - 2]] = v81[v83[3 + 0]][v83[15 - 11]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v2268 = 1844 - (1332 + 508);
								end
								if (v2268 == (1 + 1)) then
									v81[v83[1 + 1]] = v61[v83[3]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1144 - (650 + 492)]] = v81[v83[809 - (689 + 117)]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v2268 = 7 - 4;
								end
								if (v2268 == (1923 - (794 + 1129))) then
									v2269 = nil;
									v2270, v2271 = nil;
									v2272 = nil;
									v81[v83[2 + 0]] = v81[v83[3]][v81[v83[1 + 3]]];
									v75 = v75 + (862 - (553 + 308));
									v83 = v71[v75];
									v2268 = 1 - 0;
								end
								if ((v2268 == (1 + 0)) or (331 > 4148)) then
									v81[v83[1 + 1]] = v81[v83[1771 - (1764 + 4)]][v83[521 - (121 + 396)]];
									v75 = v75 + (555 - (498 + 56));
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[11 - 8]][v81[v83[4]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v2268 = 5 - 3;
								end
								if ((8 - 2) == v2268) then
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[4 - 2]] = v83[1619 - (316 + 1300)];
									v75 = v75 + (173 - (78 + 94));
									v83 = v71[v75];
									v75 = v83[3];
									break;
								end
							end
						end
					elseif (v84 <= (1616 - (261 + 1155))) then
						if (v84 <= (1649 - (1040 + 416))) then
							if (v84 <= (233 - (29 + 14))) then
								if (v84 <= (357 - 169)) then
									v81[v83[964 - (928 + 34)]] = v81[v83[1 + 2]][v83[1 + 3]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[7 - 5]] = v81[v83[8 - 5]][v83[6 - 2]];
									v75 = v75 + (511 - (69 + 441));
									v83 = v71[v75];
									v81[v83[2]][v81[v83[7 - 4]]] = v81[v83[4]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[4 - 2]] = v81[v83[3]] + v83[4];
									v75 = v75 + (1881 - (517 + 1363));
									v83 = v71[v75];
									v81[v83[930 - (802 + 126)]] = v81[v83[3]] + v83[1672 - (1660 + 8)];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[183 - (38 + 143)]] = v83[8 - 5];
								elseif (v84 == (306 - (29 + 88))) then
									v81[v83[3 - 1]] = v81[v83[492 - (308 + 181)]][v83[1401 - (537 + 860)]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1097 - (691 + 404)]][v81[v83[1957 - (870 + 1084)]]] = v81[v83[133 - (47 + 82)]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[3]] + v83[4 + 0];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[6 - 4]] = v81[v83[3]][v81[v83[121 - (84 + 33)]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[6 - 4]] = v81[v83[3]][v83[1 + 3]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[4 - 2]] = v81[v83[8 - 5]][v83[19 - 15]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 - 0]][v81[v83[1223 - (87 + 1133)]]] = v81[v83[4]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[3 + 0];
								else
									v81[v83[669 - (205 + 462)]] = v81[v83[3]][v83[2 + 2]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[1383 - (1035 + 346)]] = v81[v83[2 + 1]][v83[1784 - (970 + 810)]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 + 0]][v81[v83[8 - 5]]] = v81[v83[3 + 1]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[5 - 3]] = v81[v83[3]] + v83[15 - 11];
									v75 = v75 + (1389 - (601 + 787));
									v83 = v71[v75];
									v81[v83[612 - (256 + 354)]] = v81[v83[5 - 2]][v81[v83[14 - 10]]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[3 - 1]] = v83[4 - 1];
								end
							elseif (v84 <= (456 - 265)) then
								v81[v83[5 - 3]] = v81[v83[5 - 2]] + v83[9 - 5];
								v75 = v75 + (573 - (259 + 313));
								v83 = v71[v75];
								v81[v83[2 - 0]] = v81[v83[3]][v81[v83[1 + 3]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2 + 0]] = v81[v83[8 - 5]][v83[1342 - (413 + 925)]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2 + 0]] = v81[v83[1 + 2]][v83[14 - 10]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[2 + 0]][v81[v83[8 - 5]]] = v81[v83[1948 - (1164 + 780)]];
								v75 = v75 + (1361 - (596 + 764));
								v83 = v71[v75];
								v81[v83[284 - (52 + 230)]] = v81[v83[9 - 6]] + v83[1570 - (806 + 760)];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[2 - 0]] = v83[4 - 1];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v75 = v83[1 + 2];
							elseif ((v84 == (721 - 529)) or (1943 >= 2818)) then
								v62[v83[5 - 2]] = v81[v83[1 + 1]];
							else
								v81[v83[2 + 0]] = v81[v83[1968 - (1000 + 965)]][v81[v83[3 + 1]]];
								v75 = v75 + (4 - 3);
								v83 = v71[v75];
								v81[v83[5 - 3]] = v81[v83[2 + 1]][v81[v83[1130 - (261 + 865)]]];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								do
									return v81[v83[2 - 0]];
								end
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[547 - (33 + 512)]] = v83[1839 - (1555 + 281)];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v75 = v83[2 + 1];
							end
						elseif ((v84 <= (320 - 124)) or (4736 < 933)) then
							if ((v84 <= 194) or (2212 > 3383)) then
								v81[v83[2]] = v61[v83[3]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[5 - 3]] = v81[v83[3 + 0]][v83[4]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[41 - (34 + 5)]] = v81[v83[3 + 0]][v81[v83[2 + 2]]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2 + 0]][v81[v83[2 + 1]]] = v81[v83[2 + 2]];
								v75 = v75 + (3 - 2);
								v83 = v71[v75];
								v81[v83[4 - 2]] = v81[v83[1224 - (999 + 222)]] + v83[4];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v83[347 - (166 + 178)];
							elseif (v84 == (60 + 135)) then
								local v2310 = 0;
								while true do
									if (v2310 == 0) then
										v81[v83[5 - 3]] = v81[v83[1303 - (587 + 713)]][v81[v83[3 + 1]]];
										v75 = v75 + (1123 - (11 + 1111));
										v83 = v71[v75];
										v2310 = 1;
									end
									if ((v2310 == (3 + 2)) or (3153 == 1399)) then
										v81[v83[2 + 0]] = v81[v83[6 - 3]] + v81[v83[1104 - (882 + 218)]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v2310 = 968 - (115 + 847);
									end
									if (v2310 == (2 - 1)) then
										v81[v83[2]] = v81[v83[1618 - (1231 + 384)]][v83[8 - 4]];
										v75 = v75 + (1697 - (1202 + 494));
										v83 = v71[v75];
										v2310 = 180 - (12 + 166);
									end
									if (v2310 == 4) then
										v81[v83[4 - 2]] = v81[v83[3 + 0]][v83[4]];
										v75 = v75 + (605 - (202 + 402));
										v83 = v71[v75];
										v2310 = 4 + 1;
									end
									if ((v2310 == 7) or (969 >= 1823)) then
										v81[v83[1000 - (936 + 62)]] = v81[v83[3]] + v83[4];
										v75 = v75 + (349 - (119 + 229));
										v83 = v71[v75];
										v2310 = 19 - 11;
									end
									if ((335 <= 3087) and ((11 - 8) == v2310)) then
										v81[v83[1 + 1]] = v81[v83[3]][v81[v83[8 - 4]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v2310 = 4;
									end
									if (v2310 == (1438 - (513 + 923))) then
										v81[v83[2]] = v81[v83[1780 - (507 + 1270)]][v83[2 + 2]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v2310 = 11 - 8;
									end
									if ((3962 == 3962) and ((6 + 3) == v2310)) then
										v81[v83[2]] = v81[v83[11 - 8]][v81[v83[4]]];
										break;
									end
									if ((8 - 2) == v2310) then
										v81[v83[771 - (644 + 125)]][v81[v83[3]]] = v81[v83[3 + 1]];
										v75 = v75 + (1848 - (718 + 1129));
										v83 = v71[v75];
										v2310 = 6 + 1;
									end
									if ((1473 >= 821) and (v2310 == (24 - 16))) then
										v81[v83[2]] = v81[v83[1412 - (564 + 845)]] + v83[10 - 6];
										v75 = v75 + (163 - (46 + 116));
										v83 = v71[v75];
										v2310 = 9;
									end
								end
							else
								local v2311;
								local v2312, v2313;
								local v2314;
								v81[v83[652 - (575 + 75)]] = v61[v83[7 - 4]];
								v75 = v75 + (3 - 2);
								v83 = v71[v75];
								v81[v83[6 - 4]] = v81[v83[2 + 1]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2 + 0]] = v81[v83[1 + 2]] + v83[3 + 1];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[672 - (224 + 446)]] = v81[v83[1 + 2]][v83[1 + 3]];
								v75 = v75 + (3 - 2);
								v83 = v71[v75];
								v2314 = v83[320 - (56 + 262)];
								v2312, v2313 = v74(v81[v2314](v13(v81, v2314 + (3 - 2), v83[704 - (666 + 35)])));
								v76 = (v2313 + v2314) - 1;
								v2311 = 0;
								for v4182 = v2314, v76 do
									local v4183 = 0 - 0;
									while true do
										if (v4183 == (1180 - (553 + 627))) then
											v2311 = v2311 + (1474 - (936 + 537));
											v81[v4182] = v2312[v2311];
											break;
										end
									end
								end
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v2314 = v83[1202 - (737 + 463)];
								v81[v2314] = v81[v2314](v13(v81, v2314 + 1 + 0, v76));
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[669 - (424 + 243)]][v81[v83[1 + 2]]] = v81[v83[14 - 10]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1348 - (1213 + 133)]] = v81[v83[3]] + v83[6 - 2];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[62 - (37 + 23)]] = v81[v83[3]][v81[v83[14 - 10]]];
								v75 = v75 + (1344 - (122 + 1221));
								v83 = v71[v75];
								v81[v83[244 - (139 + 103)]] = v81[v83[1 + 2]][v83[4]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2 - 0]] = v81[v83[2 + 1]][v81[v83[3 + 1]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[108 - (9 + 97)]] = v81[v83[5 - 2]][v83[2 + 2]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								if (v81[v83[2 + 0]] == v81[v83[4]]) then
									v75 = v75 + 1;
								else
									v75 = v83[9 - 6];
								end
							end
						elseif (v84 <= (1273 - (657 + 418))) then
							if ((v84 == 197) or (3515 >= 4532)) then
								v81[v83[2]] = v81[v83[1983 - (448 + 1532)]][v83[257 - (110 + 143)]];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[945 - (549 + 394)]] = v81[v83[2 + 1]][v83[1238 - (500 + 734)]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[2 + 1]][v81[v83[1 + 3]]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1 + 1]] = #v81[v83[668 - (343 + 322)]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]][v81[v83[1 + 2]]] = v81[v83[1 + 3]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[10 - 7]] + v83[1135 - (297 + 834)];
								v75 = v75 + (4 - 3);
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[7 - 4]] + v83[3 + 1];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]] = v83[789 - (494 + 292)];
								v75 = v75 + 1;
								v83 = v71[v75];
								v75 = v83[3];
							else
								local v2348 = 0 + 0;
								while true do
									if ((v2348 == (14 - 11)) or (2750 > 4696)) then
										v81[v83[1634 - (888 + 744)]][v81[v83[1 + 2]]] = v81[v83[689 - (206 + 479)]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v2348 = 1177 - (861 + 312);
									end
									if ((741 - (135 + 601)) == v2348) then
										v81[v83[1144 - (1085 + 57)]] = v81[v83[3]][v81[v83[1929 - (224 + 1701)]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v2348 = 15 - 9;
									end
									if (v2348 == (6 + 0)) then
										v81[v83[2]] = v83[3];
										break;
									end
									if ((2861 < 3339) and ((13 - 9) == v2348)) then
										v81[v83[2 + 0]] = v81[v83[749 - (730 + 16)]] + v83[4 + 0];
										v75 = v75 + (1583 - (790 + 792));
										v83 = v71[v75];
										v2348 = 1086 - (474 + 607);
									end
									if (v2348 == 0) then
										v81[v83[2]] = v61[v83[3]];
										v75 = v75 + (531 - (129 + 401));
										v83 = v71[v75];
										v2348 = 1 - 0;
									end
									if (v2348 == (120 - (51 + 67))) then
										v81[v83[1 + 1]] = v81[v83[116 - (93 + 20)]][v81[v83[15 - 11]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v2348 = 23 - (12 + 8);
									end
									if ((120 <= 3286) and (v2348 == (199 - (161 + 37)))) then
										v81[v83[2]] = v81[v83[2 + 1]][v83[1561 - (507 + 1050)]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v2348 = 2;
									end
								end
							end
						elseif (v84 > (382 - 183)) then
							v81[v83[3 - 1]] = v81[v83[2 + 1]] - v81[v83[4]];
						else
							v81[v83[1 + 1]] = v61[v83[1 + 2]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[3 - 1]] = v81[v83[867 - (184 + 680)]][v83[3 + 1]];
							v75 = v75 + (2 - 1);
							v83 = v71[v75];
							v81[v83[2 + 0]] = v81[v83[3]][v81[v83[8 - 4]]];
							v75 = v75 + (1 - 0);
							v83 = v71[v75];
							v81[v83[2]][v81[v83[1 + 2]]] = v81[v83[1054 - (629 + 421)]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[3 - 1]] = v81[v83[6 - 3]] + v83[4];
							v75 = v75 + (941 - (544 + 396));
							v83 = v71[v75];
							v81[v83[3 - 1]] = v81[v83[994 - (904 + 87)]] + v83[14 - 10];
							v75 = v75 + (1475 - (1443 + 31));
							v83 = v71[v75];
							v81[v83[4 - 2]] = v81[v83[1816 - (1110 + 703)]][v81[v83[9 - 5]]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[5 - 3]] = v83[8 - 5];
						end
					elseif (v84 <= 207) then
						if ((v84 <= 203) or (1295 >= 4401)) then
							if (v84 <= (404 - (78 + 125))) then
								v81[v83[5 - 3]] = v81[v83[3]][v81[v83[6 - 2]]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2 - 0]] = v83[3];
								v75 = v75 + (1825 - (1392 + 432));
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[1 + 2]][v81[v83[10 - 6]]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[1 + 2]][v81[v83[1406 - (963 + 439)]]];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[1327 - (76 + 1249)]] = v83[1754 - (1165 + 586)];
								v75 = v75 + (1929 - (1916 + 12));
								v83 = v71[v75];
								v81[v83[1258 - (604 + 652)]] = v81[v83[3]][v81[v83[7 - 3]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2 - 0]] = v81[v83[1 + 2]] % v81[v83[8 - 4]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[2]][v81[v83[4 - 1]]] = v81[v83[4 - 0]];
								v75 = v75 + (14 - (11 + 2));
								v83 = v71[v75];
								v81[v83[1444 - (64 + 1378)]] = v83[7 - 4];
								v75 = v75 + (1754 - (256 + 1497));
								v83 = v71[v75];
								v75 = v83[3 - 0];
							elseif (v84 > (1079 - (562 + 315))) then
								local v2363 = 0 - 0;
								while true do
									if (v2363 == 6) then
										v81[v83[1190 - (577 + 611)]] = v83[3 + 0];
										break;
									end
									if ((1796 <= 4893) and (v2363 == (7 - 4))) then
										v81[v83[3 - 1]][v81[v83[74 - (58 + 13)]]] = v81[v83[3 + 1]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[456 - (404 + 50)]] = v81[v83[3]] + v83[40 - (6 + 30)];
										v2363 = 4;
									end
									if ((1256 <= 3198) and ((1334 - (770 + 563)) == v2363)) then
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[1 + 2]][v83[174 - (25 + 145)]];
										v75 = v75 + 1 + 0;
										v2363 = 701 - (153 + 546);
									end
									if (v2363 == (2 + 0)) then
										v83 = v71[v75];
										v81[v83[929 - (60 + 867)]] = v81[v83[10 - 7]] + v81[v83[4]];
										v75 = v75 + (1284 - (309 + 974));
										v83 = v71[v75];
										v2363 = 2 + 1;
									end
									if (v2363 == 5) then
										v83 = v71[v75];
										v81[v83[5 - 3]] = v81[v83[1144 - (677 + 464)]][v83[4]];
										v75 = v75 + (823 - (567 + 255));
										v83 = v71[v75];
										v2363 = 9 - 3;
									end
									if ((4255 >= 1819) and (v2363 == (4 - 0))) then
										v75 = v75 + (529 - (384 + 144));
										v83 = v71[v75];
										v81[v83[1223 - (1030 + 191)]] = v81[v83[5 - 2]][v81[v83[7 - 3]]];
										v75 = v75 + 1 + 0;
										v2363 = 862 - (326 + 531);
									end
									if (0 == v2363) then
										v81[v83[4 - 2]] = v81[v83[2 + 1]][v83[4]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[4 - 2]] = v81[v83[1 + 2]][v81[v83[4]]];
										v2363 = 1 + 0;
									end
								end
							else
								v81[v83[2]] = v83[1624 - (1367 + 254)];
								v75 = v75 + (679 - (305 + 373));
								v83 = v71[v75];
								v81[v83[2 - 0]] = v81[v83[3]][v81[v83[4]]];
								v75 = v75 + (320 - (129 + 190));
								v83 = v71[v75];
								v81[v83[2]] = v61[v83[3]];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[3 - 1]] = v83[3 + 0];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2 + 0]] = v81[v83[292 - (210 + 79)]][v81[v83[6 - 2]]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[4 - 2]] = v81[v83[675 - (32 + 640)]][v81[v83[4 + 0]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[1 + 1]][v81[v83[2 + 1]]] = v81[v83[4]];
								v75 = v75 + (1762 - (847 + 914));
								v83 = v71[v75];
								v81[v83[5 - 3]] = v83[6 - 3];
							end
						elseif (v84 <= (729 - (163 + 361))) then
							if (v84 > 204) then
								local v2380 = 885 - (162 + 723);
								while true do
									if ((v2380 == (1 + 4)) or (1003 >= 4367)) then
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[404 - (258 + 143)]][v81[v83[4]]];
										v75 = v75 + (4 - 3);
										v83 = v71[v75];
										v2380 = 12 - 6;
									end
									if (v2380 == (7 - 5)) then
										v83 = v71[v75];
										v81[v83[1693 - (486 + 1205)]] = v81[v83[3]][v81[v83[169 - (92 + 73)]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v2380 = 3 + 0;
									end
									if ((v2380 == 1) or (474 > 3806)) then
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v83[4 - 1];
										v75 = v75 + (273 - (68 + 204));
										v2380 = 3 - 1;
									end
									if (v2380 == (1 + 2)) then
										v81[v83[1 + 1]] = v81[v83[14 - 11]][v81[v83[2 + 2]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v83[3 + 0];
										v2380 = 4;
									end
									if ((v2380 == (320 - (20 + 296))) or (543 >= 4521)) then
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[8 - 6]] = v81[v83[10 - 7]][v81[v83[5 - 1]]];
										v75 = v75 + 1 + 0;
										v2380 = 2 + 3;
									end
									if ((1812 == 1812) and (v2380 == (0 - 0))) then
										v81[v83[2]] = v81[v83[2 + 1]][v81[v83[4 + 0]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[5 - 3]] = v81[v83[4 - 1]][v81[v83[3 + 1]]];
										v2380 = 1;
									end
									if (v2380 == (255 - (155 + 94))) then
										v81[v83[2 - 0]][v81[v83[910 - (515 + 392)]]] = v81[v83[4]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[328 - (7 + 319)]] = v83[2 + 1];
										break;
									end
								end
							else
								local v2381 = 0;
								local v2382;
								while true do
									if (v2381 == 1) then
										v81[v83[1 + 1]] = v81[v83[1500 - (292 + 1205)]];
										v75 = v75 + (53 - (13 + 39));
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[9 - 6]];
										v2381 = 2;
									end
									if (v2381 == (11 - 8)) then
										v75 = v75 + (1039 - (850 + 188));
										v83 = v71[v75];
										v2382 = v83[1038 - (822 + 214)];
										do
											return v13(v81, v2382, v76);
										end
										v2381 = 1165 - (317 + 844);
									end
									if (v2381 == 7) then
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v75 = v83[2 + 1];
										break;
									end
									if ((2582 == 2582) and (v2381 == (1196 - (508 + 682)))) then
										v81[v83[1 + 1]] = v81[v83[2 + 1]][v81[v83[549 - (127 + 418)]]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										do
											return;
										end
										v2381 = 16 - 9;
									end
									if ((v2381 == 2) or (3889 <= 992)) then
										v75 = v75 + (4 - 3);
										v83 = v71[v75];
										v2382 = v83[2 - 0];
										do
											return v81[v2382](v13(v81, v2382 + (1121 - (690 + 430)), v83[11 - 8]));
										end
										v2381 = 3;
									end
									if ((v2381 == (2 + 2)) or (1785 < 1002)) then
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[954 - (637 + 315)]] = v83[8 - 5];
										v75 = v75 + (2 - 1);
										v2381 = 15 - 10;
									end
									if ((v2381 == (4 + 1)) or (2729 <= 2324)) then
										v83 = v71[v75];
										v81[v83[4 - 2]] = v81[v83[3]] + v81[v83[24 - (13 + 7)]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v2381 = 9 - 3;
									end
									if (v2381 == (0 - 0)) then
										v2382 = nil;
										v81[v83[2 - 0]] = v81[v83[2 + 1]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v2381 = 352 - (44 + 307);
									end
								end
							end
						elseif (v84 > (1003 - (127 + 670))) then
							v81[v83[2 + 0]] = v81[v83[587 - (375 + 209)]] + v83[4];
							v75 = v75 + (1817 - (1673 + 143));
							v83 = v71[v75];
							v81[v83[2]] = v81[v83[3 + 0]][v81[v83[4]]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[2 + 0]] = v81[v83[1452 - (836 + 613)]][v83[8 - 4]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[2]] = v81[v83[1533 - (295 + 1235)]][v81[v83[4]]];
							v75 = v75 + (541 - (328 + 212));
							v83 = v71[v75];
							v81[v83[4 - 2]] = v81[v83[922 - (517 + 402)]][v83[8 - 4]];
							v75 = v75 + (2 - 1);
							v83 = v71[v75];
							v81[v83[1084 - (700 + 382)]] = v81[v83[882 - (677 + 202)]][v81[v83[6 - 2]]];
							v75 = v75 + 1;
							v83 = v71[v75];
							if (v81[v83[5 - 3]] ~= v81[v83[4 + 0]]) then
								v75 = v75 + (754 - (360 + 393));
							else
								v75 = v83[9 - 6];
							end
						elseif (v83[1959 - (1231 + 726)] < v83[4]) then
							v75 = v83[4 - 1];
						else
							v75 = v75 + 1;
						end
					elseif ((1609 == 1609) and (v84 <= (2120 - (173 + 1737)))) then
						if ((1876 < 3848) and (v84 <= (2155 - (441 + 1506)))) then
							local v497;
							local v498;
							local v499;
							v81[v83[1 + 1]] = v83[9 - 6];
							v75 = v75 + (695 - (136 + 558));
							v83 = v71[v75];
							v81[v83[2]] = v81[v83[3]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[2]] = v81[v83[1225 - (988 + 234)]][v83[2 + 2]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[4 - 2]] = v83[654 - (125 + 526)];
							v75 = v75 + (3 - 2);
							v83 = v71[v75];
							v499 = v83[2 + 0];
							v498 = v81[v499];
							v497 = v81[v499 + (5 - 3)];
							if (v497 > (1126 - (290 + 836))) then
								if (v498 > v81[v499 + 1 + 0]) then
									v75 = v83[3];
								else
									v81[v499 + (4 - 1)] = v498;
								end
							elseif (v498 < v81[v499 + (681 - (8 + 672))]) then
								v75 = v83[1 + 2];
							else
								v81[v499 + (1439 - (740 + 696))] = v498;
							end
						elseif ((v84 > (1255 - (353 + 693))) or (3994 > 4973)) then
							v81[v83[2 + 0]] = v81[v83[1496 - (35 + 1458)]][v81[v83[4]]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[1872 - (1821 + 49)]] = v81[v83[8 - 5]][v81[v83[1738 - (727 + 1007)]]];
							v75 = v75 + (168 - (165 + 2));
							v83 = v71[v75];
							v81[v83[1661 - (1028 + 631)]] = v83[1618 - (311 + 1304)];
							v75 = v75 + (2 - 1);
							v83 = v71[v75];
							v81[v83[1 + 1]] = v81[v83[1 + 2]][v81[v83[4]]];
							v75 = v75 + (580 - (512 + 67));
							v83 = v71[v75];
							v81[v83[5 - 3]] = v81[v83[1 + 2]][v81[v83[2 + 2]]];
							v75 = v75 + (1 - 0);
							v83 = v71[v75];
							v81[v83[5 - 3]] = v81[v83[1 + 2]][v81[v83[4]]];
							v75 = v75 + (2 - 1);
							v83 = v71[v75];
							v81[v83[2]][v81[v83[1792 - (395 + 1394)]]] = v81[v83[14 - 10]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[2]] = v83[3];
						else
							local v2408 = 0 + 0;
							while true do
								if (v2408 == (0 - 0)) then
									v81[v83[5 - 3]] = v83[470 - (143 + 324)] ~= 0;
									v75 = v75 + (2 - 1);
									break;
								end
							end
						end
					elseif (v84 <= 212) then
						if ((4549 > 2977) and (v84 > (46 + 165))) then
							local v2409;
							local v2410, v2411;
							local v2412;
							v81[v83[5 - 3]] = v81[v83[2 + 1]][v83[1107 - (342 + 761)]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[5 - 3]] = v81[v83[2 + 1]][v81[v83[5 - 1]]];
							v75 = v75 + (1 - 0);
							v83 = v71[v75];
							v81[v83[2 + 0]] = v61[v83[1160 - (889 + 268)]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[2 + 0]] = v81[v83[1 + 2]];
							v75 = v75 + (2 - 1);
							v83 = v71[v75];
							v81[v83[2]] = v81[v83[300 - (196 + 101)]] + v83[6 - 2];
							v75 = v75 + (2 - 1);
							v83 = v71[v75];
							v81[v83[2]] = v81[v83[2 + 1]][v83[12 - 8]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v2412 = v83[2];
							v2410, v2411 = v74(v81[v2412](v13(v81, v2412 + (2 - 1), v83[3])));
							v76 = (v2411 + v2412) - (2 - 1);
							v2409 = 0;
							for v4184 = v2412, v76 do
								v2409 = v2409 + 1 + 0;
								v81[v4184] = v2410[v2409];
							end
							v75 = v75 + 1;
							v83 = v71[v75];
							v2412 = v83[2 - 0];
							v81[v2412] = v81[v2412](v13(v81, v2412 + (1584 - (431 + 1152)), v76));
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[346 - (107 + 237)]][v81[v83[3]]] = v81[v83[1804 - (690 + 1110)]];
							v75 = v75 + (1 - 0);
							v83 = v71[v75];
							v81[v83[2]] = v83[1500 - (1374 + 123)];
						else
							local v2428 = 0 - 0;
							local v2429;
							local v2430;
							local v2431;
							local v2432;
							while true do
								if (v2428 == (1 + 0)) then
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[1 + 2]][v81[v83[4]]];
									v75 = v75 + (1604 - (454 + 1149));
									v2428 = 3 - 1;
								end
								if (v2428 == (4 - 2)) then
									v83 = v71[v75];
									v81[v83[1 + 1]] = v61[v83[3 + 0]];
									v75 = v75 + (638 - (21 + 616));
									v83 = v71[v75];
									v2428 = 6 - 3;
								end
								if (v2428 == (0 + 0)) then
									v2429 = nil;
									v2430, v2431 = nil;
									v2432 = nil;
									v81[v83[439 - (125 + 312)]] = v81[v83[3]][v81[v83[3 + 1]]];
									v2428 = 1 + 0;
								end
								if ((1114 - (266 + 842)) == v2428) then
									v81[v83[640 - (395 + 243)]] = v81[v83[3 + 0]][v81[v83[1039 - (383 + 652)]]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v2432 = v83[2 + 0];
									v2428 = 5 + 2;
								end
								if (v2428 == (651 - (114 + 529))) then
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v2432 = v83[2 + 0];
									v81[v2432] = v81[v2432](v13(v81, v2432 + (1190 - (352 + 837)), v76));
									break;
								end
								if (v2428 == (16 - 12)) then
									v75 = v75 + (551 - (465 + 85));
									v83 = v71[v75];
									v81[v83[533 - (366 + 165)]] = v81[v83[1 + 2]] + v81[v83[12 - 8]];
									v75 = v75 + (3 - 2);
									v2428 = 5;
								end
								if (v2428 == (1 + 6)) then
									v2430, v2431 = v74(v81[v2432](v13(v81, v2432 + 1, v83[3])));
									v76 = (v2431 + v2432) - (1666 - (521 + 1144));
									v2429 = 0 - 0;
									for v6972 = v2432, v76 do
										v2429 = v2429 + 1 + 0;
										v81[v6972] = v2430[v2429];
									end
									v2428 = 98 - (5 + 85);
								end
								if (3 == v2428) then
									v81[v83[1695 - (1547 + 146)]] = v81[v83[9 - 6]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[319 - (272 + 45)]] = v83[6 - 3];
									v2428 = 2 + 2;
								end
								if ((4577 > 2876) and (v2428 == (7 - 2))) then
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[2 + 1];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v2428 = 3 + 3;
								end
							end
						end
					elseif ((851 <= 2362) and (v84 > (1509 - (997 + 299)))) then
						local v2433 = 1287 - (903 + 384);
						local v2434;
						local v2435;
						local v2436;
						local v2437;
						while true do
							if (v2433 == 9) then
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v2437 = v83[1 + 1];
								v2434, v2436 = v74(v81[v2437](v13(v81, v2437 + 1, v76)));
								v2433 = 9 + 1;
							end
							if (v2433 == (26 - 12)) then
								v83 = v71[v75];
								v81[v83[6 - 4]] = v83[1 + 2];
								break;
							end
							if (v2433 == 12) then
								for v6975 = v2437, v83[5 - 1] do
									local v6976 = 0 + 0;
									while true do
										if ((589 - (313 + 276)) == v6976) then
											v2435 = v2435 + 1 + 0;
											v81[v6975] = v2434[v2435];
											break;
										end
									end
								end
								v75 = v75 + (329 - (168 + 160));
								v83 = v71[v75];
								v81[v83[1458 - (1452 + 4)]] = v81[v83[3]];
								v2433 = 13;
							end
							if ((v2433 == (13 - 10)) or (3985 <= 1377)) then
								v83 = v71[v75];
								v81[v83[422 - (338 + 82)]] = v61[v83[576 - (133 + 440)]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v2433 = 4;
							end
							if (v2433 == (2 + 3)) then
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[1 + 2]] + v81[v83[1 + 3]];
								v75 = v75 + 1;
								v2433 = 6;
							end
							if ((v2433 == 11) or (1921 > 2154)) then
								v83 = v71[v75];
								v2437 = v83[2 + 0];
								v2434 = {v81[v2437](v13(v81, v2437 + (1981 - (365 + 1615)), v76))};
								v2435 = 0 - 0;
								v2433 = 12;
							end
							if (v2433 == (1362 - (479 + 873))) then
								v76 = (v2436 + v2437) - 1;
								v2435 = 0 + 0;
								for v6977 = v2437, v76 do
									v2435 = v2435 + (2 - 1);
									v81[v6977] = v2434[v2435];
								end
								v75 = v75 + (2 - 1);
								v2433 = 3 + 8;
							end
							if ((1 + 0) == v2433) then
								v81[v83[1504 - (832 + 670)]] = v81[v83[9 - 6]][v81[v83[11 - 7]]];
								v75 = v75 + (1248 - (707 + 540));
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[62 - (18 + 41)]];
								v2433 = 2;
							end
							if ((3447 > 533) and (v2433 == 13)) then
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[3 + 0]];
								v75 = v75 + (1221 - (554 + 666));
								v2433 = 514 - (438 + 62);
							end
							if ((1957 == 1957) and (v2433 == (1911 - (1497 + 408)))) then
								v83 = v71[v75];
								v81[v83[2 - 0]] = v83[2 + 1];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v2433 = 647 - (508 + 132);
							end
							if (v2433 == (6 - 4)) then
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[1209 - (49 + 1158)]] = v81[v83[1 + 2]][v81[v83[4 - 0]]];
								v75 = v75 + 1;
								v2433 = 3;
							end
							if (((3 + 5) == v2433) or (1998 < 1926)) then
								v2434, v2436 = v74(v81[v2437](v13(v81, v2437 + 1 + 0, v83[6 - 3])));
								v76 = (v2436 + v2437) - 1;
								v2435 = 0 + 0;
								for v6980 = v2437, v76 do
									v2435 = v2435 + (1222 - (460 + 761));
									v81[v6980] = v2434[v2435];
								end
								v2433 = 23 - 14;
							end
							if (v2433 == 4) then
								v81[v83[2 + 0]] = v81[v83[1 + 2]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[598 - (405 + 191)]] = v83[3];
								v2433 = 1675 - (311 + 1359);
							end
							if (v2433 == (15 - 8)) then
								v81[v83[2 + 0]] = v81[v83[1 + 2]][v81[v83[4]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v2437 = v83[1 + 1];
								v2433 = 5 + 3;
							end
							if (v2433 == 0) then
								v2434 = nil;
								v2435 = nil;
								v2434, v2436 = nil;
								v2437 = nil;
								v2433 = 1 - 0;
							end
						end
					else
						local v2438;
						local v2439;
						local v2440;
						v81[v83[1 + 1]] = v83[4 - 1];
						v75 = v75 + 1;
						v83 = v71[v75];
						v81[v83[1 + 1]] = v81[v83[5 - 2]][v81[v83[4 - 0]]];
						v75 = v75 + (1521 - (1408 + 112));
						v83 = v71[v75];
						v81[v83[984 - (285 + 697)]] = v83[14 - 11];
						v75 = v75 + (1261 - (737 + 523));
						v83 = v71[v75];
						v81[v83[2]] = v81[v83[13 - 10]];
						v75 = v75 + 1 + 0;
						v83 = v71[v75];
						v81[v83[2]] = v83[847 - (789 + 55)];
						v75 = v75 + 1;
						v83 = v71[v75];
						v2440 = v83[6 - 4];
						v2439 = v81[v2440];
						v2438 = v81[v2440 + 2 + 0];
						if ((1249 <= 3024) and (v2438 > (0 - 0))) then
							if (v2439 > v81[v2440 + 1]) then
								v75 = v83[4 - 1];
							else
								v81[v2440 + 3] = v2439;
							end
						elseif (v2439 < v81[v2440 + 1 + 0]) then
							v75 = v83[8 - 5];
						else
							v81[v2440 + (1885 - (1492 + 390))] = v2439;
						end
					end
				elseif ((3379 > 1633) and (v84 <= (555 - 234))) then
					if (v84 <= (1260 - (312 + 681))) then
						if (v84 <= (2151 - (1255 + 656))) then
							if (v84 <= (1954 - (485 + 1242))) then
								if (v84 <= (45 + 175)) then
									if (v84 <= (506 - 289)) then
										if (v84 <= 215) then
											v81[v83[2 - 0]] = v81[v83[11 - 8]][v83[12 - 8]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[3 - 1]][v81[v83[1 + 2]]] = v81[v83[963 - (722 + 237)]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[718 - (77 + 639)]] = v81[v83[8 - 5]] + v83[19 - 15];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[3 - 1]] = v81[v83[8 - 5]] + v83[11 - 7];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[3]][v81[v83[4 + 0]]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[1 + 2];
										elseif (v84 == 216) then
											local v2453 = 1359 - (888 + 471);
											while true do
												if (v2453 == (1109 - (1034 + 75))) then
													v81[v83[1159 - (448 + 709)]] = v81[v83[1 + 2]][v81[v83[14 - 10]]];
													v75 = v75 + (1856 - (1643 + 212));
													v83 = v71[v75];
													v81[v83[482 - (320 + 160)]] = v83[6 - 3];
													v2453 = 2 - 1;
												end
												if ((v2453 == 1) or (4017 <= 3166)) then
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[3 - 1]] = v81[v83[139 - (114 + 22)]][v81[v83[1 + 3]]];
													v75 = v75 + (1060 - (89 + 970));
													v2453 = 1730 - (1083 + 645);
												end
												if (v2453 == (171 - (50 + 116))) then
													v83 = v71[v75];
													v81[v83[1964 - (1058 + 904)]] = v81[v83[6 - 3]][v81[v83[15 - 11]]];
													v75 = v75 + (3 - 2);
													v83 = v71[v75];
													v2453 = 6;
												end
												if ((1583 <= 2620) and (v2453 == (8 - 5))) then
													v81[v83[1 + 1]][v81[v83[199 - (94 + 102)]]] = v81[v83[4]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[2]] = v83[3];
													v2453 = 1268 - (735 + 529);
												end
												if (v2453 == (1153 - (875 + 276))) then
													v83 = v71[v75];
													v81[v83[981 - (461 + 518)]] = v81[v83[3 + 0]][v81[v83[11 - 7]]];
													v75 = v75 + (782 - (656 + 125));
													v83 = v71[v75];
													v2453 = 3;
												end
												if (v2453 == 4) then
													v75 = v75 + (2 - 1);
													v83 = v71[v75];
													v81[v83[2]] = v81[v83[851 - (532 + 316)]] + v81[v83[4]];
													v75 = v75 + (255 - (150 + 104));
													v2453 = 4 + 1;
												end
												if ((v2453 == (17 - 11)) or (3063 > 4794)) then
													v81[v83[1849 - (564 + 1283)]] = v83[3];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v75 = v83[8 - 5];
													break;
												end
											end
										else
											local v2454 = 0;
											while true do
												if ((2736 > 1647) and (v2454 == (1 + 1))) then
													v83 = v71[v75];
													v81[v83[2]] = v81[v83[1 + 2]][v81[v83[14 - 10]]];
													v75 = v75 + (1549 - (330 + 1218));
													v83 = v71[v75];
													v2454 = 2 + 1;
												end
												if (v2454 == (6 + 0)) then
													v81[v83[2]][v81[v83[3]]] = v81[v83[3 + 1]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v75 = v83[3 - 0];
													break;
												end
												if ((1010 < 4057) and (v2454 == (1 + 0))) then
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[2]] = v83[13 - 10];
													v75 = v75 + 1;
													v2454 = 1 + 1;
												end
												if (v2454 == (1572 - (511 + 1058))) then
													v81[v83[4 - 2]] = v81[v83[1501 - (1315 + 183)]][v81[v83[4]]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[2]] = v83[3];
													v2454 = 4;
												end
												if (v2454 == (542 - (233 + 309))) then
													v81[v83[2 - 0]] = v81[v83[656 - (267 + 386)]][v81[v83[9 - 5]]];
													v75 = v75 + (854 - (744 + 109));
													v83 = v71[v75];
													v81[v83[2]] = v81[v83[1553 - (1271 + 279)]][v81[v83[10 - 6]]];
													v2454 = 1645 - (642 + 1002);
												end
												if ((1000 < 2304) and (v2454 == (1868 - (643 + 1220)))) then
													v83 = v71[v75];
													v81[v83[5 - 3]] = v81[v83[3]][v81[v83[5 - 1]]];
													v75 = v75 + (1418 - (1063 + 354));
													v83 = v71[v75];
													v2454 = 836 - (739 + 91);
												end
												if ((v2454 == (6 - 2)) or (1042 > 4243)) then
													v75 = v75 + (1878 - (790 + 1087));
													v83 = v71[v75];
													v81[v83[2]] = v81[v83[3 + 0]][v81[v83[9 - 5]]];
													v75 = v75 + (3 - 2);
													v2454 = 12 - 7;
												end
											end
										end
									elseif (v84 <= 218) then
										v81[v83[6 - 4]] = v81[v83[10 - 7]] + v81[v83[4]];
										v75 = v75 + (150 - (82 + 67));
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[5 - 2]][v81[v83[1989 - (1835 + 150)]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[16 - (12 + 2)]] = v83[3];
										v75 = v75 + (1037 - (784 + 252));
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[5 - 2]][v81[v83[4 + 0]]];
										v75 = v75 + (1385 - (1134 + 250));
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[1 + 2]][v81[v83[6 - 2]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v61[v83[8 - 5]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[7 - 4]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[1983 - (1940 + 41)]] = v83[241 - (39 + 199)];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[5 - 2]] + v81[v83[6 - 2]];
										v75 = v75 + (1930 - (313 + 1616));
										v83 = v71[v75];
										v81[v83[6 - 4]] = v81[v83[3 - 0]];
									elseif (v84 == (445 - 226)) then
										local v2455;
										local v2456;
										local v2457;
										v81[v83[2]] = v81[v83[40 - (7 + 30)]][v83[1190 - (961 + 225)]];
										v75 = v75 + (4 - 3);
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[843 - (281 + 559)]] + v81[v83[11 - 7]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[3]] - v83[2 + 2];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[1 + 2]];
										v75 = v75 + (1441 - (102 + 1338));
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[2 + 1]];
										v75 = v75 + (442 - (319 + 122));
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[999 - (45 + 951)];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v2457 = v83[1 + 1];
										v2456 = v81[v2457];
										v2455 = v81[v2457 + 1 + 1];
										if (v2455 > 0) then
											if ((v2456 > v81[v2457 + (1 - 0)]) or (3108 <= 2052)) then
												v75 = v83[1 + 2];
											else
												v81[v2457 + 3] = v2456;
											end
										elseif (v2456 < v81[v2457 + 1 + 0]) then
											v75 = v83[3];
										else
											v81[v2457 + (1378 - (684 + 691))] = v2456;
										end
									else
										v81[v83[2]] = v83[3] ^ v81[v83[1648 - (1161 + 483)]];
									end
								elseif (v84 <= (1189 - (245 + 721))) then
									if (v84 <= (206 + 15)) then
										v81[v83[2 + 0]] = v61[v83[45 - (31 + 11)]];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[7 - 5]] = v61[v83[839 - (179 + 657)]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[329 - (150 + 177)]] = v81[v83[2 + 1]][v83[1209 - (142 + 1063)]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[1908 - (1346 + 559)]][v81[v83[4]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										do
											return v81[v83[1 + 1]];
										end
										v75 = v75 + 1;
										v83 = v71[v75];
										do
											return;
										end
									elseif (v84 == 222) then
										local v2470 = 0 - 0;
										while true do
											if (v2470 == (0 - 0)) then
												v81[v83[2 + 0]] = v83[1729 - (1695 + 31)];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[1440 - (1073 + 364)]][v81[v83[821 - (405 + 412)]]];
												v2470 = 1;
											end
											if (v2470 == (650 - (518 + 131))) then
												v75 = v75 + (1303 - (667 + 635));
												v83 = v71[v75];
												v81[v83[1 + 1]] = v61[v83[4 - 1]];
												v75 = v75 + 1;
												v2470 = 2;
											end
											if (v2470 == (1915 - (1397 + 513))) then
												v83 = v71[v75];
												v81[v83[2 - 0]] = v83[1078 - (454 + 621)];
												break;
											end
											if (v2470 == 3) then
												v81[v83[3 - 1]] = v81[v83[1 + 2]][v81[v83[9 - 5]]];
												v75 = v75 + (599 - (417 + 181));
												v83 = v71[v75];
												v81[v83[2 - 0]] = v81[v83[1 + 2]][v81[v83[14 - 10]]];
												v2470 = 19 - 15;
											end
											if (v2470 == (1122 - (995 + 125))) then
												v83 = v71[v75];
												v81[v83[4 - 2]] = v83[2 + 1];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v2470 = 1328 - (754 + 571);
											end
											if ((v2470 == (1 + 3)) or (1296 == 4060)) then
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[2]][v81[v83[2 + 1]]] = v81[v83[13 - 9]];
												v75 = v75 + 1 + 0;
												v2470 = 18 - 13;
											end
										end
									else
										local v2471 = 0;
										while true do
											if (v2471 == 1) then
												v81[v83[1 + 1]] = v83[1494 - (1141 + 350)];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v2471 = 1 + 1;
											end
											if (v2471 == 4) then
												v81[v83[5 - 3]][v81[v83[3]]] = v81[v83[1 + 3]];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v2471 = 5 + 0;
											end
											if (((1869 - (513 + 1356)) == v2471) or (2234 < 1197)) then
												v81[v83[1938 - (196 + 1740)]] = v81[v83[3 - 0]][v81[v83[3 + 1]]];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v2471 = 1;
											end
											if ((3 - 1) == v2471) then
												v81[v83[2 + 0]] = v81[v83[6 - 3]][v81[v83[1 + 3]]];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v2471 = 1634 - (362 + 1269);
											end
											if ((154 < 2530) and (v2471 == (7 - 4))) then
												v81[v83[39 - (26 + 11)]] = v81[v83[3]][v81[v83[2 + 2]]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v2471 = 1823 - (183 + 1636);
											end
											if ((3688 >= 963) and (v2471 == (4 + 1))) then
												v81[v83[2 + 0]] = v83[1233 - (1161 + 69)];
												break;
											end
										end
									end
								elseif ((v84 <= (1603 - (672 + 706))) or (1864 == 600)) then
									if (v84 > (55 + 169)) then
										local v2472;
										local v2473;
										local v2474;
										v81[v83[107 - (82 + 23)]] = v83[1524 - (100 + 1421)];
										v75 = v75 + (781 - (61 + 719));
										v83 = v71[v75];
										v81[v83[414 - (180 + 232)]] = v81[v83[3]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[4 - 1]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[1783 - (728 + 1053)]] = v83[3];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v2474 = v83[561 - (427 + 132)];
										v2473 = v81[v2474];
										v2472 = v81[v2474 + 2 + 0];
										if ((1320 == 1320) and (v2472 > (965 - (786 + 179)))) then
											if (v2473 > v81[v2474 + 1 + 0]) then
												v75 = v83[1 + 2];
											else
												v81[v2474 + (3 - 0)] = v2473;
											end
										elseif (v2473 < v81[v2474 + 1 + 0]) then
											v75 = v83[3];
										else
											v81[v2474 + (1927 - (1685 + 239))] = v2473;
										end
									else
										v81[v83[4 - 2]][v83[6 - 3]] = v81[v83[4]];
									end
								elseif (v84 > 226) then
									v81[v83[4 - 2]] = v81[v83[6 - 3]];
								else
									local v2491 = 0;
									while true do
										if ((4951 >= 1563) and (v2491 == 5)) then
											v81[v83[5 - 3]] = v81[v83[3 + 0]] + v83[1181 - (457 + 720)];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v2491 = 6;
										end
										if ((19 - 13) == v2491) then
											v81[v83[2]] = v83[3];
											break;
										end
										if (v2491 == (724 - (124 + 597))) then
											v81[v83[9 - 7]][v81[v83[3]]] = v81[v83[568 - (414 + 150)]];
											v75 = v75 + (4 - 3);
											v83 = v71[v75];
											v2491 = 833 - (592 + 237);
										end
										if (v2491 == 2) then
											v81[v83[2 + 0]] = v81[v83[3]][v81[v83[10 - 6]]];
											v75 = v75 + (614 - (122 + 491));
											v83 = v71[v75];
											v2491 = 13 - 10;
										end
										if (v2491 == (289 - (116 + 169))) then
											v81[v83[7 - 5]] = v81[v83[3 + 0]] + v83[4 + 0];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v2491 = 8 - 3;
										end
										if (v2491 == (0 + 0)) then
											v81[v83[1232 - (477 + 753)]] = v61[v83[3]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v2491 = 1 + 0;
										end
										if ((1 + 0) == v2491) then
											v81[v83[1 + 1]] = v81[v83[3]][v83[4 + 0]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v2491 = 2;
										end
									end
								end
							elseif (v84 <= 233) then
								if ((1291 < 4426) and (v84 <= (763 - 533))) then
									if (v84 <= (64 + 164)) then
										local v545 = 1377 - (649 + 728);
										local v546;
										while true do
											if ((918 - (478 + 434)) == v545) then
												do
													return v13(v81, v546, v546 + v83[5 - 2]);
												end
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v545 = 32 - 25;
											end
											if ((7 + 0) == v545) then
												v75 = v83[1563 - (1329 + 231)];
												break;
											end
											if ((4462 > 1837) and ((9 - 4) == v545)) then
												v75 = v75 + (1911 - (1523 + 387));
												v83 = v71[v75];
												v546 = v83[3 - 1];
												v545 = 4 + 2;
											end
											if ((4 == v545) or (217 >= 1513)) then
												v75 = v75 + (1308 - (1013 + 294));
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[1351 - (25 + 1323)]];
												v545 = 4 + 1;
											end
											if ((1980 > 362) and (v545 == 3)) then
												v75 = v75 + (1931 - (611 + 1319));
												v83 = v71[v75];
												v81[v83[2 + 0]] = v81[v83[5 - 2]];
												v545 = 4;
											end
											if ((2 + 0) == v545) then
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[2 + 1]];
												v545 = 5 - 2;
											end
											if ((1346 == 1346) and (v545 == (0 + 0))) then
												v546 = nil;
												v546 = v83[2];
												v81[v546] = v81[v546]();
												v545 = 1 + 0;
											end
											if (v545 == (817 - (353 + 463))) then
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[2]][v81[v83[3 + 0]]] = v81[v83[1065 - (605 + 456)]];
												v545 = 5 - 3;
											end
										end
									elseif (v84 > (1013 - (122 + 662))) then
										local v2492 = 1492 - (1184 + 308);
										local v2493;
										local v2494;
										local v2495;
										local v2496;
										while true do
											if (v2492 == (1173 - (445 + 723))) then
												v81[v2496] = v81[v2496](v13(v81, v2496 + (1641 - (1245 + 395)), v76));
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[1130 - (191 + 936)]];
												v2492 = 6;
											end
											if (v2492 == (6 - 3)) then
												v2496 = v83[2];
												v2494, v2495 = v74(v81[v2496](v13(v81, v2496 + (1 - 0), v83[1 + 2])));
												v76 = (v2495 + v2496) - (259 - (90 + 168));
												v2493 = 171 - (87 + 84);
												v2492 = 8 - 4;
											end
											if ((1705 == 1705) and (2 == v2492)) then
												v83 = v71[v75];
												v81[v83[714 - (176 + 536)]] = v83[3 + 0];
												v75 = v75 + (1699 - (858 + 840));
												v83 = v71[v75];
												v2492 = 3;
											end
											if ((2667 == 2667) and (v2492 == (661 - (447 + 213)))) then
												v75 = v75 + (1461 - (1458 + 2));
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[14 - 11]];
												v75 = v75 + (1 - 0);
												v2492 = 2;
											end
											if ((2579 == 2579) and (v2492 == (4 + 2))) then
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[1 + 1]] = v61[v83[7 - 4]];
												v75 = v75 + 1;
												v2492 = 487 - (248 + 232);
											end
											if (v2492 == 0) then
												v2493 = nil;
												v2494, v2495 = nil;
												v2496 = nil;
												v81[v83[232 - (109 + 121)]] = v61[v83[1 + 2]];
												v2492 = 1405 - (1288 + 116);
											end
											if (v2492 == (7 + 0)) then
												v83 = v71[v75];
												if v81[v83[2]] then
													v75 = v75 + (237 - (212 + 24));
												else
													v75 = v83[2 + 1];
												end
												break;
											end
											if ((v2492 == (3 + 1)) or (2363 < 1423)) then
												for v6995 = v2496, v76 do
													v2493 = v2493 + (1708 - (1175 + 532));
													v81[v6995] = v2494[v2493];
												end
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v2496 = v83[2];
												v2492 = 7 - 2;
											end
										end
									else
										v81[v83[2 + 0]] = v81[v83[3 + 0]][v81[v83[4]]];
										v75 = v75 + (570 - (252 + 317));
										v83 = v71[v75];
										v81[v83[2]] = v83[5 - 2];
										v75 = v75 + (804 - (738 + 65));
										v83 = v71[v75];
										v81[v83[559 - (410 + 147)]] = v81[v83[3]][v81[v83[904 - (272 + 628)]]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[5 - 3]] = v81[v83[3]][v81[v83[172 - (62 + 106)]]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2]] = v83[697 - (167 + 527)];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[3 - 1]] = v81[v83[4 - 1]][v81[v83[6 - 2]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[3]] * v81[v83[1070 - (326 + 740)]];
										v75 = v75 + (77 - (68 + 8));
										v83 = v71[v75];
										v81[v83[2]][v81[v83[1474 - (133 + 1338)]]] = v81[v83[10 - 6]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v83[2 + 1];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[2 + 1]] + v81[v83[4]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[1989 - (1930 + 57)]] = v83[1 + 2];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v75 = v83[3 + 0];
									end
								elseif ((v84 <= (1135 - (14 + 890))) or (3665 <= 1377)) then
									local v547 = 0 - 0;
									while true do
										if (v547 == 5) then
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[1 + 2]] + v83[9 - 5];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v547 = 27 - 21;
										end
										if (v547 == 1) then
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[1 + 1]] = v61[v83[12 - 9]];
											v75 = v75 + 1;
											v547 = 2;
										end
										if (v547 == (6 + 0)) then
											v81[v83[2]] = v83[1784 - (755 + 1026)];
											break;
										end
										if (v547 == 4) then
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[9 - 7]] = v81[v83[949 - (217 + 729)]] + v83[1 + 3];
											v75 = v75 + 1 + 0;
											v547 = 9 - 4;
										end
										if (v547 == 3) then
											v81[v83[5 - 3]] = v81[v83[3 + 0]][v81[v83[15 - 11]]];
											v75 = v75 + (1681 - (619 + 1061));
											v83 = v71[v75];
											v81[v83[1 + 1]][v81[v83[5 - 2]]] = v81[v83[4]];
											v547 = 140 - (108 + 28);
										end
										if (v547 == (1929 - (191 + 1736))) then
											v83 = v71[v75];
											v81[v83[765 - (757 + 6)]] = v81[v83[1 + 2]][v83[1259 - (337 + 918)]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v547 = 1 + 2;
										end
										if (v547 == (0 + 0)) then
											v81[v83[2]] = v81[v83[7 - 4]][v81[v83[1 + 3]]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[1679 - (754 + 922)]][v83[4]];
											v547 = 635 - (487 + 147);
										end
									end
								elseif (v84 > 232) then
									local v2516 = 0 - 0;
									while true do
										if (v2516 == (1572 - (825 + 744))) then
											v81[v83[1 + 1]] = v81[v83[3 + 0]][v81[v83[4]]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v2516 = 2 + 2;
										end
										if (v2516 == 6) then
											v81[v83[251 - (150 + 99)]] = v83[3 + 0];
											break;
										end
										if (v2516 == (1508 - (1335 + 168))) then
											v81[v83[941 - (256 + 683)]][v81[v83[321 - (33 + 285)]]] = v81[v83[12 - 8]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v2516 = 6;
										end
										if ((v2516 == (2 - 1)) or (137 == 3142)) then
											v81[v83[1 + 1]] = v81[v83[3 + 0]][v81[v83[951 - (776 + 171)]]];
											v75 = v75 + (264 - (244 + 19));
											v83 = v71[v75];
											v2516 = 2;
										end
										if ((5 - 1) == v2516) then
											v81[v83[408 - (8 + 398)]] = v81[v83[519 - (228 + 288)]] - v81[v83[4 - 0]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v2516 = 9 - 4;
										end
										if (v2516 == (0 + 0)) then
											v81[v83[590 - (434 + 154)]] = v81[v83[2 + 1]][v81[v83[8 - 4]]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v2516 = 3 - 2;
										end
										if (v2516 == 2) then
											v81[v83[2 - 0]] = v83[1 + 2];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v2516 = 3;
										end
									end
								else
									v81[v83[2]] = v83[1 + 2];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[1668 - (810 + 855)]][v81[v83[4 + 0]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[2 + 1];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[1616 - (463 + 1151)]] = v81[v83[3 + 0]][v81[v83[4]]];
									v75 = v75 + (1976 - (29 + 1946));
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[1 + 2]][v81[v83[4]]];
									v75 = v75 + (516 - (337 + 178));
									v83 = v71[v75];
									v81[v83[66 - (4 + 60)]] = v83[11 - 8];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1118 - (425 + 691)]] = v81[v83[2001 - (354 + 1644)]][v81[v83[845 - (499 + 342)]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[162 - (65 + 95)]] = v81[v83[3 + 0]][v81[v83[4]]];
									v75 = v75 + (1640 - (1403 + 236));
									v83 = v71[v75];
									v81[v83[1362 - (1117 + 243)]] = v81[v83[3]][v81[v83[246 - (67 + 175)]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[3 - 1]][v81[v83[3]]] = v81[v83[735 - (387 + 344)]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[976 - (654 + 320)]] = v83[4 - 1];
									v75 = v75 + (432 - (276 + 155));
									v83 = v71[v75];
									v81[v83[5 - 3]] = v81[v83[2 + 1]] + v81[v83[4]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[777 - (65 + 709)];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1746 - (884 + 860)]] = v81[v83[3 - 0]] + v81[v83[684 - (492 + 188)]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[6 - 4]] = v83[1 + 2];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[4 - 1]] + v81[v83[5 - 1]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 - 0]] = v81[v83[3]][v81[v83[4]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v83[1 + 2];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[6 - 4]] = v81[v83[1 + 2]][v81[v83[3 + 1]]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[1 + 1]] = v61[v83[1 + 2]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 - 0]] = v83[11 - 8];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[3 - 1]] = v81[v83[3]][v81[v83[1255 - (1190 + 61)]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[1696 - (1448 + 245)]][v81[v83[5 - 1]]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[5 - 3]][v81[v83[7 - 4]]] = v81[v83[6 - 2]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[825 - (528 + 295)]] = v83[3 - 0];
									v75 = v75 + (1348 - (1224 + 123));
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[640 - (97 + 540)]] + v81[v83[1972 - (484 + 1484)]];
									v75 = v75 + (1553 - (1398 + 154));
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[3]][v81[v83[4]]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2]] = v83[11 - 8];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[532 - (354 + 176)]] = v81[v83[3]][v81[v83[4]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[4 - 2]] = v83[1 + 2];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 - 0]] = v81[v83[2 + 1]][v81[v83[4]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1432 - (649 + 781)]] = v81[v83[3 + 0]][v81[v83[4]]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[5 - 3]][v81[v83[780 - (126 + 651)]]] = v81[v83[8 - 4]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v83[2 + 1];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[5 - 3]] = v81[v83[1 + 2]] + v81[v83[1 + 3]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1031 - (179 + 850)]] = v83[787 - (34 + 750)];
									v75 = v75 + (306 - (302 + 3));
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[3]] + v81[v83[4]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[1 + 2]][v81[v83[10 - 6]]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[3 - 1]] = v83[2 + 1];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[107 - (56 + 48)]][v81[v83[4]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[4 - 1];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[84 - (7 + 75)]] = v81[v83[3]][v81[v83[1 + 3]]];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[257 - (170 + 85)]] = v81[v83[352 - (288 + 61)]][v81[v83[4]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[3];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[3]][v81[v83[4]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[3]] + v81[v83[4]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2]][v81[v83[740 - (330 + 407)]]] = v81[v83[192 - (29 + 159)]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[8 - 6]] = v83[5 - 2];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[759 - (15 + 742)]] = v81[v83[453 - (414 + 36)]] + v81[v83[1510 - (745 + 761)]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[3]][v81[v83[3 + 1]]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[1082 - (126 + 953)];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1702 - (759 + 941)]] = v81[v83[2 + 1]][v81[v83[4]]];
									v75 = v75 + (1605 - (896 + 708));
									v83 = v71[v75];
									v81[v83[2]] = v83[1 + 2];
									v75 = v75 + (1578 - (555 + 1022));
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[144 - (14 + 127)]][v81[v83[1 + 3]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[797 - (141 + 654)]] = v81[v83[934 - (156 + 775)]][v81[v83[1594 - (167 + 1423)]]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2]] = v83[8 - 5];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[3]][v81[v83[4]]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[1883 - (1625 + 255)]] + v81[v83[4]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1 + 1]][v81[v83[1519 - (1026 + 490)]]] = v81[v83[4 + 0]];
									v75 = v75 + (1735 - (16 + 1718));
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[3 + 0];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[4 - 1]] + v81[v83[4]];
									v75 = v75 + (579 - (168 + 410));
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[3];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[8 - 6]] = v81[v83[810 - (134 + 673)]] + v81[v83[4 + 0]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[1910 - (1174 + 734)]] = v81[v83[3 - 0]][v81[v83[2 + 2]]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[4 - 2]] = v83[10 - 7];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 - 0]] = v81[v83[3]][v81[v83[2 + 2]]];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[11 - 8];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2 - 0]] = v81[v83[3]][v81[v83[4]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[5 - 3]] = v81[v83[3 + 0]][v81[v83[11 - 7]]];
									v75 = v75 + (513 - (289 + 223));
									v83 = v71[v75];
									v81[v83[3 - 1]] = v83[2 + 1];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[642 - (514 + 126)]] = v81[v83[2 + 1]][v81[v83[4 + 0]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 - 0]] = v81[v83[2 + 1]][v81[v83[4]]];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[2 + 0]][v81[v83[3]]] = v81[v83[3 + 1]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[4 - 2]] = v83[2 + 1];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[2 + 1]] + v81[v83[4]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[610 - (4 + 604)]] = v81[v83[9 - 6]][v81[v83[14 - 10]]];
									v75 = v75 + (4 - 3);
									v83 = v71[v75];
									v81[v83[2]] = v83[3 + 0];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[7 - 5]] = v81[v83[1448 - (344 + 1101)]][v81[v83[10 - 6]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[3 - 1]] = v81[v83[3 + 0]];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[8 - 6]] = v81[v83[3 - 0]][v81[v83[4 + 0]]];
								end
							elseif (v84 <= (537 - (57 + 244))) then
								if (v84 <= (226 + 8)) then
									v81[v83[2 + 0]] = v81[v83[8 - 5]] + v81[v83[4]];
									v75 = v75 + (1964 - (883 + 1080));
									v83 = v71[v75];
									v81[v83[202 - (138 + 62)]] = v81[v83[1 + 2]][v81[v83[4]]];
									v75 = v75 + (4 - 3);
									v83 = v71[v75];
									v81[v83[2]] = v83[86 - (62 + 21)];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3]][v81[v83[1453 - (1036 + 413)]]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[8 - 5]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[6 - 4]] = v81[v83[9 - 6]][v81[v83[5 - 1]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v61[v83[3]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[7 - 5]] = v81[v83[1475 - (649 + 823)]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[3 - 1]] = v83[3];
									v75 = v75 + (1564 - (1202 + 361));
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[10 - 7]] + v81[v83[7 - 3]];
								elseif (v84 == (1944 - (263 + 1446))) then
									v81[v83[2 + 0]] = v81[v83[3]][v81[v83[4]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[1 + 2];
									v75 = v75 + (744 - (387 + 356));
									v83 = v71[v75];
									v81[v83[2 - 0]] = v81[v83[10 - 7]][v81[v83[3 + 1]]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[1718 - (646 + 1070)]] = v81[v83[1 + 2]][v81[v83[4 + 0]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1 + 1]][v81[v83[11 - 8]]] = v81[v83[2 + 2]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[1099 - (288 + 809)]] = v83[1656 - (471 + 1182)];
									v75 = v75 + (1496 - (385 + 1110));
									v83 = v71[v75];
									v81[v83[1611 - (1201 + 408)]] = v81[v83[3]] + v81[v83[4]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[1850 - (747 + 1100)]][v81[v83[3 + 1]]];
									v75 = v75 + (612 - (269 + 342));
									v83 = v71[v75];
									v81[v83[2 - 0]] = v83[3];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[348 - (263 + 83)]] = v81[v83[3]][v81[v83[4]]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[6 - 4]] = v83[3];
									v75 = v75 + (822 - (659 + 162));
									v83 = v71[v75];
									v81[v83[5 - 3]] = v81[v83[218 - (109 + 106)]][v81[v83[5 - 1]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1167 - (1157 + 8)]] = v81[v83[3]][v81[v83[515 - (179 + 332)]]];
									v75 = v75 + (838 - (705 + 132));
									v83 = v71[v75];
									v81[v83[2 + 0]][v81[v83[1 + 2]]] = v81[v83[2 + 2]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[7 - 5]] = v83[3 + 0];
									v75 = v75 + (44 - (17 + 26));
									v83 = v71[v75];
									v81[v83[1964 - (1866 + 96)]] = v81[v83[3]] + v81[v83[1 + 3]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[3 - 1]] = v81[v83[6 - 3]][v81[v83[14 - 10]]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2]] = v83[1 + 2];
								else
									local v2626 = 0 - 0;
									while true do
										if ((1132 - (725 + 406)) == v2626) then
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[4 - 2]][v81[v83[1 + 2]]] = v81[v83[379 - (198 + 177)]];
											v75 = v75 + (2 - 1);
											v2626 = 2 - 0;
										end
										if ((1472 < 4542) and (v2626 == (0 + 0))) then
											v81[v83[6 - 4]] = v81[v83[1 + 2]][v83[1 + 3]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[3]][v81[v83[4]]];
											v2626 = 3 - 2;
										end
										if (v2626 == (1723 - (1082 + 638))) then
											v81[v83[2]] = v83[1365 - (1322 + 40)];
											break;
										end
										if ((v2626 == 2) or (924 >= 1912)) then
											v83 = v71[v75];
											v81[v83[4 - 2]] = v81[v83[1651 - (435 + 1213)]] + v83[4];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v2626 = 991 - (696 + 292);
										end
									end
								end
							elseif ((v84 <= (500 - 262)) or (340 >= 571)) then
								if (v84 > (1107 - 870)) then
									v81[v83[8 - 6]] = v83[12 - 9];
									v75 = v75 + (1466 - (731 + 734));
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[1574 - (1286 + 285)]][v81[v83[14 - 10]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v83[8 - 5];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[9 - 6]][v81[v83[4]]];
									v75 = v75 + (1262 - (1048 + 213));
									v83 = v71[v75];
									v81[v83[3 - 1]][v81[v83[1 + 2]]] = v81[v83[1 + 3]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1359 - (223 + 1134)]] = v83[3];
								else
									v81[v83[9 - 7]] = v81[v83[1884 - (982 + 899)]][v83[4 - 0]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3 - 0]][v83[2 + 2]];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[2 - 0]] = v81[v83[1486 - (310 + 1173)]][v81[v83[2 + 2]]];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[1453 - (968 + 483)]][v81[v83[227 - (37 + 187)]]] = v81[v83[1 + 3]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[496 - (204 + 290)]] = v81[v83[844 - (680 + 161)]] + v83[1 + 3];
								end
							elseif ((3065 == 3065) and (v84 == (1307 - (979 + 89)))) then
								v81[v83[1876 - (802 + 1072)]] = v81[v83[3]][v81[v83[12 - 8]]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[3]][v83[4]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2 + 0]] = v81[v83[2 + 1]][v81[v83[4]]];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								do
									return v81[v83[1 + 1]];
								end
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[3 - 1]] = v81[v83[1997 - (1413 + 581)]] + v83[1218 - (630 + 584)];
								v75 = v75 + (3 - 2);
								v83 = v71[v75];
								v81[v83[1130 - (184 + 944)]] = v81[v83[2 + 1]] + v83[4];
								v75 = v75 + (954 - (927 + 26));
								v83 = v71[v75];
								v81[v83[5 - 3]] = v83[643 - (284 + 356)];
							else
								v81[v83[2]] = v83[2 + 1];
							end
						elseif (v84 <= (578 - 325)) then
							if (v84 <= (197 + 49)) then
								if (v84 <= (160 + 83)) then
									if ((3257 > 1624) and (v84 <= (183 + 58))) then
										if (v83[1 + 1] <= v83[1132 - (211 + 917)]) then
											v75 = v75 + 1 + 0;
										else
											v75 = v83[1798 - (1151 + 644)];
										end
									elseif (v84 > (67 + 175)) then
										v81[v83[2 + 0]] = v81[v83[4 - 1]][v81[v83[1904 - (745 + 1155)]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[5 - 3]] = v83[317 - (27 + 287)];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[4 - 2]] = v81[v83[7 - 4]][v81[v83[10 - 6]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[3]][v81[v83[220 - (148 + 68)]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v83[2 + 1];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[1 + 2]][v81[v83[3 + 1]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1176 - (1064 + 110)]] = v81[v83[22 - (9 + 10)]][v81[v83[1 + 3]]];
										v75 = v75 + (1896 - (1219 + 676));
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[3]] * v81[v83[1145 - (130 + 1011)]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1973 - (1639 + 332)]][v81[v83[5 - 2]]] = v81[v83[4]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[251 - (229 + 19)];
										v75 = v75 + (124 - (21 + 102));
										v83 = v71[v75];
										v75 = v83[1188 - (931 + 254)];
									elseif (v81[v83[1 + 1]] <= v83[449 - (428 + 17)]) then
										v75 = v75 + (2 - 1);
									else
										v75 = v83[91 - (26 + 62)];
									end
								elseif (v84 <= (1324 - (173 + 907))) then
									local v563 = 0 + 0;
									while true do
										if (v563 == (4 + 5)) then
											v75 = v83[134 - (71 + 60)];
											break;
										end
										if ((v563 == (12 - 7)) or (1526 > 1822)) then
											v81[v83[1230 - (774 + 454)]] = v81[v83[3]][v81[v83[4]]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v563 = 6;
										end
										if ((1530 == 1530) and (v563 == 3)) then
											v81[v83[2]] = v81[v83[1605 - (849 + 753)]][v81[v83[10 - 6]]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v563 = 1220 - (861 + 355);
										end
										if (v563 == (5 - 1)) then
											v81[v83[1 + 1]] = v83[3];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v563 = 2 + 3;
										end
										if ((0 == v563) or (30 > 3885)) then
											v81[v83[4 - 2]] = v81[v83[3]][v81[v83[4]]];
											v75 = v75 + (1144 - (455 + 688));
											v83 = v71[v75];
											v563 = 1345 - (481 + 863);
										end
										if (v563 == (4 + 3)) then
											v81[v83[1 + 1]] = v81[v83[3]] + v81[v83[11 - 7]];
											v75 = v75 + (1969 - (896 + 1072));
											v83 = v71[v75];
											v563 = 21 - 13;
										end
										if ((1441 <= 3807) and (v563 == 1)) then
											v81[v83[1 + 1]] = v83[6 - 3];
											v75 = v75 + (789 - (50 + 738));
											v83 = v71[v75];
											v563 = 2 + 0;
										end
										if (v563 == (21 - 13)) then
											v81[v83[4 - 2]][v81[v83[1556 - (1128 + 425)]]] = v81[v83[1 + 3]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v563 = 9;
										end
										if (v563 == 2) then
											v81[v83[2]] = v81[v83[459 - (398 + 58)]][v81[v83[716 - (194 + 518)]]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v563 = 378 - (42 + 333);
										end
										if (v563 == 6) then
											v81[v83[1446 - (1308 + 136)]] = v81[v83[2 + 1]][v81[v83[4]]];
											v75 = v75 + (121 - (56 + 64));
											v83 = v71[v75];
											v563 = 703 - (251 + 445);
										end
									end
								elseif (v84 > 245) then
									local v2680 = 0 + 0;
									while true do
										if (v2680 == 2) then
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[3 + 0]][v81[v83[1573 - (999 + 570)]]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v2680 = 6 - 3;
										end
										if (v2680 == (7 - 3)) then
											v75 = v75 + (1700 - (1476 + 223));
											v83 = v71[v75];
											v81[v83[1838 - (597 + 1239)]] = v83[10 - 7];
											v75 = v75 + 1 + 0;
											v2680 = 889 - (590 + 294);
										end
										if (v2680 == (1 - 0)) then
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[791 - (433 + 356)]] = v81[v83[2 + 1]][v83[5 - 1]];
											v75 = v75 + (1257 - (791 + 465));
											v2680 = 1116 - (1048 + 66);
										end
										if (v2680 == 0) then
											v81[v83[1 + 1]] = v81[v83[3]][v83[4]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[12 - 9]][v81[v83[2001 - (666 + 1331)]]];
											v2680 = 1;
										end
										if (v2680 == (1905 - (854 + 1046))) then
											v83 = v71[v75];
											v75 = v83[8 - 5];
											break;
										end
										if (v2680 == (3 + 0)) then
											v81[v83[4 - 2]][v81[v83[3]]] = v81[v83[3 + 1]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[98 - (61 + 35)]] = v81[v83[14 - 11]] + v83[1 + 3];
											v2680 = 1822 - (1591 + 227);
										end
									end
								else
									local v2681;
									local v2682;
									local v2683;
									local v2684;
									local v2683, v2685;
									local v2686;
									v81[v83[3 - 1]] = v81[v83[3]];
									v75 = v75 + (792 - (173 + 618));
									v83 = v71[v75];
									v81[v83[1325 - (588 + 735)]] = v83[583 - (170 + 410)];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[7 - 4]] + v81[v83[2 + 2]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v83[555 - (362 + 190)];
									v75 = v75 + (849 - (529 + 319));
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[9 - 6]][v81[v83[3 + 1]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v2686 = v83[2];
									v2683, v2685 = v74(v81[v2686](v13(v81, v2686 + (1201 - (829 + 371)), v83[4 - 1])));
									v76 = (v2685 + v2686) - (1 + 0);
									v2684 = 1676 - (700 + 976);
									for v4253 = v2686, v76 do
										v2684 = v2684 + (2 - 1);
										v81[v4253] = v2683[v2684];
									end
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v2686 = v83[2 + 0];
									v2683, v2685 = v74(v81[v2686](v13(v81, v2686 + (1642 - (1137 + 504)), v76)));
									v76 = (v2685 + v2686) - 1;
									v2684 = 0 - 0;
									for v4256 = v2686, v76 do
										v2684 = v2684 + (2 - 1);
										v81[v4256] = v2683[v2684];
									end
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v2686 = v83[1 + 1];
									v2683 = {v81[v2686](v13(v81, v2686 + (1615 - (327 + 1287)), v76))};
									v2684 = 0 - 0;
									for v4259 = v2686, v83[5 - 1] do
										local v4260 = 0 + 0;
										while true do
											if (v4260 == 0) then
												v2684 = v2684 + (2 - 1);
												v81[v4259] = v2683[v2684];
												break;
											end
										end
									end
									v75 = v75 + (1114 - (224 + 889));
									v83 = v71[v75];
									v81[v83[1222 - (574 + 646)]] = v81[v83[610 - (83 + 524)]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[770 - (577 + 191)]] = v81[v83[3 + 0]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[801 - (248 + 551)]] = v81[v83[80 - (53 + 24)]] + v81[v83[137 - (12 + 121)]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[3 - 1]] = v83[609 - (164 + 442)];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[8 - 5]] - v81[v83[9 - 5]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v83[3 + 0];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[3]];
									v75 = v75 + (1248 - (585 + 662));
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[1 + 2]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[582 - (126 + 454)]] = v83[3];
									v75 = v75 + 1;
									v83 = v71[v75];
									v2686 = v83[416 - (366 + 48)];
									v2682 = v81[v2686];
									v2681 = v81[v2686 + (1685 - (1633 + 50))];
									if (v2681 > (1101 - (892 + 209))) then
										if ((v2682 > v81[v2686 + 1 + 0]) or (4674 < 852)) then
											v75 = v83[6 - 3];
										else
											v81[v2686 + (5 - 2)] = v2682;
										end
									elseif (v2682 < v81[v2686 + (661 - (495 + 165))]) then
										v75 = v83[8 - 5];
									else
										v81[v2686 + (7 - 4)] = v2682;
									end
								end
							elseif (v84 <= (82 + 167)) then
								if (v84 <= 247) then
									local v564;
									local v565;
									local v566;
									local v567;
									local v568;
									local v569;
									local v570;
									v81[v83[3 - 1]] = v81[v83[2 + 1]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[584 - (431 + 151)]] = v83[3 - 0];
									v75 = v75 + (16 - (10 + 5));
									v83 = v71[v75];
									v81[v83[424 - (403 + 19)]] = v81[v83[1774 - (454 + 1317)]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v570 = v83[1 + 1];
									v81[v570] = v81[v570]();
									v75 = v75 + (1815 - (187 + 1627));
									v83 = v71[v75];
									v570 = v83[2];
									v76 = (v570 + v82) - (1 + 0);
									for v883 = v570, v76 do
										local v884 = 0;
										while true do
											if (v884 == (1952 - (832 + 1120))) then
												v569 = v77[v883 - v570];
												v81[v883] = v569;
												break;
											end
										end
									end
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v570 = v83[1 + 1];
									do
										return v81[v570](v13(v81, v570 + (1097 - (1001 + 95)), v76));
									end
									v75 = v75 + (30 - (4 + 25));
									v83 = v71[v75];
									v570 = v83[1163 - (904 + 257)];
									do
										return v13(v81, v570, v76);
									end
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v570 = v83[1 + 1];
									v568 = {};
									for v885 = 1 - 0, #v80 do
										v567 = v80[v885];
										for v2713 = 0, #v567 do
											v566 = v567[v2713];
											v565 = v566[2 - 1];
											v564 = v566[2];
											if ((v565 == v81) and (v564 >= v570)) then
												v568[v564] = v565[v564];
												v566[4 - 3] = v568;
											end
										end
									end
									v75 = v75 + 1;
									v83 = v71[v75];
									do
										return;
									end
								elseif ((v84 > (179 + 69)) or (3111 == 1227)) then
									local v2717 = 0;
									local v2718;
									local v2719;
									local v2720;
									while true do
										if (v2717 == (10 - 3)) then
											v2718 = v81[v2720 + 2];
											if (v2718 > (1789 - (735 + 1054))) then
												if (v2719 > v81[v2720 + 1]) then
													v75 = v83[3];
												else
													v81[v2720 + (1696 - (418 + 1275))] = v2719;
												end
											elseif ((v2719 < v81[v2720 + 1 + 0]) or (1694 > 3965)) then
												v75 = v83[8 - 5];
											else
												v81[v2720 + (11 - 8)] = v2719;
											end
											break;
										end
										if (v2717 == 6) then
											v75 = v75 + (1473 - (784 + 688));
											v83 = v71[v75];
											v2720 = v83[6 - 4];
											v2719 = v81[v2720];
											v2717 = 15 - 8;
										end
										if (v2717 == (1250 - (374 + 875))) then
											v81[v2720] = v81[v2720]();
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[982 - (304 + 676)]][v81[v83[2 + 1]]] = v81[v83[1362 - (517 + 841)]];
											v2717 = 2;
										end
										if (v2717 == (870 - (356 + 510))) then
											v81[v83[2]] = v61[v83[3]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v2720 = v83[4 - 2];
											v2717 = 5;
										end
										if (v2717 == (1214 - (306 + 903))) then
											v81[v2720] = v81[v2720]();
											v75 = v75 + (1104 - (70 + 1033));
											v83 = v71[v75];
											v81[v83[2]] = v83[3];
											v2717 = 24 - 18;
										end
										if ((2517 > 827) and (v2717 == (2 + 1))) then
											v83 = v71[v75];
											v81[v83[2 + 0]] = #v81[v83[3]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v2717 = 808 - (523 + 281);
										end
										if (v2717 == (924 - (241 + 681))) then
											v75 = v75 + (1099 - (358 + 740));
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[11 - 8];
											v75 = v75 + (1042 - (1005 + 36));
											v2717 = 1 + 2;
										end
										if ((913 < 2866) and (v2717 == (702 - (533 + 169)))) then
											v2718 = nil;
											v2719 = nil;
											v2720 = nil;
											v2720 = v83[1 + 1];
											v2717 = 1;
										end
									end
								else
									local v2721;
									local v2722;
									local v2723;
									local v2724;
									local v2725;
									local v2726;
									local v2727;
									local v2728;
									local v2729;
									v2729 = v83[2 + 0];
									v2728 = {v81[v2729]()};
									v2727 = v83[1529 - (817 + 708)];
									v2726 = 0;
									for v4261 = v2729, v2727 do
										v2726 = v2726 + (2 - 1);
										v81[v4261] = v2728[v2726];
									end
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v61[v83[1701 - (636 + 1062)]] = v81[v83[2]];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[2 - 0]] = v81[v83[1661 - (1130 + 528)]];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[3]];
									v75 = v75 + (144 - (115 + 28));
									v83 = v71[v75];
									v2729 = v83[1 + 1];
									v2725 = {};
									for v4264 = 1382 - (1076 + 305), #v80 do
										v2724 = v80[v4264];
										for v4486 = 0, #v2724 do
											v2723 = v2724[v4486];
											v2722 = v2723[1770 - (1198 + 571)];
											v2721 = v2723[1519 - (629 + 888)];
											if ((v2722 == v81) and (v2721 >= v2729)) then
												v2725[v2721] = v2722[v2721];
												v2723[2 - 1] = v2725;
											end
										end
									end
								end
							elseif (v84 <= (86 + 165)) then
								if (v84 > 250) then
									local v2740 = v83[2 - 0];
									do
										return v81[v2740](v13(v81, v2740 + 1 + 0, v76));
									end
								elseif (v83[171 - (113 + 56)] < v83[1257 - (521 + 732)]) then
									v75 = v75 + (1 - 0);
								else
									v75 = v83[1541 - (99 + 1439)];
								end
							elseif ((v84 == (149 + 103)) or (1785 == 3150)) then
								local v2741;
								v81[v83[6 - 4]] = v81[v83[11 - 8]];
								v75 = v75 + (409 - (39 + 369));
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[3]];
								v75 = v75 + (1960 - (870 + 1089));
								v83 = v71[v75];
								v81[v83[797 - (564 + 231)]] = v81[v83[3]];
								v75 = v75 + (1922 - (1893 + 28));
								v83 = v71[v75];
								v2741 = v83[2];
								do
									return v81[v2741](v13(v81, v2741 + 1 + 0, v83[529 - (140 + 386)]));
								end
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v2741 = v83[1 + 1];
								do
									return v13(v81, v2741, v76);
								end
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v83[3];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1918 - (485 + 1431)]] = v81[v83[7 - 4]] + v81[v83[6 - 2]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v83[3 + 0];
							else
								v81[v83[7 - 5]] = v29(v72[v83[3]], nil, v62);
							end
						elseif (v84 <= (65 + 195)) then
							if (v84 <= (1437 - (945 + 236))) then
								if (v84 <= (624 - 370)) then
									local v582;
									v81[v83[1 + 1]] = v81[v83[6 - 3]][v81[v83[9 - 5]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v61[v83[3]];
									v75 = v75 + (514 - (383 + 130));
									v83 = v71[v75];
									v81[v83[905 - (643 + 260)]] = v81[v83[1450 - (109 + 1338)]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[13 - 10]];
									v75 = v75 + (745 - (338 + 406));
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[8 - 5]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v582 = v83[2];
									do
										return v81[v582](v13(v81, v582 + (476 - (20 + 455)), v83[12 - 9]));
									end
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v582 = v83[77 - (39 + 36)];
									do
										return v13(v81, v582, v76);
									end
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v83[3];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v75 = v83[1709 - (609 + 1097)];
								elseif (v84 == (913 - (543 + 115))) then
									local v2755;
									local v2756, v2757;
									local v2758;
									v81[v83[2 + 0]] = v81[v83[6 - 3]][v81[v83[6 - 2]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[5 - 3]] = v61[v83[3]];
									v75 = v75 + (1609 - (1559 + 49));
									v83 = v71[v75];
									v81[v83[624 - (317 + 305)]] = v81[v83[7 - 4]];
									v75 = v75 + (4 - 3);
									v83 = v71[v75];
									v81[v83[829 - (509 + 318)]] = v81[v83[1820 - (384 + 1433)]] + v83[4];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[5 - 3]] = v81[v83[1 + 2]][v83[17 - 13]];
									v75 = v75 + (1535 - (198 + 1336));
									v83 = v71[v75];
									v2758 = v83[1 + 1];
									v2756, v2757 = v74(v81[v2758](v13(v81, v2758 + (1406 - (1149 + 256)), v83[6 - 3])));
									v76 = (v2757 + v2758) - (1 - 0);
									v2755 = 1766 - (1280 + 486);
									for v4266 = v2758, v76 do
										v2755 = v2755 + (1 - 0);
										v81[v4266] = v2756[v2755];
									end
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v2758 = v83[2 + 0];
									v81[v2758] = v81[v2758](v13(v81, v2758 + (1609 - (786 + 822)), v76));
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[1 + 1]][v81[v83[2 + 1]]] = v81[v83[4]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1462 - (1303 + 157)]] = v81[v83[2 + 1]] + v83[1419 - (505 + 910)];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[870 - (548 + 320)]] = v81[v83[3]][v81[v83[595 - (52 + 539)]]];
								else
									v81[v83[557 - (378 + 177)]] = v81[v83[8 - 5]][v83[4]];
								end
							elseif (v84 <= (615 - 357)) then
								if (v84 > (166 + 91)) then
									v81[v83[2]] = v81[v83[210 - (108 + 99)]][v81[v83[3 + 1]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 - 0]] = v61[v83[12 - 9]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[3 - 1]] = v83[2 + 1];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[3]][v81[v83[9 - 5]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[3 - 1]] = v81[v83[2 + 1]][v81[v83[8 - 4]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1 + 1]][v81[v83[13 - 10]]] = v81[v83[4]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[842 - (823 + 16)];
									v75 = v75 + (279 - (19 + 259));
									v83 = v71[v75];
									v81[v83[1822 - (1780 + 40)]] = v81[v83[6 - 3]] + v81[v83[4]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v83[3];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[3 - 1]] = v81[v83[3]] + v81[v83[6 - 2]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[12 - 9];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v75 = v83[11 - 8];
								else
									local v2796 = v83[1 + 1];
									local v2797, v2798 = v74(v81[v2796](v13(v81, v2796 + (2 - 1), v83[8 - 5])));
									v76 = (v2798 + v2796) - (1 + 0);
									local v2799 = 1180 - (825 + 355);
									for v4269 = v2796, v76 do
										local v4270 = 0;
										while true do
											if ((2953 > 2726) and (v4270 == 0)) then
												v2799 = v2799 + (861 - (846 + 14));
												v81[v4269] = v2797[v2799];
												break;
											end
										end
									end
								end
							elseif (v84 == 259) then
								local v2800 = 0 + 0;
								while true do
									if ((v2800 == (9 - 3)) or (2803 < 1104)) then
										v81[v83[372 - (237 + 133)]] = v81[v83[1189 - (624 + 562)]][v81[v83[11 - 7]]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[805 - (700 + 102)];
										break;
									end
									if ((1682 >= 595) and (v2800 == 4)) then
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[5 - 2]] + v83[4];
										v75 = v75 + (2 - 1);
										v2800 = 5 + 0;
									end
									if (v2800 == 2) then
										v83 = v71[v75];
										v81[v83[2 - 0]] = v81[v83[7 - 4]][v81[v83[4]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v2800 = 3;
									end
									if (v2800 == (1276 - (735 + 541))) then
										v81[v83[842 - (497 + 343)]] = v81[v83[1786 - (995 + 788)]][v81[v83[12 - 8]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2 - 0]] = v81[v83[3]][v83[8 - 4]];
										v2800 = 199 - (37 + 161);
									end
									if (5 == v2800) then
										v83 = v71[v75];
										v81[v83[3 - 1]] = v81[v83[3]] + v83[4];
										v75 = v75 + 1;
										v83 = v71[v75];
										v2800 = 16 - 10;
									end
									if (v2800 == 1) then
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[6 - 3]][v83[4]];
										v75 = v75 + (1273 - (357 + 915));
										v2800 = 677 - (50 + 625);
									end
									if ((1883 - (1624 + 256)) == v2800) then
										v81[v83[3 - 1]][v81[v83[3 - 0]]] = v81[v83[4]];
										v75 = v75 + (1524 - (180 + 1343));
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[1345 - (1057 + 285)]] + v83[4];
										v2800 = 1 + 3;
									end
								end
							elseif (v81[v83[2]] ~= v83[7 - 3]) then
								v75 = v75 + 1;
							else
								v75 = v83[1406 - (135 + 1268)];
							end
						elseif (v84 <= (1684 - (1088 + 333))) then
							if (v84 <= (1943 - (1280 + 402))) then
								v81[v83[2 - 0]] = #v81[v83[3 + 0]];
							elseif (v84 > 262) then
								local v2801 = 0 + 0;
								while true do
									if ((4764 >= 1950) and (v2801 == (0 - 0))) then
										v81[v83[1 + 1]] = v81[v83[20 - (11 + 6)]][v81[v83[3 + 1]]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[7 - 5]] = v81[v83[3]][v83[1740 - (1015 + 721)]];
										v2801 = 2 - 1;
									end
									if ((245 - (169 + 73)) == v2801) then
										v81[v83[2]] = v83[3 - 0];
										break;
									end
									if ((v2801 == (1897 - (1052 + 844))) or (2986 > 4541)) then
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[3]][v83[4]];
										v75 = v75 + (17 - (5 + 11));
										v2801 = 2;
									end
									if (v2801 == (1517 - (210 + 1305))) then
										v83 = v71[v75];
										v81[v83[2]][v81[v83[2 + 1]]] = v81[v83[6 - 2]];
										v75 = v75 + (748 - (646 + 101));
										v83 = v71[v75];
										v2801 = 379 - (12 + 364);
									end
								end
							else
								local v2802 = 715 - (587 + 128);
								local v2803;
								local v2804;
								local v2805;
								local v2806;
								while true do
									if ((v2802 == (0 - 0)) or (3012 == 4961)) then
										v2803 = nil;
										v2804, v2805 = nil;
										v2806 = nil;
										v81[v83[2]] = v81[v83[6 - 3]][v81[v83[9 - 5]]];
										v75 = v75 + (228 - (196 + 31));
										v83 = v71[v75];
										v2802 = 1 + 0;
									end
									if (v2802 == (541 - (227 + 310))) then
										v83 = v71[v75];
										v2806 = v83[2 + 0];
										do
											return v81[v2806](v13(v81, v2806 + (774 - (689 + 84)), v76));
										end
										v75 = v75 + (1376 - (404 + 971));
										v83 = v71[v75];
										v2806 = v83[2];
										v2802 = 10 - 5;
									end
									if (v2802 == (1 + 4)) then
										do
											return v13(v81, v2806, v76);
										end
										v75 = v75 + (1398 - (764 + 633));
										v83 = v71[v75];
										v81[v83[2]] = v83[3 + 0];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v2802 = 6;
									end
									if ((2182 <= 3621) and (v2802 == (209 - (114 + 92)))) then
										v2806 = v83[2];
										v2804, v2805 = v74(v81[v2806](v13(v81, v2806 + 1 + 0, v83[532 - (4 + 525)])));
										v76 = (v2805 + v2806) - (1 - 0);
										v2803 = 0;
										for v7009 = v2806, v76 do
											local v7010 = 0 - 0;
											while true do
												if (v7010 == 0) then
													v2803 = v2803 + (1314 - (636 + 677));
													v81[v7009] = v2804[v2803];
													break;
												end
											end
										end
										v75 = v75 + (3 - 2);
										v2802 = 1358 - (447 + 907);
									end
									if ((3165 >= 2801) and (v2802 == (1799 - (303 + 1495)))) then
										v81[v83[5 - 3]] = v61[v83[8 - 5]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[4 - 2]] = v81[v83[1819 - (1446 + 370)]];
										v75 = v75 + (552 - (245 + 306));
										v83 = v71[v75];
										v2802 = 2 + 0;
									end
									if ((v2802 == (5 + 1)) or (4922 < 1477)) then
										v75 = v83[10 - 7];
										break;
									end
									if ((1 + 1) == v2802) then
										v81[v83[1 + 1]] = v81[v83[1476 - (536 + 937)]] + v83[10 - 6];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[154 - (143 + 9)]] = v81[v83[5 - 2]];
										v75 = v75 + (1075 - (474 + 600));
										v83 = v71[v75];
										v2802 = 3;
									end
								end
							end
						elseif (v84 <= (724 - 459)) then
							if ((v84 > (822 - 558)) or (2816 >= 3102)) then
								v81[v83[2 + 0]] = v81[v83[8 - 5]][v83[4]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2 + 0]] = v81[v83[3]][v83[4]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[3]][v81[v83[4]]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[1491 - (49 + 1439)]][v83[4]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[3]] + v81[v83[15 - 11]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1992 - (769 + 1221)]][v81[v83[1 + 2]]] = v81[v83[4]];
								v75 = v75 + (1073 - (270 + 802));
								v83 = v71[v75];
								v81[v83[1858 - (301 + 1555)]] = v81[v83[2 + 1]] + v83[1 + 3];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[77 - (22 + 53)]] = v81[v83[2 + 1]] + v83[19 - 15];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[4 - 2]] = v81[v83[1 + 2]][v81[v83[9 - 5]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2 + 0]] = v81[v83[1 + 2]][v83[96 - (41 + 51)]];
								v75 = v75 + (604 - (391 + 212));
								v83 = v71[v75];
								v81[v83[3 - 1]] = v81[v83[2 + 1]][v83[3 + 1]];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[2 - 0]] = v81[v83[3]][v81[v83[4]]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[4 - 2]] = v81[v83[1 + 2]][v83[14 - 10]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2 - 0]] = v81[v83[3]][v81[v83[4 + 0]]];
								v75 = v75 + (377 - (155 + 221));
								v83 = v71[v75];
								v81[v83[1 + 1]][v81[v83[1460 - (366 + 1091)]]] = v81[v83[4 + 0]];
								v75 = v75 + (287 - (90 + 196));
								v83 = v71[v75];
								v81[v83[2]] = v83[3];
							else
								local v2830 = 1774 - (1710 + 64);
								while true do
									if ((v2830 == (3 - 1)) or (1721 <= 1704)) then
										v83 = v71[v75];
										v81[v83[2]] = v83[14 - 11];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v2830 = 9 - 6;
									end
									if (v2830 == 1) then
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 - 0]] = v83[3];
										v75 = v75 + (1 - 0);
										v2830 = 269 - (72 + 195);
									end
									if (v2830 == (0 + 0)) then
										v81[v83[2]] = v81[v83[1181 - (28 + 1150)]][v81[v83[2 + 2]]];
										v75 = v75 + (599 - (102 + 496));
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[447 - (181 + 263)]][v81[v83[3 + 1]]];
										v2830 = 1;
									end
									if (v2830 == (2 + 1)) then
										if (v81[v83[7 - 5]] < v81[v83[3 + 1]]) then
											v75 = v75 + (1509 - (822 + 686));
										else
											v75 = v83[8 - 5];
										end
										break;
									end
								end
							end
						elseif (v84 == (650 - 384)) then
							local v2831 = 0 + 0;
							local v2832;
							while true do
								if (v2831 == (17 - 10)) then
									v75 = v75 + (862 - (252 + 609));
									v83 = v71[v75];
									if ((2308 == 2308) and (v81[v83[1 + 1]] == v83[3 + 1])) then
										v75 = v75 + (1 - 0);
									else
										v75 = v83[3];
									end
									break;
								end
								if ((v2831 == (960 - (578 + 380))) or (1272 >= 1469)) then
									v81[v83[1 + 1]] = v81[v83[3]];
									v75 = v75 + (1717 - (1431 + 285));
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[2 + 1]];
									v2831 = 4 - 1;
								end
								if (v2831 == 3) then
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v83[3];
									v75 = v75 + (1 - 0);
									v2831 = 15 - 11;
								end
								if (v2831 == (8 - 4)) then
									v83 = v71[v75];
									v81[v83[3 - 1]] = #v81[v83[1115 - (1013 + 99)]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v2831 = 962 - (449 + 508);
								end
								if (v2831 == 1) then
									v83 = v71[v75];
									v81[v83[2 - 0]] = v81[v83[1895 - (1562 + 330)]];
									v75 = v75 + (1973 - (1870 + 102));
									v83 = v71[v75];
									v2831 = 1 + 1;
								end
								if (v2831 == (5 + 0)) then
									v81[v83[2]] = v83[3 - 0];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2 + 0]] = #v81[v83[3 + 0]];
									v2831 = 3 + 3;
								end
								if (v2831 == 0) then
									v2832 = nil;
									v2832 = v83[1 + 1];
									v81[v2832] = v81[v2832]();
									v75 = v75 + 1;
									v2831 = 995 - (550 + 444);
								end
								if (v2831 == (2 + 4)) then
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v2832 = v83[2 + 0];
									v81[v2832] = v81[v2832](v13(v81, v2832 + 1 + 0, v83[2 + 1]));
									v2831 = 1 + 6;
								end
							end
						else
							v81[v83[2 - 0]] = v81[v83[583 - (544 + 36)]][v81[v83[1235 - (70 + 1161)]]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[759 - (130 + 627)]] = v61[v83[5 - 2]];
							v75 = v75 + (312 - (121 + 190));
							v83 = v71[v75];
							v81[v83[2]] = v83[11 - 8];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[8 - 6]] = v81[v83[325 - (255 + 67)]][v81[v83[3 + 1]]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[4 - 2]] = v81[v83[281 - (225 + 53)]][v81[v83[4 - 0]]];
							v75 = v75 + (1300 - (738 + 561));
							v83 = v71[v75];
							v81[v83[6 - 4]][v81[v83[3 + 0]]] = v81[v83[4]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[2 + 0]] = v83[1614 - (1450 + 161)];
							v75 = v75 + (1729 - (183 + 1545));
							v83 = v71[v75];
							v81[v83[1 + 1]] = v81[v83[1173 - (736 + 434)]] + v81[v83[4]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[2 + 0]] = v83[13 - 10];
						end
					elseif (v84 <= (333 - (32 + 7))) then
						if ((662 <= 4695) and (v84 <= (1096 - 816))) then
							if (v84 <= 273) then
								if (v84 <= (643 - (103 + 270))) then
									if ((v84 <= 268) or (2774 <= 520)) then
										v81[v83[1 + 1]] = v83[2 + 1];
										v75 = v75 + (1454 - (1021 + 432));
										v83 = v71[v75];
										v81[v83[7 - 5]] = v81[v83[1417 - (153 + 1261)]][v81[v83[1 + 3]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[890 - (800 + 88)]] = v61[v83[3]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v83[8 - 5];
										v75 = v75 + (822 - (358 + 463));
										v83 = v71[v75];
										v81[v83[260 - (176 + 82)]] = v81[v83[7 - 4]][v81[v83[774 - (543 + 227)]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[11 - 8]][v81[v83[4]]];
										v75 = v75 + (1787 - (1509 + 277));
										v83 = v71[v75];
										v81[v83[1962 - (1453 + 507)]][v81[v83[1 + 2]]] = v81[v83[15 - 11]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[7 - 5]] = v83[3];
										v75 = v75 + 1;
										v83 = v71[v75];
										v75 = v83[1 + 2];
									elseif (v84 == (35 + 234)) then
										v81[v83[4 - 2]] = v81[v83[1034 - (22 + 1009)]][v83[19 - 15]];
										v75 = v75 + (1941 - (245 + 1695));
										v83 = v71[v75];
										v81[v83[1037 - (611 + 424)]] = v81[v83[301 - (280 + 18)]][v81[v83[3 + 1]]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[4 - 2]] = v81[v83[3]][v83[282 - (109 + 169)]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[1 + 2]][v81[v83[2 + 2]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[7 - 5]] = v81[v83[3]][v83[9 - 5]];
										v75 = v75 + (1343 - (875 + 467));
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[13 - 10]][v81[v83[10 - 6]]];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[2]][v81[v83[3]]] = v81[v83[803 - (717 + 82)]];
										v75 = v75 + (1021 - (693 + 327));
										v83 = v71[v75];
										v81[v83[1913 - (746 + 1165)]] = v83[3];
									else
										v81[v83[1737 - (1473 + 262)]] = v81[v83[3]][v81[v83[4 + 0]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v61[v83[3]];
										v75 = v75 + (1874 - (874 + 999));
										v83 = v71[v75];
										v81[v83[5 - 3]] = v83[3 + 0];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[7 - 4]][v81[v83[4 + 0]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[12 - 9]][v81[v83[6 - 2]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]][v81[v83[3]]] = v81[v83[3 + 1]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v83[461 - (388 + 70)];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[3 + 0]] + v81[v83[3 + 1]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2]] = v83[1 + 2];
									end
								elseif (v84 <= (853 - (319 + 263))) then
									local v613 = 0 - 0;
									while true do
										if (v613 == (3 - 1)) then
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[2 + 1]][v81[v83[4]]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v613 = 817 - (94 + 720);
										end
										if (v613 == (382 - (78 + 300))) then
											v75 = v75 + (1918 - (774 + 1143));
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[194 - (18 + 173)]][v81[v83[10 - 6]]];
											v75 = v75 + (1 - 0);
											v613 = 12 - 7;
										end
										if ((29 - 23) == v613) then
											v81[v83[2]][v81[v83[1488 - (677 + 808)]]] = v81[v83[1 + 3]];
											v75 = v75 + (971 - (528 + 442));
											v83 = v71[v75];
											v81[v83[5 - 3]] = v83[350 - (116 + 231)];
											break;
										end
										if (v613 == (1 + 0)) then
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[7 - 5]] = v81[v83[1 + 2]][v81[v83[1474 - (1242 + 228)]]];
											v75 = v75 + (2 - 1);
											v613 = 2;
										end
										if ((3650 >= 369) and (v613 == (844 - (320 + 524)))) then
											v81[v83[4 - 2]] = v81[v83[3]][v81[v83[9 - 5]]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[13 - 10];
											v613 = 1;
										end
										if (v613 == (1 + 2)) then
											v81[v83[2]] = v83[7 - 4];
											v75 = v75 + (476 - (63 + 412));
											v83 = v71[v75];
											v81[v83[1866 - (1299 + 565)]] = v81[v83[3]][v81[v83[4]]];
											v613 = 11 - 7;
										end
										if ((871 <= 3913) and (v613 == (2 + 3))) then
											v83 = v71[v75];
											v81[v83[8 - 6]] = v81[v83[1 + 2]][v81[v83[4 + 0]]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v613 = 4 + 2;
										end
									end
								elseif (v84 > (945 - 673)) then
									v81[v83[330 - (79 + 249)]] = v81[v83[7 - 4]][v83[1634 - (305 + 1325)]];
									v75 = v75 + (1729 - (1585 + 143));
									v83 = v71[v75];
									v81[v83[6 - 4]] = v81[v83[3]][v81[v83[1834 - (1727 + 103)]]];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[2 + 0]][v81[v83[2 + 1]]] = v81[v83[12 - 8]];
									v75 = v75 + (275 - (135 + 139));
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[4 - 1]] + v83[4 + 0];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3]][v81[v83[1 + 3]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[5 - 3]] = v81[v83[3]][v83[4]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v61[v83[1707 - (1084 + 620)]];
									v75 = v75 + (1054 - (404 + 649));
									v83 = v71[v75];
									v81[v83[816 - (318 + 496)]] = v81[v83[1885 - (1730 + 152)]][v83[4]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[9 - 6]][v81[v83[4]]];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[1863 - (527 + 1334)]][v81[v83[2 + 1]]] = v81[v83[4]];
									v75 = v75 + (1947 - (464 + 1482));
									v83 = v71[v75];
									v81[v83[4 - 2]] = v83[3];
								else
									local v2900 = 0 + 0;
									while true do
										if ((571 - (485 + 84)) == v2900) then
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[3 + 0]][v81[v83[2 + 2]]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v2900 = 3 + 0;
										end
										if ((1 + 2) == v2900) then
											v81[v83[2]] = v83[7 - 4];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[5 - 3]] = v81[v83[1004 - (359 + 642)]][v81[v83[1 + 3]]];
											v2900 = 2 + 2;
										end
										if (v2900 == (1348 - (564 + 780))) then
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[1 + 1]][v81[v83[3]]] = v81[v83[2 + 2]];
											v75 = v75 + (1 - 0);
											v2900 = 5;
										end
										if (v2900 == (0 - 0)) then
											v81[v83[4 - 2]] = v81[v83[3]] + v81[v83[3 + 1]];
											v75 = v75 + (1427 - (909 + 517));
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[462 - (432 + 27)]][v81[v83[1740 - (69 + 1667)]]];
											v2900 = 1;
										end
										if ((3424 < 3498) and (v2900 == (1 + 0))) then
											v75 = v75 + (123 - (16 + 106));
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[1255 - (1178 + 74)];
											v75 = v75 + 1 + 0;
											v2900 = 6 - 4;
										end
										if (v2900 == (452 - (312 + 135))) then
											v83 = v71[v75];
											v75 = v83[2 + 1];
											break;
										end
									end
								end
							elseif (v84 <= (1 + 275)) then
								if (v84 <= (947 - 673)) then
									local v614 = 0 - 0;
									while true do
										if (v614 == (1829 - (492 + 1337))) then
											v81[v83[1 + 1]] = v61[v83[3 + 0]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v614 = 1;
										end
										if (v614 == (1391 - (814 + 576))) then
											v81[v83[3 - 1]] = v81[v83[7 - 4]][v83[4 + 0]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v614 = 5 - 3;
										end
										if (v614 == (2 + 3)) then
											v81[v83[2]] = v81[v83[1 + 2]][v81[v83[10 - 6]]];
											break;
										end
										if (v614 == (2 + 1)) then
											v81[v83[1 + 1]][v81[v83[8 - 5]]] = v81[v83[2 + 2]];
											v75 = v75 + (1360 - (978 + 381));
											v83 = v71[v75];
											v614 = 1 + 3;
										end
										if (v614 == (1 + 3)) then
											v81[v83[2]] = v81[v83[1 + 2]] + v83[2 + 2];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v614 = 2 + 3;
										end
										if ((1195 <= 4043) and (v614 == (5 - 3))) then
											v81[v83[2 + 0]] = v81[v83[6 - 3]][v81[v83[3 + 1]]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v614 = 3;
										end
									end
								elseif (v84 == (4 + 271)) then
									local v2901;
									local v2902;
									local v2903;
									v2903 = v83[571 - (397 + 172)];
									v81[v2903] = v81[v2903]();
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[1119 - (267 + 850)]] = v83[3 + 0];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[6 - 4]] = #v81[v83[3]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[996 - (41 + 953)]] = v83[12 - 9];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v2903 = v83[3 - 1];
									v2902 = v81[v2903];
									v2901 = v81[v2903 + (822 - (817 + 3))];
									if (v2901 > 0) then
										if ((3759 > 724) and (v2902 > v81[v2903 + (1386 - (867 + 518))])) then
											v75 = v83[3];
										else
											v81[v2903 + (8 - 5)] = v2902;
										end
									elseif (v2902 < v81[v2903 + (331 - (256 + 74))]) then
										v75 = v83[3 + 0];
									else
										v81[v2903 + 2 + 1] = v2902;
									end
								elseif ((v83[8 - 6] ~= v81[v83[191 - (111 + 76)]]) or (579 > 4048)) then
									v75 = v75 + 1 + 0;
								else
									v75 = v83[1054 - (100 + 951)];
								end
							elseif ((3689 == 3689) and (v84 <= 278)) then
								if (v84 == (902 - (369 + 256))) then
									local v2916 = 0 - 0;
									while true do
										if (v2916 == 6) then
											v75 = v83[1 + 2];
											break;
										end
										if ((1947 == 1947) and (v2916 == (66 - (25 + 38)))) then
											v81[v83[1038 - (890 + 146)]] = v81[v83[7 - 4]][v81[v83[4 + 0]]];
											v75 = v75 + (1585 - (549 + 1035));
											v83 = v71[v75];
											v2916 = 8 - 4;
										end
										if ((259 <= 597) and (v2916 == (2 + 3))) then
											v81[v83[2 + 0]] = v83[3];
											v75 = v75 + (962 - (546 + 415));
											v83 = v71[v75];
											v2916 = 6;
										end
										if (((1024 - (175 + 849)) == v2916) or (152 > 4109)) then
											v81[v83[1666 - (734 + 930)]] = v81[v83[1418 - (1093 + 322)]][v81[v83[15 - 11]]];
											v75 = v75 + (1302 - (1256 + 45));
											v83 = v71[v75];
											v2916 = 1846 - (66 + 1779);
										end
										if (v2916 == (1774 - (920 + 853))) then
											v81[v83[60 - (6 + 52)]] = v83[5 - 2];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v2916 = 4 - 2;
										end
										if (v2916 == (15 - 11)) then
											v81[v83[2]][v81[v83[3 + 0]]] = v81[v83[4]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v2916 = 92 - (11 + 76);
										end
										if (v2916 == (5 - 3)) then
											v81[v83[2]] = v81[v83[825 - (560 + 262)]][v81[v83[4 - 0]]];
											v75 = v75 + (1858 - (12 + 1845));
											v83 = v71[v75];
											v2916 = 3 + 0;
										end
									end
								else
									local v2917;
									v81[v83[1319 - (1278 + 39)]] = v61[v83[9 - 6]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v61[v83[5 - 2]];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[2]] = v83[3 + 0];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1538 - (385 + 1151)]] = #v81[v83[1453 - (240 + 1210)]];
									v75 = v75 + (1666 - (816 + 849));
									v83 = v71[v75];
									v81[v83[1856 - (99 + 1755)]] = v83[3];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v2917 = v83[2];
									do
										return v81[v2917](v13(v81, v2917 + 1, v83[787 - (424 + 360)]));
									end
									v75 = v75 + (1375 - (41 + 1333));
									v83 = v71[v75];
									v2917 = v83[547 - (161 + 384)];
									do
										return v13(v81, v2917, v76);
									end
									v75 = v75 + (932 - (355 + 576));
									v83 = v71[v75];
									do
										return;
									end
								end
							elseif (v84 > (966 - (348 + 339))) then
								v81[v83[9 - 7]] = v81[v83[3]][v83[4]];
								v75 = v75 + (4 - 3);
								v83 = v71[v75];
								v81[v83[470 - (285 + 183)]] = v81[v83[3]][v81[v83[9 - 5]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[1972 - (928 + 1042)]][v81[v83[1579 - (545 + 1031)]]] = v81[v83[11 - 7]];
								v75 = v75 + (3 - 2);
								v83 = v71[v75];
								v81[v83[2 - 0]] = v81[v83[928 - (345 + 580)]] + v83[4];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[312 - (136 + 173)]] + v83[1907 - (1448 + 455)];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[3]][v81[v83[4]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[3]][v83[4]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[4 - 2]] = v81[v83[1564 - (1137 + 424)]][v83[1931 - (372 + 1555)]];
								v75 = v75 + (382 - (174 + 207));
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[3]][v81[v83[3 + 1]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[73 - (65 + 6)]][v81[v83[3]]] = v81[v83[4]];
							else
								v81[v83[1313 - (1041 + 270)]] = v81[v83[4 - 1]][v81[v83[2 + 2]]];
								v75 = v75 + (3 - 2);
								v83 = v71[v75];
								v81[v83[1712 - (222 + 1488)]] = v83[3 + 0];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[1524 - (1023 + 499)]] = v81[v83[3]][v81[v83[4]]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[6 - 4]] = v81[v83[2 + 1]][v81[v83[11 - 7]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2 + 0]] = v83[2 + 1];
								v75 = v75 + (808 - (134 + 673));
								v83 = v71[v75];
								v81[v83[1059 - (810 + 247)]] = v81[v83[1463 - (753 + 707)]][v81[v83[9 - 5]]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[603 - (462 + 138)]][v81[v83[4 + 0]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[6 - 4]] = v81[v83[663 - (642 + 18)]][v81[v83[982 - (155 + 823)]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2 + 0]][v81[v83[3]]] = v81[v83[4 + 0]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]] = v83[1456 - (799 + 654)];
							end
						elseif ((v84 <= 287) or (1614 < 1429)) then
							if ((v84 <= (616 - 333)) or (2356 >= 4174)) then
								if (v84 <= (971 - 690)) then
									local v615;
									v81[v83[2]] = v61[v83[3 - 0]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[636 - (527 + 106)]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2 - 0]] = v83[3];
									v75 = v75 + 1;
									v83 = v71[v75];
									v615 = v83[2];
									v81[v615] = v81[v615](v13(v81, v615 + 1 + 0, v83[3 + 0]));
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									if ((v81[v83[1 + 1]] == v83[13 - 9]) or (3001 >= 3488)) then
										v75 = v75 + 1 + 0;
									else
										v75 = v83[736 - (589 + 144)];
									end
								elseif (v84 > (204 + 78)) then
									v81[v83[1 + 1]]();
								else
									local v2966 = 528 - (179 + 349);
									local v2967;
									local v2968;
									local v2969;
									while true do
										if (v2966 == (4 - 3)) then
											v81[v83[2]] = v61[v83[7 - 4]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v61[v83[2 + 1]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v2966 = 3 - 1;
										end
										if ((4 + 2) == v2966) then
											v81[v83[6 - 4]] = v83[3];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v75 = v83[3 + 0];
											break;
										end
										if ((2474 == 2474) and (v2966 == (0 + 0))) then
											v2967 = nil;
											v2968 = nil;
											v2969 = nil;
											v81[v83[488 - (242 + 244)]] = v61[v83[410 - (303 + 104)]];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v2966 = 1 + 0;
										end
										if (v2966 == (648 - (411 + 232))) then
											v81[v83[2 + 0]] = v81[v83[3]] + v83[1 + 3];
											v75 = v75 + 1;
											v83 = v71[v75];
											v61[v83[8 - 5]] = v81[v83[4 - 2]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v2966 = 2 + 4;
										end
										if (v2966 == (8 - 5)) then
											for v7015 = v2969, v83[485 - (164 + 317)] do
												v2967 = v2967 + (100 - (65 + 34));
												v81[v7015] = v2968[v2967];
											end
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[321 - (61 + 257)]];
											v75 = v75 + (1880 - (398 + 1481));
											v83 = v71[v75];
											v2966 = 4;
										end
										if ((886 > 364) and (v2966 == (3 - 1))) then
											v81[v83[4 - 2]] = v81[v83[3 + 0]] + v83[6 - 2];
											v75 = v75 + 1;
											v83 = v71[v75];
											v2969 = v83[688 - (338 + 348)];
											v2968 = {v81[v2969](v13(v81, v2969 + (1379 - (401 + 977)), v83[7 - 4]))};
											v2967 = 0 + 0;
											v2966 = 48 - (17 + 28);
										end
										if (4 == v2966) then
											v81[v83[187 - (27 + 158)]] = v81[v83[3]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2]] = v61[v83[1 + 2]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v2966 = 2 + 3;
										end
									end
								end
							elseif ((1614 <= 4287) and (v84 <= (1578 - (372 + 921)))) then
								if (v84 > (266 + 18)) then
									local v2970 = 483 - (350 + 133);
									local v2971;
									while true do
										if (v2970 == (1 + 0)) then
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v61[v83[1541 - (1432 + 106)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v2970 = 2 - 0;
										end
										if (v2970 == (5 + 1)) then
											v81[v83[1448 - (1075 + 371)]] = v81[v83[11 - 8]] + v81[v83[9 - 5]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[6 - 4]] = v83[3];
											break;
										end
										if (v2970 == 4) then
											do
												return v81[v2971](v13(v81, v2971 + 1 + 0, v83[3 + 0]));
											end
											v75 = v75 + (1548 - (234 + 1313));
											v83 = v71[v75];
											v2971 = v83[3 - 1];
											do
												return v13(v81, v2971, v76);
											end
											v2970 = 2 + 3;
										end
										if (v2970 == (910 - (597 + 311))) then
											v81[v83[29 - (13 + 14)]] = v81[v83[1 + 2]];
											v75 = v75 + (1054 - (713 + 340));
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[7 - 4]];
											v75 = v75 + 1 + 0;
											v2970 = 7 - 4;
										end
										if ((v2970 == (0 + 0)) or (1005 >= 3942)) then
											v2971 = nil;
											v81[v83[353 - (265 + 86)]] = v83[9 - 6];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[874 - (747 + 124)]][v81[v83[1460 - (692 + 764)]]];
											v2970 = 3 - 2;
										end
										if (v2970 == (3 + 2)) then
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[2]] = v83[2 + 1];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v2970 = 6;
										end
										if (v2970 == 3) then
											v83 = v71[v75];
											v81[v83[1032 - (283 + 747)]] = v81[v83[3]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v2971 = v83[2];
											v2970 = 909 - (816 + 89);
										end
									end
								else
									v81[v83[7 - 5]] = v81[v83[3]][v83[1 + 3]];
									v75 = v75 + (1079 - (709 + 369));
									v83 = v71[v75];
									v81[v83[7 - 5]] = v81[v83[6 - 3]][v81[v83[4]]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[1 + 1]][v81[v83[3 + 0]]] = v81[v83[4 + 0]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[701 - (478 + 221)]] = v81[v83[775 - (607 + 165)]] + v83[1248 - (1108 + 136)];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[4 - 2]] = v83[8 - 5];
									v75 = v75 + (637 - (352 + 284));
									v83 = v71[v75];
									v75 = v83[1 + 2];
								end
							elseif (v84 > 286) then
								local v2982 = 891 - (352 + 539);
								while true do
									if (v2982 == 4) then
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[7 - 5]] = v83[2 + 1];
										break;
									end
									if ((4569 > 1585) and (v2982 == (2 + 0))) then
										v83 = v71[v75];
										v81[v83[4 - 2]][v81[v83[3]]] = v81[v83[770 - (714 + 52)]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v2982 = 1816 - (1482 + 331);
									end
									if (v2982 == (1201 - (766 + 435))) then
										v81[v83[1 + 1]] = v81[v83[3]][v81[v83[4]]];
										v75 = v75 + (1820 - (62 + 1757));
										v83 = v71[v75];
										v81[v83[1370 - (833 + 535)]] = v83[3];
										v2982 = 1 + 0;
									end
									if (v2982 == (139 - (5 + 133))) then
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[3 + 0]][v81[v83[4]]];
										v75 = v75 + (521 - (393 + 127));
										v2982 = 1058 - (705 + 351);
									end
									if ((v2982 == 3) or (4375 <= 4311)) then
										v81[v83[1 + 1]] = v83[1 + 2];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[1160 - (414 + 743)]] + v81[v83[3 + 1]];
										v2982 = 476 - (65 + 407);
									end
								end
							else
								v81[v83[3 - 1]] = v81[v83[3]] + v81[v83[4]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[9 - 7]] = v81[v83[11 - 8]][v81[v83[1548 - (116 + 1428)]]];
								v75 = v75 + (4 - 3);
								v83 = v71[v75];
								v81[v83[2]] = v83[1305 - (79 + 1223)];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2 + 0]] = v81[v83[3]][v81[v83[392 - (353 + 35)]]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[3 - 1]] = v81[v83[7 - 4]][v81[v83[4]]];
								v75 = v75 + (1941 - (490 + 1450));
								v83 = v71[v75];
								v81[v83[2]] = v83[1349 - (778 + 568)];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2 + 0]] = v81[v83[1297 - (914 + 380)]][v81[v83[2 + 2]]];
								v75 = v75 + (533 - (126 + 406));
								v83 = v71[v75];
								v81[v83[1192 - (655 + 535)]] = v81[v83[1 + 2]][v81[v83[11 - 7]]];
								v75 = v75 + 1;
								v83 = v71[v75];
								if (v81[v83[5 - 3]] ~= v81[v83[9 - 5]]) then
									v75 = v75 + 1 + 0;
								else
									v75 = v83[1301 - (711 + 587)];
								end
							end
						elseif (v84 <= (1173 - (168 + 715))) then
							if (v84 <= (600 - 312)) then
								v81[v83[2 + 0]] = v62[v83[3 - 0]];
								v75 = v75 + (293 - (232 + 60));
								v83 = v71[v75];
								v81[v83[2 + 0]] = v81[v83[40 - (22 + 15)]][v83[8 - 4]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[4 - 2]] = v62[v83[1176 - (797 + 376)]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[3 + 0]][v83[4]];
								v75 = v75 + (4 - 3);
								v83 = v71[v75];
								v81[v83[2 + 0]] = v62[v83[3]];
								v75 = v75 + (4 - 3);
								v83 = v71[v75];
								v81[v83[5 - 3]] = v81[v83[10 - 7]][v83[1381 - (1071 + 306)]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[5 - 3]] = v62[v83[1194 - (412 + 779)]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								if ((2833 > 138) and not v81[v83[4 - 2]]) then
									v75 = v75 + (613 - (427 + 185));
								else
									v75 = v83[1654 - (1444 + 207)];
								end
							elseif ((2881 < 3596) and (v84 == 289)) then
								local v2997 = 0 - 0;
								while true do
									if (v2997 == (1 + 5)) then
										v81[v83[4 - 2]][v81[v83[3 - 0]]] = v81[v83[4]];
										v75 = v75 + (640 - (261 + 378));
										v83 = v71[v75];
										v81[v83[2]] = v83[1 + 2];
										v2997 = 1 + 6;
									end
									if (v2997 == (17 - 12)) then
										v83 = v71[v75];
										v81[v83[3 - 1]] = v81[v83[351 - (22 + 326)]] - v81[v83[13 - 9]];
										v75 = v75 + (1215 - (836 + 378));
										v83 = v71[v75];
										v2997 = 6;
									end
									if (v2997 == (1 + 1)) then
										v83 = v71[v75];
										v81[v83[5 - 3]] = v81[v83[5 - 2]][v81[v83[12 - 8]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v2997 = 1290 - (742 + 545);
									end
									if ((2 - 1) == v2997) then
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[1203 - (334 + 867)]] = v81[v83[3]][v81[v83[4]]];
										v75 = v75 + (2 - 1);
										v2997 = 1406 - (317 + 1087);
									end
									if ((415 == 415) and (v2997 == (2 + 6))) then
										v83 = v71[v75];
										v81[v83[2 - 0]] = v83[673 - (97 + 573)];
										break;
									end
									if (v2997 == 4) then
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[7 - 5]] = v81[v83[1 + 2]][v81[v83[4]]];
										v75 = v75 + 1 + 0;
										v2997 = 5;
									end
									if (v2997 == (0 - 0)) then
										v81[v83[2]] = v81[v83[3 + 0]][v81[v83[1339 - (1234 + 101)]]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[13 - 10];
										v2997 = 2 - 1;
									end
									if ((301 == 301) and (v2997 == (1207 - (711 + 489)))) then
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[7 - 5]] = v81[v83[3 + 0]] + v81[v83[7 - 3]];
										v75 = v75 + (2 - 1);
										v2997 = 650 - (483 + 159);
									end
									if (v2997 == (3 + 0)) then
										v81[v83[319 - (200 + 117)]] = v83[50 - (5 + 42)];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[3 + 0]][v81[v83[19 - 15]]];
										v2997 = 540 - (298 + 238);
									end
								end
							else
								local v2998 = 1821 - (1370 + 451);
								while true do
									if (v2998 == (0 + 0)) then
										v81[v83[1263 - (493 + 768)]] = v81[v83[1180 - (622 + 555)]][v83[623 - (581 + 38)]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v2998 = 2 - 1;
									end
									if (((4 - 3) == v2998) or (3040 <= 2497)) then
										v81[v83[1924 - (567 + 1355)]] = v81[v83[1567 - (801 + 763)]][v81[v83[1 + 3]]];
										v75 = v75 + (405 - (251 + 153));
										v83 = v71[v75];
										v2998 = 904 - (709 + 193);
									end
									if (v2998 == (1889 - (737 + 1150))) then
										v81[v83[1 + 1]] = v81[v83[1035 - (755 + 277)]][v83[465 - (182 + 279)]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v2998 = 363 - (323 + 37);
									end
									if (v2998 == (8 - 3)) then
										v75 = v83[3];
										break;
									end
									if ((1121 < 3804) and (v2998 == (1 + 2))) then
										v81[v83[1017 - (992 + 23)]] = v81[v83[2 + 1]] / v81[v83[11 - 7]];
										v75 = v75 + (646 - (269 + 376));
										v83 = v71[v75];
										v2998 = 4;
									end
									if (v2998 == (8 - 4)) then
										v81[v83[473 - (169 + 302)]][v81[v83[2 + 1]]] = v81[v83[1 + 3]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v2998 = 1332 - (623 + 704);
									end
								end
							end
						elseif (v84 <= (145 + 147)) then
							if ((v84 > (1108 - (420 + 397))) or (3298 == 3664)) then
								v81[v83[1 + 1]] = v61[v83[1 + 2]];
							else
								v81[v83[2]] = v81[v83[1 + 2]][v83[4]];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[9 - 7]] = v81[v83[11 - 8]][v83[3 + 1]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[8 - 5]][v81[v83[4]]];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[5 - 3]][v81[v83[6 - 3]]] = v81[v83[1062 - (440 + 618)]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1037 - (593 + 442)]] = v81[v83[3]] + v83[1 + 3];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[2]] = v83[1047 - (801 + 243)];
							end
						elseif (v84 == (798 - 505)) then
							local v3011 = v83[2];
							local v3012, v3013 = v74(v81[v3011](v13(v81, v3011 + (1 - 0), v76)));
							v76 = (v3013 + v3011) - 1;
							local v3014 = 0 - 0;
							for v4314 = v3011, v76 do
								v3014 = v3014 + 1 + 0;
								v81[v4314] = v3012[v3014];
							end
						else
							v81[v83[124 - (41 + 81)]] = v81[v83[10 - 7]][v83[510 - (145 + 361)]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[3 - 1]] = v81[v83[159 - (28 + 128)]][v83[6 - 2]];
							v75 = v75 + (1 - 0);
							v83 = v71[v75];
							v81[v83[1 + 1]][v81[v83[88 - (33 + 52)]]] = v81[v83[6 - 2]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[2]] = v83[3 + 0];
							v75 = v75 + 1;
							v83 = v71[v75];
							v75 = v83[14 - 11];
						end
					elseif ((v84 <= (1072 - 765)) or (3588 < 3558)) then
						if ((v84 <= (152 + 148)) or (1590 >= 1902)) then
							if (v84 <= (1643 - (1135 + 211))) then
								if (v84 <= (283 + 12)) then
									v81[v83[2]] = v81[v83[11 - 8]][v81[v83[2 + 2]]];
									v75 = v75 + (1096 - (380 + 715));
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[1971 - (462 + 1506)]][v83[4]];
									v75 = v75 + (1823 - (1182 + 640));
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[7 - 4]][v83[4]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]][v81[v83[10 - 7]]] = v81[v83[4]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[13 - 10];
								elseif (v84 == (109 + 187)) then
									local v3025 = 343 - (323 + 20);
									local v3026;
									local v3027;
									local v3028;
									local v3029;
									while true do
										if ((v3025 == (20 - 11)) or (3311 <= 2641)) then
											v83 = v71[v75];
											v3029 = v83[2 + 0];
											v81[v3029] = v81[v3029](v13(v81, v3029 + 1 + 0, v76));
											v75 = v75 + 1;
											v3025 = 22 - 12;
										end
										if (v3025 == (1177 - (769 + 405))) then
											v81[v83[7 - 5]] = v61[v83[88 - (9 + 76)]];
											v75 = v75 + (255 - (244 + 10));
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[1308 - (601 + 704)]];
											v3025 = 2 + 2;
										end
										if (v3025 == (523 - (23 + 499))) then
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[3]][v81[v83[310 - (35 + 271)]]];
											v75 = v75 + 1;
											v3025 = 2 - 0;
										end
										if (v3025 == (14 - 3)) then
											v81[v83[1 + 1]] = v83[3 + 0];
											break;
										end
										if ((1227 <= 2552) and (v3025 == 8)) then
											v76 = (v3028 + v3029) - (4 - 3);
											v3026 = 0 + 0;
											for v7018 = v3029, v76 do
												local v7019 = 0 + 0;
												while true do
													if (v7019 == (0 - 0)) then
														v3026 = v3026 + 1 + 0;
														v81[v7018] = v3027[v3026];
														break;
													end
												end
											end
											v75 = v75 + 1;
											v3025 = 7 + 2;
										end
										if (v3025 == 7) then
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v3029 = v83[5 - 3];
											v3027, v3028 = v74(v81[v3029](v13(v81, v3029 + (1876 - (1136 + 739)), v83[11 - 8])));
											v3025 = 15 - 7;
										end
										if (v3025 == (578 - (125 + 449))) then
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[881 - (96 + 783)]] = v83[1031 - (888 + 140)];
											v75 = v75 + 1 + 0;
											v3025 = 67 - (41 + 21);
										end
										if (v3025 == (597 - (570 + 17))) then
											v83 = v71[v75];
											v81[v83[2]][v81[v83[3]]] = v81[v83[2 + 2]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v3025 = 5 + 6;
										end
										if ((1630 == 1630) and (v3025 == (0 - 0))) then
											v3026 = nil;
											v3027, v3028 = nil;
											v3029 = nil;
											v81[v83[2]] = v83[3];
											v3025 = 1;
										end
										if ((2 == v3025) or (3809 < 2441)) then
											v83 = v71[v75];
											v81[v83[3 - 1]] = v81[v83[3]][v81[v83[15 - 11]]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v3025 = 3 + 0;
										end
										if (v3025 == 5) then
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[3]] + v81[v83[2 + 2]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v3025 = 761 - (321 + 434);
										end
										if (v3025 == (17 - 11)) then
											v81[v83[2]] = v83[2 + 1];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[1289 - (137 + 1149)]][v81[v83[8 - 4]]];
											v3025 = 1830 - (566 + 1257);
										end
									end
								else
									v81[v83[679 - (391 + 286)]] = v81[v83[3]] + v81[v83[4]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v83[1377 - (384 + 990)];
									v75 = v75 + (614 - (505 + 108));
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3 + 0]] + v81[v83[1301 - (549 + 748)]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[11 - 8]][v81[v83[1 + 3]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[5 - 3]][v81[v83[5 - 2]]] = v81[v83[9 - 5]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v75 = v83[3 + 0];
								end
							elseif (v84 <= (850 - 552)) then
								v81[v83[2]] = v81[v83[6 - 3]][v81[v83[696 - (205 + 487)]]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[5 - 3]] = v81[v83[1 + 2]][v81[v83[4]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[6 - 4]] = v83[1429 - (309 + 1117)];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[4 - 1]][v81[v83[4 + 0]]];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[78 - (50 + 26)]] = v81[v83[2 + 1]][v81[v83[4]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2 + 0]] = v83[3 + 0];
								v75 = v75 + (1819 - (520 + 1298));
								v83 = v71[v75];
								v81[v83[1062 - (420 + 640)]] = v81[v83[5 - 2]][v81[v83[4]]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[1584 - (15 + 1567)]] = v81[v83[3 + 0]][v81[v83[1 + 3]]];
								v75 = v75 + (1985 - (110 + 1874));
								v83 = v71[v75];
								v81[v83[2]][v81[v83[3 + 0]]] = v81[v83[786 - (101 + 681)]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[5 - 3]] = v83[3];
							elseif ((2117 <= 3909) and (v84 == 299)) then
								v81[v83[545 - (120 + 423)]] = v81[v83[8 - 5]][v81[v83[3 + 1]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]] = v83[3 + 0];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[5 - 3]] = v81[v83[48 - (41 + 4)]][v81[v83[4]]];
								v75 = v75 + (1084 - (246 + 837));
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[909 - (492 + 414)]][v81[v83[4]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[4 - 2]] = v83[3];
								v75 = v75 + (1050 - (829 + 220));
								v83 = v71[v75];
								v81[v83[2 + 0]] = v81[v83[3]][v81[v83[4]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[6 - 4]] = v81[v83[5 - 2]] - v81[v83[4]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[1497 - (345 + 1150)]][v81[v83[1360 - (1017 + 340)]]] = v81[v83[4]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2]] = v83[2 + 1];
								v75 = v75 + (3 - 2);
								v83 = v71[v75];
								v75 = v83[3];
							else
								local v3055 = 0 + 0;
								while true do
									if (v3055 == (0 + 0)) then
										v81[v83[1841 - (1279 + 560)]] = v81[v83[5 - 2]][v81[v83[2 + 2]]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[1465 - (140 + 1323)]] = v83[3];
										v75 = v75 + (1989 - (1607 + 381));
										v3055 = 1;
									end
									if (3 == v3055) then
										v81[v83[2 - 0]] = v81[v83[8 - 5]][v81[v83[198 - (162 + 32)]]];
										v75 = v75 + (605 - (440 + 164));
										v83 = v71[v75];
										v81[v83[3 - 1]] = v81[v83[3]][v81[v83[8 - 4]]];
										v75 = v75 + (1 - 0);
										v3055 = 5 - 1;
									end
									if (2 == v3055) then
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v83[3];
										v75 = v75 + (957 - (553 + 403));
										v83 = v71[v75];
										v3055 = 3;
									end
									if (v3055 == 4) then
										v83 = v71[v75];
										v81[v83[7 - 5]] = v81[v83[4 - 1]][v81[v83[4]]];
										v75 = v75 + (342 - (111 + 230));
										v83 = v71[v75];
										v81[v83[2 - 0]][v81[v83[12 - 9]]] = v81[v83[1 + 3]];
										v3055 = 5;
									end
									if ((v3055 == (1 + 0)) or (1508 > 3381)) then
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[341 - (85 + 253)]][v81[v83[1853 - (1558 + 291)]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[5 - 3]] = v81[v83[4 - 1]][v81[v83[1086 - (985 + 97)]]];
										v3055 = 4 - 2;
									end
									if (v3055 == 6) then
										v81[v83[2]] = v81[v83[616 - (424 + 189)]] + v81[v83[4 + 0]];
										v75 = v75 + (1024 - (19 + 1004));
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[2 + 1];
										break;
									end
									if ((4146 >= 3963) and (v3055 == (3 + 2))) then
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1347 - (231 + 1114)]] = v83[2 + 1];
										v75 = v75 + (1046 - (114 + 931));
										v83 = v71[v75];
										v3055 = 6 + 0;
									end
								end
							end
						elseif ((4865 > 600) and (v84 <= 303)) then
							if (v84 <= (437 - 136)) then
								local v664;
								local v665, v666;
								local v667;
								v81[v83[1 + 1]] = v61[v83[3]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[66 - (17 + 46)]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v83[8 - 5];
								v75 = v75 + (1037 - (931 + 105));
								v83 = v71[v75];
								v81[v83[1130 - (718 + 410)]] = v81[v83[1208 - (361 + 844)]] + v81[v83[1914 - (1760 + 150)]];
								v75 = v75 + (1568 - (917 + 650));
								v83 = v71[v75];
								v81[v83[183 - (104 + 77)]] = v83[3];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[3 - 0]] + v81[v83[6 - 2]];
								v75 = v75 + (265 - (53 + 211));
								v83 = v71[v75];
								v81[v83[2 + 0]] = v81[v83[7 - 4]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v667 = v83[7 - 5];
								v665, v666 = v74(v81[v667](v13(v81, v667 + (1301 - (282 + 1018)), v83[3 + 0])));
								v76 = (v666 + v667) - (515 - (162 + 352));
								v664 = 0 + 0;
								for v887 = v667, v76 do
									v664 = v664 + 1;
									v81[v887] = v665[v664];
								end
								v75 = v75 + 1;
								v83 = v71[v75];
								v667 = v83[931 - (22 + 907)];
								v81[v667] = v81[v667](v13(v81, v667 + (440 - (280 + 159)), v76));
								v75 = v75 + (1581 - (1064 + 516));
								v83 = v71[v75];
								v81[v83[5 - 3]][v81[v83[3 + 0]]] = v81[v83[4 + 0]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2 + 0]] = v83[1 + 2];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1907 - (1293 + 612)]] = v81[v83[2 + 1]] + v81[v83[4 - 0]];
								v75 = v75 + (3 - 2);
								v83 = v71[v75];
								v81[v83[2 + 0]] = v83[1754 - (782 + 969)];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[5 - 3]] = v81[v83[1671 - (1085 + 583)]] + v81[v83[4]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]] = v83[1463 - (229 + 1231)];
							elseif (v84 > (898 - 596)) then
								v81[v83[5 - 3]] = v81[v83[3]][v81[v83[13 - 9]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[147 - (48 + 97)]] = v83[1849 - (676 + 1170)];
								v75 = v75 + (1973 - (830 + 1142));
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[98 - (41 + 54)]][v81[v83[16 - 12]]];
								v75 = v75 + (1067 - (536 + 530));
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[5 - 2]][v81[v83[4]]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[7 - 5]] = v83[1258 - (1129 + 126)];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[454 - (282 + 170)]] = v81[v83[2 + 1]][v81[v83[4 + 0]]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[14 - 11]][v81[v83[1227 - (610 + 613)]]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[5 - 3]][v81[v83[1611 - (1182 + 426)]]] = v81[v83[1 + 3]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[1236 - (1210 + 24)]] = v83[2 + 1];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[1359 - (307 + 1050)]] = v81[v83[817 - (693 + 121)]] + v81[v83[288 - (267 + 17)]];
							elseif not v81[v83[2]] then
								v75 = v75 + (60 - (22 + 37));
							else
								v75 = v83[3];
							end
						elseif (v84 <= (581 - 276)) then
							if ((v84 > (138 + 166)) or (4846 < 1393)) then
								v81[v83[1449 - (391 + 1056)]] = v83[2 + 1] / v83[4];
							else
								local v3076 = 1576 - (1117 + 459);
								local v3077;
								local v3078;
								local v3079;
								local v3080;
								while true do
									if ((1797 < 4880) and (v3076 == (23 - 15))) then
										v83 = v71[v75];
										v75 = v83[3 + 0];
										break;
									end
									if ((4185 >= 360) and (v3076 == 6)) then
										v83 = v71[v75];
										v3080 = v83[2];
										do
											return v81[v3080](v13(v81, v3080 + (462 - (65 + 396)), v76));
										end
										v75 = v75 + (2 - 1);
										v3076 = 25 - 18;
									end
									if ((4317 >= 2568) and (v3076 == (1 + 0))) then
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v61[v83[3]];
										v75 = v75 + (1702 - (620 + 1081));
										v3076 = 1 + 1;
									end
									if (v3076 == (1880 - (845 + 1035))) then
										v3077 = nil;
										v3078, v3079 = nil;
										v3080 = nil;
										v81[v83[3 - 1]] = v81[v83[7 - 4]][v81[v83[1573 - (1348 + 221)]]];
										v3076 = 1;
									end
									if (v3076 == (1046 - (320 + 721))) then
										v76 = (v3079 + v3080) - (1958 - (1284 + 673));
										v3077 = 0;
										for v7020 = v3080, v76 do
											v3077 = v3077 + 1;
											v81[v7020] = v3078[v3077];
										end
										v75 = v75 + (2 - 1);
										v3076 = 6 + 0;
									end
									if (v3076 == (2 + 0)) then
										v83 = v71[v75];
										v81[v83[5 - 3]] = v81[v83[3]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v3076 = 3;
									end
									if ((2516 <= 3384) and (v3076 == (9 - 5))) then
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v3080 = v83[2];
										v3078, v3079 = v74(v81[v3080](v13(v81, v3080 + 1, v83[10 - 7])));
										v3076 = 11 - 6;
									end
									if (v3076 == (11 - 8)) then
										v81[v83[2 - 0]] = v81[v83[364 - (170 + 191)]] + v83[1746 - (209 + 1533)];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[1418 - (1049 + 367)]] = v81[v83[6 - 3]][v83[4]];
										v3076 = 14 - 10;
									end
									if (v3076 == (19 - 12)) then
										v83 = v71[v75];
										v3080 = v83[2 + 0];
										do
											return v13(v81, v3080, v76);
										end
										v75 = v75 + (2 - 1);
										v3076 = 16 - 8;
									end
								end
							end
						elseif (v84 > 306) then
							local v3081 = v83[2];
							v81[v3081](v13(v81, v3081 + 1 + 0, v83[3]));
						else
							v81[v83[2]] = v83[226 - (167 + 56)];
							v75 = v75 + (2 - 1);
							v83 = v71[v75];
							v81[v83[1 + 1]] = v81[v83[1 + 2]][v81[v83[5 - 1]]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[882 - (752 + 128)]] = v61[v83[3 + 0]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[20 - (7 + 11)]] = v83[3 + 0];
							v75 = v75 + (132 - (87 + 44));
							v83 = v71[v75];
							v81[v83[2]] = v81[v83[7 - 4]][v81[v83[12 - 8]]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[7 - 5]] = v81[v83[3]][v81[v83[1539 - (656 + 879)]]];
							v75 = v75 + (1 - 0);
							v83 = v71[v75];
							v81[v83[1 + 1]][v81[v83[7 - 4]]] = v81[v83[18 - 14]];
							v75 = v75 + (1083 - (529 + 553));
							v83 = v71[v75];
							v81[v83[2]] = v83[3];
						end
					elseif ((3517 >= 2244) and (v84 <= 314)) then
						if (v84 <= 310) then
							if (v84 <= 308) then
								local v689;
								local v690;
								local v689, v691;
								local v692;
								v81[v83[2 + 0]] = v81[v83[940 - (613 + 324)]][v81[v83[4]]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[1323 - (585 + 735)]][v83[4 - 0]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[2 + 1]];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[8 - 5]][v81[v83[4]]];
								v75 = v75 + (16 - (6 + 9));
								v83 = v71[v75];
								v81[v83[7 - 5]] = v61[v83[3]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[5 - 3]] = v81[v83[8 - 5]];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[462 - (59 + 401)]] = v81[v83[792 - (743 + 46)]] + v83[3 + 1];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[3 - 1]] = v81[v83[3]][v83[4]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v692 = v83[2 - 0];
								v689, v691 = v74(v81[v692](v13(v81, v692 + 1, v83[3 + 0])));
								v76 = (v691 + v692) - (538 - (285 + 252));
								v690 = 475 - (146 + 329);
								for v890 = v692, v76 do
									local v891 = 0;
									while true do
										if (v891 == (0 + 0)) then
											v690 = v690 + 1 + 0;
											v81[v890] = v689[v690];
											break;
										end
									end
								end
								v75 = v75 + 1;
								v83 = v71[v75];
								v692 = v83[1472 - (417 + 1053)];
								v689, v691 = v74(v81[v692](v13(v81, v692 + (1873 - (1251 + 621)), v76)));
								v76 = (v691 + v692) - 1;
								v690 = 0;
								for v892 = v692, v76 do
									local v893 = 0 + 0;
									while true do
										if ((3921 >= 2431) and (v893 == (0 - 0))) then
											v690 = v690 + (237 - (213 + 23));
											v81[v892] = v689[v690];
											break;
										end
									end
								end
								v75 = v75 + (745 - (617 + 127));
								v83 = v71[v75];
								v692 = v83[694 - (181 + 511)];
								v689 = {v81[v692](v13(v81, v692 + 1, v76))};
								v690 = 1289 - (107 + 1182);
								for v894 = v692, v83[1988 - (1623 + 361)] do
									local v895 = 0 + 0;
									while true do
										if ((4280 > 1264) and (v895 == (1821 - (325 + 1496)))) then
											v690 = v690 + (357 - (235 + 121));
											v81[v894] = v689[v690];
											break;
										end
									end
								end
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[4 - 2]] = v81[v83[2 + 1]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[7 - 5]] = v81[v83[6 - 3]];
								v75 = v75 + (50 - (28 + 21));
								v83 = v71[v75];
								v81[v83[4 - 2]] = v81[v83[2 + 1]] + v81[v83[691 - (630 + 57)]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[7 - 5]] = v81[v83[1 + 2]] - v83[4 + 0];
								v75 = v75 + (889 - (21 + 867));
								v83 = v71[v75];
								v81[v83[6 - 4]] = v83[1770 - (1555 + 212)];
							elseif (v84 == (294 + 15)) then
								local v3097 = 0 - 0;
								local v3098;
								while true do
									if (v3097 == (4 + 0)) then
										v75 = v75 + 1;
										v83 = v71[v75];
										v75 = v83[2 + 1];
										break;
									end
									if (v3097 == 1) then
										v83 = v71[v75];
										v3098 = v83[2];
										v81[v3098] = v81[v3098]();
										v3097 = 2;
									end
									if ((3 + 0) == v3097) then
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[5 - 3]] = v83[6 - 3];
										v3097 = 5 - 1;
									end
									if (v3097 == (0 - 0)) then
										v3098 = nil;
										v81[v83[4 - 2]] = v81[v83[2 + 1]][v81[v83[4]]];
										v75 = v75 + 1 + 0;
										v3097 = 2 - 1;
									end
									if ((3552 >= 311) and (v3097 == (1 + 1))) then
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[943 - (903 + 38)]][v81[v83[389 - (74 + 312)]]] = v81[v83[1324 - (837 + 483)]];
										v3097 = 4 - 1;
									end
								end
							else
								local v3099 = 0;
								local v3100;
								local v3101;
								local v3102;
								local v3103;
								while true do
									if (v3099 == (0 + 0)) then
										v3100 = nil;
										v3101, v3102 = nil;
										v3103 = nil;
										v81[v83[2 + 0]] = v83[2 + 1];
										v3099 = 1542 - (1455 + 86);
									end
									if (v3099 == 14) then
										v83 = v71[v75];
										v81[v83[826 - (803 + 21)]] = v83[4 - 1];
										break;
									end
									if (v3099 == (5 - 3)) then
										v83 = v71[v75];
										v81[v83[2 - 0]] = v81[v83[1 + 2]][v81[v83[4]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v3099 = 1 + 2;
									end
									if (v3099 == (26 - 14)) then
										v81[v83[2 + 0]] = v81[v83[3]] + v81[v83[10 - 6]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[901 - (497 + 402)]] = v83[991 - (578 + 410)];
										v3099 = 46 - 33;
									end
									if (v3099 == (1547 - (464 + 1079))) then
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1698 - (1398 + 298)]] = v83[4 - 1];
										v75 = v75 + 1 + 0;
										v3099 = 7 - 2;
									end
									if (v3099 == (1 + 2)) then
										v81[v83[1292 - (561 + 729)]] = v61[v83[1 + 2]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[1162 - (104 + 1055)]];
										v3099 = 1677 - (308 + 1365);
									end
									if ((2430 == 2430) and (v3099 == (557 - (500 + 47)))) then
										v83 = v71[v75];
										v3103 = v83[2];
										do
											return v13(v81, v3103, v76);
										end
										v75 = v75 + (1 - 0);
										v3099 = 11;
									end
									if (v3099 == (2 + 5)) then
										v75 = v75 + (1951 - (186 + 1764));
										v83 = v71[v75];
										v3103 = v83[2];
										v3101, v3102 = v74(v81[v3103](v13(v81, v3103 + 1 + 0, v83[3])));
										v3099 = 5 + 3;
									end
									if (v3099 == (12 - 7)) then
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[3]] + v81[v83[4]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v3099 = 3 + 3;
									end
									if (v3099 == (7 + 6)) then
										v75 = v75 + (1175 - (1133 + 41));
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[6 - 3]] + v81[v83[7 - 3]];
										v75 = v75 + 1;
										v3099 = 14;
									end
									if (v3099 == 6) then
										v81[v83[1895 - (1786 + 107)]] = v83[6 - 3];
										v75 = v75 + (1530 - (344 + 1185));
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[1 + 2]][v81[v83[699 - (72 + 623)]]];
										v3099 = 19 - 12;
									end
									if ((2239 >= 1108) and (v3099 == 9)) then
										v83 = v71[v75];
										v3103 = v83[2 + 0];
										do
											return v81[v3103](v13(v81, v3103 + (3 - 2), v76));
										end
										v75 = v75 + (1893 - (1093 + 799));
										v3099 = 10;
									end
									if ((v3099 == 8) or (2383 >= 4031)) then
										v76 = (v3102 + v3103) - (1 + 0);
										v3100 = 0 + 0;
										for v7023 = v3103, v76 do
											v3100 = v3100 + 1;
											v81[v7023] = v3101[v3100];
										end
										v75 = v75 + 1 + 0;
										v3099 = 9;
									end
									if (v3099 == (3 - 2)) then
										v75 = v75 + (1056 - (721 + 334));
										v83 = v71[v75];
										v81[v83[1864 - (1322 + 540)]] = v81[v83[3 + 0]][v81[v83[1376 - (575 + 797)]]];
										v75 = v75 + (1130 - (274 + 855));
										v3099 = 3 - 1;
									end
									if (v3099 == (1 + 10)) then
										v83 = v71[v75];
										v81[v83[3 - 1]] = v83[1 + 2];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v3099 = 12;
									end
								end
							end
						elseif (v84 <= (2121 - (986 + 823))) then
							if (v84 == (164 + 147)) then
								v81[v83[1015 - (872 + 141)]] = v81[v83[1 + 2]] + v81[v83[13 - 9]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[540 - (139 + 399)]] = v81[v83[3]][v81[v83[4 + 0]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[1704 - (1038 + 664)]] = v83[2 + 1];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[3]][v81[v83[4]]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[2]] = v61[v83[3]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[2]] = v83[3 + 0];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[5 - 3]] = v81[v83[577 - (388 + 186)]][v81[v83[490 - (421 + 65)]]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[3 + 0]][v81[v83[1267 - (604 + 659)]]];
								v75 = v75 + (1505 - (1267 + 237));
								v83 = v71[v75];
								v81[v83[183 - (112 + 69)]][v81[v83[4 - 1]]] = v81[v83[488 - (319 + 165)]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[1355 - (634 + 719)]] = v83[1042 - (248 + 791)];
							else
								local v3122 = 0;
								local v3123;
								local v3124;
								local v3125;
								while true do
									if ((v3122 == (0 + 0)) or (3672 >= 4823)) then
										v3123 = v83[2 + 0];
										v3124 = v81[v3123];
										v3122 = 1;
									end
									if (v3122 == (1086 - (888 + 197))) then
										v3125 = v83[11 - 8];
										for v7026 = 1, v3125 do
											v3124[v7026] = v81[v3123 + v7026];
										end
										break;
									end
								end
							end
						elseif (v84 == (677 - 364)) then
							v81[v83[7 - 5]] = v81[v83[3]][v81[v83[4]]];
							v75 = v75 + (3 - 2);
							v83 = v71[v75];
							v81[v83[1 + 1]] = v83[3];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[7 - 5]] = v81[v83[6 - 3]][v81[v83[4]]];
							v75 = v75 + (1 - 0);
							v83 = v71[v75];
							v81[v83[1968 - (1355 + 611)]] = v81[v83[3]][v81[v83[1 + 3]]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[1003 - (497 + 504)]][v81[v83[3 - 0]]] = v81[v83[2 + 2]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[2 + 0]] = v83[3];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[6 - 4]] = v81[v83[6 - 3]] + v81[v83[1261 - (1159 + 98)]];
							v75 = v75 + (1444 - (418 + 1025));
							v83 = v71[v75];
							v81[v83[9 - 7]] = v83[6 - 3];
						else
							local v3140;
							local v3141;
							local v3142;
							v81[v83[1795 - (297 + 1496)]] = v61[v83[5 - 2]];
							v75 = v75 + (944 - (547 + 396));
							v83 = v71[v75];
							v81[v83[4 - 2]] = v61[v83[2 + 1]];
							v75 = v75 + (2 - 1);
							v83 = v71[v75];
							v81[v83[1745 - (999 + 744)]] = v61[v83[2 + 1]];
							v75 = v75 + (501 - (324 + 176));
							v83 = v71[v75];
							v81[v83[2]] = v81[v83[1513 - (1171 + 339)]] + v83[951 - (492 + 455)];
							v75 = v75 + (1477 - (805 + 671));
							v83 = v71[v75];
							v81[v83[1315 - (265 + 1048)]] = v81[v83[3]] + v83[4];
							v75 = v75 + 1;
							v83 = v71[v75];
							v3142 = v83[1578 - (252 + 1324)];
							v3141 = {v81[v3142](v13(v81, v3142 + 1, v83[3 + 0]))};
							v3140 = 1570 - (544 + 1026);
							for v4317 = v3142, v83[4 + 0] do
								v3140 = v3140 + (1 - 0);
								v81[v4317] = v3141[v3140];
							end
							v75 = v75 + (663 - (217 + 445));
							v83 = v71[v75];
							v81[v83[2 + 0]] = v81[v83[943 - (492 + 448)]];
							v75 = v75 + (1433 - (1152 + 280));
							v83 = v71[v75];
							v81[v83[2 - 0]] = v81[v83[14 - 11]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[1 + 1]] = v81[v83[3]];
							v75 = v75 + (846 - (175 + 670));
							v83 = v71[v75];
							v81[v83[1 + 1]] = v81[v83[1656 - (1411 + 242)]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[695 - (678 + 15)]] = v61[v83[1 + 2]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[812 - (593 + 217)]] = v81[v83[7 - 4]] + v83[4 + 0];
							v75 = v75 + (1 - 0);
							v83 = v71[v75];
							v61[v83[493 - (112 + 378)]] = v81[v83[1549 - (952 + 595)]];
							v75 = v75 + (397 - (23 + 373));
							v83 = v71[v75];
							v81[v83[4 - 2]] = v83[8 - 5];
							v75 = v75 + 1;
							v83 = v71[v75];
							v75 = v83[3];
						end
					elseif (v84 <= 317) then
						if (v84 <= (277 + 38)) then
							v81[v83[1786 - (1102 + 682)]] = v81[v83[1 + 2]][v81[v83[1 + 3]]];
							v75 = v75 + (1384 - (118 + 1265));
							v83 = v71[v75];
							v81[v83[1101 - (725 + 374)]] = v81[v83[2 + 1]][v83[3 + 1]];
							v75 = v75 + (1999 - (1142 + 856));
							v83 = v71[v75];
							v81[v83[2 + 0]] = v81[v83[3 - 0]][v83[3 + 1]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[646 - (104 + 540)]] = v81[v83[965 - (496 + 466)]][v81[v83[4]]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							do
								return v81[v83[1 + 1]];
							end
							v75 = v75 + (1 - 0);
							v83 = v71[v75];
							v75 = v83[727 - (657 + 67)];
						elseif (v84 == (1540 - 1224)) then
							local v3166 = 1746 - (127 + 1619);
							local v3167;
							while true do
								if (v3166 == (0 - 0)) then
									v3167 = v83[1192 - (1069 + 121)];
									v76 = (v3167 + v82) - (1 + 0);
									v3166 = 1;
								end
								if (v3166 == 1) then
									for v7029 = v3167, v76 do
										local v7030 = 0;
										local v7031;
										while true do
											if (v7030 == (0 + 0)) then
												v7031 = v77[v7029 - v3167];
												v81[v7029] = v7031;
												break;
											end
										end
									end
									break;
								end
							end
						else
							local v3168 = 0;
							local v3169;
							local v3170;
							local v3171;
							local v3172;
							while true do
								if (v3168 == (0 - 0)) then
									v3169 = nil;
									v3170, v3171 = nil;
									v3172 = nil;
									v81[v83[5 - 3]] = v81[v83[1193 - (27 + 1163)]][v81[v83[6 - 2]]];
									v75 = v75 + 1;
									v3168 = 1;
								end
								if ((1160 - (371 + 788)) == v3168) then
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3]][v81[v83[3 + 1]]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2 + 0]] = v61[v83[3]];
									v3168 = 7 - 5;
								end
								if ((v3168 == 3) or (4057 < 522)) then
									v81[v83[1 + 1]] = v83[3];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[432 - (139 + 290)]] + v81[v83[1339 - (639 + 696)]];
									v75 = v75 + (2 - 1);
									v3168 = 6 - 2;
								end
								if (v3168 == (2 + 0)) then
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[506 - (156 + 348)]] = v81[v83[893 - (488 + 402)]];
									v75 = v75 + (203 - (186 + 16));
									v83 = v71[v75];
									v3168 = 326 - (119 + 204);
								end
								if (v3168 == (8 - 3)) then
									v3170, v3171 = v74(v81[v3172](v13(v81, v3172 + 1, v83[4 - 1])));
									v76 = (v3171 + v3172) - 1;
									v3169 = 0 - 0;
									for v7032 = v3172, v76 do
										v3169 = v3169 + 1 + 0;
										v81[v7032] = v3170[v3169];
									end
									v75 = v75 + (2 - 1);
									v3168 = 5 + 1;
								end
								if (v3168 == (1765 - (1709 + 50))) then
									v83 = v71[v75];
									v3172 = v83[2];
									do
										return v81[v3172](v13(v81, v3172 + (1330 - (249 + 1080)), v76));
									end
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v3168 = 7;
								end
								if ((v3168 == (458 - (155 + 296))) or (174 > 4566)) then
									v3172 = v83[2 + 0];
									do
										return v13(v81, v3172, v76);
									end
									break;
								end
								if (v3168 == (4 + 0)) then
									v83 = v71[v75];
									v81[v83[3 - 1]] = v81[v83[4 - 1]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v3172 = v83[6 - 4];
									v3168 = 3 + 2;
								end
							end
						end
					elseif (v84 <= (84 + 235)) then
						if (v84 > (723 - 405)) then
							local v3173;
							v81[v83[1 + 1]] = v81[v83[8 - 5]][v81[v83[8 - 4]]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[700 - (604 + 94)]] = v81[v83[3]][v81[v83[1 + 3]]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v3173 = v83[1805 - (500 + 1303)];
							v81[v3173] = v81[v3173]();
							v75 = v75 + (1521 - (916 + 604));
							v83 = v71[v75];
							v81[v83[1 + 1]][v81[v83[2 + 1]]] = v81[v83[15 - 11]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[2 + 0]] = v83[3];
						else
							local v3185 = 0 + 0;
							while true do
								if (v3185 == (1479 - (754 + 721))) then
									v75 = v75 + (507 - (181 + 325));
									v83 = v71[v75];
									v81[v83[3 - 1]][v81[v83[1 + 2]]] = v81[v83[1414 - (413 + 997)]];
									v75 = v75 + (2 - 1);
									v3185 = 7 - 2;
								end
								if ((499 < 4517) and (v3185 == (2 + 0))) then
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[3];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v3185 = 9 - 6;
								end
								if (v3185 == (16 - 9)) then
									v75 = v75 + 1;
									v83 = v71[v75];
									v75 = v83[3];
									break;
								end
								if (v3185 == (1747 - (708 + 1033))) then
									v81[v83[2]] = v81[v83[3]] + v81[v83[2 + 2]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 - 0]] = v83[1 + 2];
									v3185 = 7;
								end
								if (((11 - 6) == v3185) or (3991 <= 517)) then
									v83 = v71[v75];
									v81[v83[2]] = v83[3];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v3185 = 1 + 5;
								end
								if (v3185 == (1657 - (505 + 1152))) then
									v81[v83[2 + 0]] = v83[2 + 1];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[3 - 0]][v81[v83[4]]];
									v3185 = 1;
								end
								if (v3185 == 1) then
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[3 - 1]] = v61[v83[1526 - (53 + 1470)]];
									v75 = v75 + (1005 - (482 + 522));
									v3185 = 2;
								end
								if (v3185 == 3) then
									v81[v83[648 - (496 + 150)]] = v81[v83[3 - 0]][v81[v83[89 - (32 + 53)]]];
									v75 = v75 + (1811 - (956 + 854));
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3]][v81[v83[4]]];
									v3185 = 1 + 3;
								end
							end
						end
					elseif ((3728 > 1672) and (v84 == (605 - 285))) then
						if (v81[v83[1 + 1]] == v81[v83[11 - 7]]) then
							v75 = v75 + (1894 - (1192 + 701));
						else
							v75 = v83[1624 - (326 + 1295)];
						end
					else
						local v3186 = 1812 - (1595 + 217);
						while true do
							if (v3186 == (219 - (93 + 123))) then
								v81[v83[1838 - (848 + 988)]] = v81[v83[1563 - (546 + 1014)]] + v81[v83[4]];
								v75 = v75 + 1;
								v83 = v71[v75];
								do
									return v81[v83[3 - 1]];
								end
								break;
							end
							if (v3186 == (0 + 0)) then
								v81[v83[76 - (53 + 21)]] = v81[v83[294 - (167 + 124)]] * v83[184 - (4 + 176)];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[5 - 3]] = v81[v83[9 - 6]] + v81[v83[3 + 1]];
								v3186 = 1 + 0;
							end
							if ((v3186 == (2 + 0)) or (2544 >= 4108)) then
								v83 = v71[v75];
								v81[v83[2 + 0]] = v81[v83[3]] + v81[v83[7 - 3]];
								v75 = v75 + (120 - (93 + 26));
								v83 = v71[v75];
								v3186 = 3 + 0;
							end
							if (v3186 == 1) then
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2 - 0]] = v81[v83[2 + 1]] * v83[3 + 1];
								v75 = v75 + 1 + 0;
								v3186 = 1656 - (220 + 1434);
							end
						end
					end
				elseif (v84 <= (1189 - 814)) then
					if (v84 <= (715 - 367)) then
						if (v84 <= (1181 - 847)) then
							if (v84 <= 327) then
								if ((v84 <= (1926 - (906 + 696))) or (1305 > 1314)) then
									if (v84 <= 322) then
										v81[v83[2]] = v81[v83[6 - 3]] + v81[v83[2 + 2]];
										v75 = v75 + (680 - (178 + 501));
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[14 - 11]][v81[v83[1 + 3]]];
										v75 = v75 + (1028 - (444 + 583));
										v83 = v71[v75];
										v81[v83[2 - 0]] = v83[3];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[431 - (407 + 22)]] = v81[v83[3]][v81[v83[7 - 3]]];
										v75 = v75 + (1233 - (1139 + 93));
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[1347 - (237 + 1107)]][v81[v83[2 + 2]]];
										v75 = v75 + (12 - (4 + 7));
										v83 = v71[v75];
										v81[v83[7 - 5]] = v83[516 - (8 + 505)];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[3 + 0]][v81[v83[2 + 2]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										if (v81[v83[2 + 0]] == v81[v83[2 + 2]]) then
											v75 = v75 + (936 - (662 + 273));
										else
											v75 = v83[1 + 2];
										end
									elseif (v84 > (323 + 0)) then
										local v3188 = 0 - 0;
										while true do
											if (v3188 == 6) then
												v81[v83[2]] = v81[v83[3]] + v83[248 - (127 + 117)];
												v75 = v75 + (208 - (105 + 102));
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[7 - 4];
												break;
											end
											if (v3188 == (1 + 3)) then
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[9 - 7]] = v81[v83[9 - 6]] + v81[v83[4]];
												v75 = v75 + (747 - (588 + 158));
												v3188 = 1085 - (126 + 954);
											end
											if (v3188 == (9 - 6)) then
												v81[v83[2]] = v81[v83[346 - (52 + 291)]][v83[4]];
												v75 = v75 + (279 - (76 + 202));
												v83 = v71[v75];
												v81[v83[2 + 0]] = v81[v83[849 - (504 + 342)]][v81[v83[3 + 1]]];
												v3188 = 4;
											end
											if ((74 < 1626) and (v3188 == 0)) then
												v81[v83[5 - 3]] = v81[v83[2 + 1]][v81[v83[9 - 5]]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[482 - (387 + 93)]] = v81[v83[6 - 3]][v83[7 - 3]];
												v3188 = 1;
											end
											if ((389 < 1530) and (v3188 == (1 + 1))) then
												v83 = v71[v75];
												v81[v83[5 - 3]] = v81[v83[3 + 0]][v81[v83[943 - (36 + 903)]]];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v3188 = 1 + 2;
											end
											if (v3188 == (263 - (220 + 42))) then
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v81[v83[1507 - (300 + 1205)]] = v81[v83[9 - 6]][v83[4]];
												v75 = v75 + (923 - (728 + 194));
												v3188 = 659 - (445 + 212);
											end
											if (v3188 == (18 - 13)) then
												v83 = v71[v75];
												v81[v83[2]][v81[v83[2 + 1]]] = v81[v83[4]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v3188 = 1363 - (167 + 1190);
											end
										end
									else
										v75 = v83[3];
									end
								elseif (v84 <= (969 - (315 + 329))) then
									local v736;
									v81[v83[2 + 0]] = v81[v83[2 + 1]];
									v75 = v75 + (651 - (545 + 105));
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[1 + 2]] - v83[4 + 0];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v736 = v83[2];
									v81[v736] = v81[v736](v13(v81, v736 + (1 - 0), v83[6 - 3]));
									v75 = v75 + (1190 - (1044 + 145));
									v83 = v71[v75];
									v81[v83[4 - 2]] = v81[v83[1253 - (122 + 1128)]] / v83[4];
									v75 = v75 + (1816 - (371 + 1444));
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[19 - (14 + 2)]] + v81[v83[1 + 3]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[3 - 1]] = v81[v83[4 - 1]] * v81[v83[3 + 1]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									do
										return v81[v83[6 - 4]];
									end
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v75 = v83[7 - 4];
								elseif ((501 <= 1701) and (v84 > (1098 - 772))) then
									v81[v83[9 - 7]] = v81[v83[1 + 2]][v83[1 + 3]];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[5 - 2]][v83[153 - (50 + 99)]];
									v75 = v75 + (440 - (123 + 316));
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3]][v81[v83[6 - 2]]];
									v75 = v75 + (1583 - (1507 + 75));
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[597 - (145 + 449)]][v83[4]];
									v75 = v75 + (1112 - (241 + 870));
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[8 - 5]][v81[v83[15 - 11]]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[759 - (627 + 130)]][v81[v83[148 - (82 + 63)]]] = v81[v83[4 + 0]];
									v75 = v75 + (1285 - (386 + 898));
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[9 - 6];
								else
									local v3203 = 0 + 0;
									local v3204;
									local v3205;
									local v3206;
									local v3207;
									local v3208;
									while true do
										if (v3203 == (5 + 1)) then
											v83 = v71[v75];
											v81[v83[971 - (659 + 310)]] = {};
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[605 - (364 + 239)]] = v81[v83[2 + 1]][v81[v83[15 - 11]]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v3203 = 11 - 4;
										end
										if (v3203 == (34 - 24)) then
											v3205 = 193 - (30 + 163);
											for v7035 = v3208, v76 do
												v3205 = v3205 + (2 - 1);
												v81[v7035] = v3206[v3205];
											end
											v75 = v75 + 1;
											v83 = v71[v75];
											v3208 = v83[557 - (213 + 342)];
											v3206, v3207 = v74(v81[v3208](v13(v81, v3208 + (2 - 1), v76)));
											v76 = (v3207 + v3208) - (1419 - (843 + 575));
											v3203 = 713 - (347 + 355);
										end
										if (v3203 == 1) then
											v81[v83[2]] = v83[3];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[470 - (386 + 81)]][v81[v83[8 - 4]]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[3 + 0]][v81[v83[4]]];
											v3203 = 3 - 1;
										end
										if (((1665 - (610 + 1047)) == v3203) or (1290 >= 4586)) then
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[566 - (304 + 259)]] + v81[v83[4]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[967 - (306 + 659)]] = v83[1 + 2];
											v75 = v75 + 1;
											v3203 = 1 + 8;
										end
										if (v3203 == (1750 - (315 + 1424))) then
											v3205 = 588 - (27 + 561);
											for v7038 = v3208, v76 do
												v3205 = v3205 + 1 + 0;
												v81[v7038] = v3206[v3205];
											end
											v75 = v75 + (1928 - (1904 + 23));
											v83 = v71[v75];
											v3208 = v83[1 + 1];
											v3204 = v81[v3208];
											for v7041 = v3208 + 1 + 0, v76 do
												v7(v3204, v81[v7041]);
											end
											break;
										end
										if ((3715 > 11) and (v3203 == 5)) then
											v75 = v75 + (1999 - (1852 + 146));
											v83 = v71[v75];
											v81[v83[2]] = v83[7 - 4];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[3]][v81[v83[4 + 0]]];
											v75 = v75 + 1;
											v3203 = 192 - (18 + 168);
										end
										if ((v3203 == (5 + 2)) or (4427 < 1297)) then
											v81[v83[2 - 0]] = v61[v83[4 - 1]];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[2 - 0]] = v81[v83[641 - (399 + 239)]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[11 - 8];
											v3203 = 1416 - (779 + 629);
										end
										if (v3203 == (0 + 0)) then
											v3204 = nil;
											v3205 = nil;
											v3206, v3207 = nil;
											v3208 = nil;
											v81[v83[2 + 0]] = v81[v83[1772 - (855 + 914)]][v81[v83[26 - (15 + 7)]]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v3203 = 1703 - (646 + 1056);
										end
										if (v3203 == (2 + 7)) then
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[4 - 1]][v81[v83[1870 - (1443 + 423)]]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v3208 = v83[4 - 2];
											v3206, v3207 = v74(v81[v3208](v13(v81, v3208 + 1 + 0, v83[1 + 2])));
											v76 = (v3207 + v3208) - (2 - 1);
											v3203 = 1516 - (271 + 1235);
										end
										if ((v3203 == (1 + 1)) or (3203 >= 3685)) then
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[6 - 4]] = v83[3];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[1046 - (463 + 581)]] = v81[v83[3]][v81[v83[4]]];
											v75 = v75 + 1 + 0;
											v3203 = 1178 - (599 + 576);
										end
										if ((1481 == 1481) and (v3203 == (1516 - (316 + 1196)))) then
											v81[v83[1305 - (970 + 333)]] = v83[3];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[964 - (538 + 423)]] + v81[v83[1 + 3]];
											v75 = v75 + (4 - 3);
											v83 = v71[v75];
											v81[v83[4 - 2]] = v81[v83[3]][v81[v83[1 + 3]]];
											v3203 = 1359 - (1061 + 293);
										end
										if (v3203 == (532 - (153 + 376))) then
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[708 - (173 + 532)]] + v81[v83[7 - 3]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2]][v81[v83[3]]] = v81[v83[4]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v3203 = 2 + 2;
										end
									end
								end
							elseif ((v84 <= (796 - 466)) or (2641 < 530)) then
								if (v84 <= (1159 - 831)) then
									local v747 = 0 + 0;
									local v748;
									local v749;
									local v750;
									while true do
										if ((1540 - (561 + 975)) == v747) then
											v75 = v75 + 1;
											v83 = v71[v75];
											v750 = v83[2 + 0];
											v749 = v81[v750];
											v747 = 1 + 4;
										end
										if (v747 == (1 + 0)) then
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[9 - 6]] - v81[v83[4 + 0]];
											v75 = v75 + (2 - 1);
											v747 = 125 - (115 + 8);
										end
										if (v747 == (1559 - (1476 + 80))) then
											v81[v83[2 - 0]] = v81[v83[845 - (648 + 194)]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[257 - (111 + 144)]] = v83[3];
											v747 = 3 + 1;
										end
										if ((0 - 0) == v747) then
											v748 = nil;
											v749 = nil;
											v750 = nil;
											v81[v83[2 - 0]] = v83[320 - (275 + 42)];
											v747 = 183 - (104 + 78);
										end
										if (v747 == 5) then
											v748 = v81[v750 + 2];
											if (v748 > 0) then
												if ((4626 > 3293) and (v749 > v81[v750 + 1])) then
													v75 = v83[9 - 6];
												else
													v81[v750 + 3] = v749;
												end
											elseif ((4826 >= 939) and (v749 < v81[v750 + 1])) then
												v75 = v83[7 - 4];
											else
												v81[v750 + (1939 - (813 + 1123))] = v749;
											end
											break;
										end
										if (v747 == (1 + 1)) then
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[1 + 2]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v747 = 9 - 6;
										end
									end
								elseif (v84 == 329) then
									local v3209;
									local v3210, v3211;
									local v3212;
									v81[v83[2 + 0]] = v81[v83[1796 - (144 + 1649)]][v81[v83[555 - (125 + 426)]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[3 - 1]] = v81[v83[85 - (51 + 31)]][v81[v83[13 - 9]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v61[v83[292 - (174 + 115)]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1700 - (941 + 757)]] = v81[v83[1165 - (696 + 466)]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2]] = v83[6 - 3];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[1353 - (165 + 1186)]] = v81[v83[3]] + v81[v83[4]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[14 - 11]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v3212 = v83[2 + 0];
									v3210, v3211 = v74(v81[v3212](v13(v81, v3212 + 1 + 0, v83[3])));
									v76 = (v3211 + v3212) - (1 + 0);
									v3209 = 0 + 0;
									for v4336 = v3212, v76 do
										local v4337 = 0 + 0;
										while true do
											if ((3852 >= 719) and (v4337 == (1037 - (853 + 184)))) then
												v3209 = v3209 + 1;
												v81[v4336] = v3210[v3209];
												break;
											end
										end
									end
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v3212 = v83[2];
									v81[v3212] = v81[v3212](v13(v81, v3212 + (35 - (14 + 20)), v76));
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[768 - (35 + 731)]][v81[v83[1 + 2]]] = v81[v83[1 + 3]];
								else
									v81[v83[1 + 1]] = v81[v83[3 + 0]][v83[4 + 0]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[3 - 1]] = v81[v83[3 + 0]][v83[151 - (26 + 121)]];
									v75 = v75 + (112 - (95 + 16));
									v83 = v71[v75];
									v81[v83[6 - 4]] = v81[v83[3 - 0]][v81[v83[555 - (423 + 128)]]];
									v75 = v75 + (1575 - (1331 + 243));
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[7 - 4]] ^ v81[v83[9 - 5]];
									v75 = v75 + (1635 - (284 + 1350));
									v83 = v71[v75];
									v81[v83[1 + 1]][v81[v83[31 - (10 + 18)]]] = v81[v83[4]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v75 = v83[1310 - (73 + 1234)];
								end
							elseif (v84 <= (1069 - (503 + 234))) then
								if ((714 <= 2159) and (v84 == (2232 - (425 + 1476)))) then
									v81[v83[1 + 1]] = v61[v83[3]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[1058 - (856 + 200)]] = v81[v83[1 + 2]][v83[1 + 3]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[1 + 2]][v81[v83[1615 - (734 + 877)]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1483 - (514 + 967)]][v81[v83[5 - 2]]] = v81[v83[4]];
									v75 = v75 + (648 - (325 + 322));
									v83 = v71[v75];
									v75 = v83[3 - 0];
								else
									local v3251 = 1830 - (1668 + 162);
									while true do
										if ((2155 > 2080) and (v3251 == 1)) then
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[234 - (43 + 189)]] = v81[v83[5 - 2]];
											v75 = v75 + (1659 - (694 + 964));
											v3251 = 3 - 1;
										end
										if (v3251 == 0) then
											for v7044 = v83[2 - 0], v83[4 - 1] do
												v81[v7044] = nil;
											end
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[340 - (57 + 280)]];
											v3251 = 1955 - (414 + 1540);
										end
										if ((v3251 == 3) or (1515 <= 709)) then
											v75 = v83[903 - (561 + 339)];
											break;
										end
										if ((594 < 4448) and (v3251 == 2)) then
											v83 = v71[v75];
											v81[v83[2]] = v83[1 + 2];
											v75 = v75 + 1;
											v83 = v71[v75];
											v3251 = 3 + 0;
										end
									end
								end
							elseif ((v84 == (1883 - (1342 + 208))) or (579 > 3504)) then
								local v3252 = 0 - 0;
								local v3253;
								local v3254;
								local v3255;
								while true do
									if (v3252 == (14 - 10)) then
										v83 = v71[v75];
										v81[v83[2]] = v83[3];
										v75 = v75 + 1;
										v3252 = 5 + 0;
									end
									if ((9 - 6) == v3252) then
										v3255 = v83[1848 - (1139 + 707)];
										v81[v3255] = v81[v3255]();
										v75 = v75 + 1;
										v3252 = 2 + 2;
									end
									if ((1 + 5) == v3252) then
										v3253 = v81[v3255 + (542 - (335 + 205))];
										if (v3253 > (0 + 0)) then
											if (v3254 > v81[v3255 + (1 - 0)]) then
												v75 = v83[3];
											else
												v81[v3255 + (8 - 5)] = v3254;
											end
										elseif ((1087 == 1087) and (v3254 < v81[v3255 + 1 + 0])) then
											v75 = v83[7 - 4];
										else
											v81[v3255 + (1065 - (622 + 440))] = v3254;
										end
										break;
									end
									if ((1 - 0) == v3252) then
										v81[v83[754 - (672 + 80)]] = #v81[v83[1129 - (601 + 525)]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v3252 = 2;
									end
									if (v3252 == (1820 - (1515 + 303))) then
										v81[v83[1 + 1]] = v61[v83[3 - 0]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v3252 = 3 + 0;
									end
									if ((1862 >= 1797) and (v3252 == (962 - (144 + 818)))) then
										v3253 = nil;
										v3254 = nil;
										v3255 = nil;
										v3252 = 28 - (5 + 22);
									end
									if (v3252 == 5) then
										v83 = v71[v75];
										v3255 = v83[2];
										v3254 = v81[v3255];
										v3252 = 867 - (446 + 415);
									end
								end
							else
								local v3256 = 213 - (204 + 9);
								local v3257;
								while true do
									if (v3256 == (1259 - (479 + 779))) then
										v81[v83[4 - 2]] = v83[118 - (61 + 54)];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1807 - (1235 + 570)]] = v83[3];
										v3256 = 970 - (217 + 751);
									end
									if ((1595 < 4507) and (v3256 == (2 + 0))) then
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v3257 = v83[112 - (94 + 16)];
										v81[v3257] = v81[v3257](v13(v81, v3257 + (3 - 2), v83[3]));
										v3256 = 3 + 0;
									end
									if (v3256 == 0) then
										v3257 = nil;
										v81[v83[2 + 0]] = v81[v83[1548 - (1188 + 357)]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v3256 = 810 - (580 + 229);
									end
									if ((513 - (82 + 428)) == v3256) then
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[498 - (259 + 237)]] = v81[v83[3]];
										break;
									end
								end
							end
						elseif ((4856 >= 3815) and (v84 <= (1265 - 924))) then
							if ((4617 > 2290) and (v84 <= (1693 - (215 + 1141)))) then
								if (v84 <= (729 - 394)) then
									v81[v83[672 - (405 + 265)]] = v81[v83[1986 - (1136 + 847)]] % v81[v83[1738 - (230 + 1504)]];
								elseif (v84 == (1049 - 713)) then
									v81[v83[1884 - (913 + 969)]] = v83[5 - 2];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1395 - (1277 + 116)]] = v81[v83[1190 - (1178 + 9)]][v81[v83[2 + 2]]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2]] = v83[1843 - (1018 + 822)];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3 + 0]][v81[v83[1 + 3]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[384 - (111 + 270)]][v81[v83[1200 - (1082 + 114)]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[5 - 3]][v81[v83[3]]] = v81[v83[499 - (257 + 238)]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1856 - (831 + 1023)]] = v83[124 - (6 + 115)];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v75 = v83[7 - 4];
								else
									local v3273 = 0 - 0;
									while true do
										if (v3273 == 2) then
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[3]][v81[v83[4]]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v3273 = 7 - 4;
										end
										if (v3273 == (7 - 4)) then
											v81[v83[2 + 0]] = v83[1203 - (608 + 592)];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[3 + 0]][v81[v83[1945 - (24 + 1917)]]];
											v3273 = 4;
										end
										if (v3273 == 10) then
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v75 = v83[1528 - (521 + 1004)];
											break;
										end
										if (v3273 == 0) then
											v81[v83[2 - 0]] = v81[v83[3 + 0]] + v81[v83[1 + 3]];
											v75 = v75 + (295 - (87 + 207));
											v83 = v71[v75];
											v81[v83[2]] = v83[3];
											v3273 = 1;
										end
										if ((7 == v3273) or (150 > 4869)) then
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[6 - 4]][v81[v83[1598 - (625 + 970)]]] = v81[v83[3 + 1]];
											v75 = v75 + (350 - (122 + 227));
											v3273 = 3 + 5;
										end
										if (v3273 == (1116 - (706 + 409))) then
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[4 - 2]] = v81[v83[2 + 1]] + v81[v83[4]];
											v75 = v75 + 1;
											v3273 = 4 - 2;
										end
										if ((4308 > 596) and (v3273 == (455 - (433 + 13)))) then
											v81[v83[2 + 0]] = v81[v83[984 - (824 + 157)]] + v81[v83[4]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[362 - (120 + 240)]] = v83[1 + 2];
											v3273 = 10;
										end
										if ((v3273 == (3 + 1)) or (3004 <= 2586)) then
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1034 - (291 + 741)]] = v61[v83[1 + 2]];
											v75 = v75 + 1;
											v3273 = 2 + 3;
										end
										if (v3273 == 6) then
											v81[v83[2]] = v81[v83[3]][v81[v83[1 + 3]]];
											v75 = v75 + (1493 - (810 + 682));
											v83 = v71[v75];
											v81[v83[495 - (16 + 477)]] = v81[v83[3 - 0]][v81[v83[1370 - (658 + 708)]]];
											v3273 = 3 + 4;
										end
										if (v3273 == (12 - 4)) then
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[650 - (483 + 164)];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v3273 = 16 - 7;
										end
										if (v3273 == (553 - (151 + 397))) then
											v83 = v71[v75];
											v81[v83[5 - 3]] = v83[1226 - (1005 + 218)];
											v75 = v75 + (656 - (294 + 361));
											v83 = v71[v75];
											v3273 = 6;
										end
									end
								end
							elseif (v84 <= (1399 - (150 + 910))) then
								if (v84 > (110 + 228)) then
									local v3274 = 0 + 0;
									local v3275;
									local v3276;
									local v3277;
									local v3278;
									while true do
										if (v3274 == (0 + 0)) then
											v3275 = nil;
											v3276 = nil;
											v3275, v3277 = nil;
											v3278 = nil;
											v81[v83[8 - 6]] = v81[v83[3 + 0]][v81[v83[12 - 8]]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[1803 - (756 + 1044)]];
											v3274 = 831 - (738 + 92);
										end
										if ((1219 <= 3997) and ((2 - 1) == v3274)) then
											v75 = v75 + (1413 - (569 + 843));
											v83 = v71[v75];
											v81[v83[1430 - (262 + 1166)]] = v81[v83[654 - (410 + 241)]][v81[v83[4]]];
											v75 = v75 + (1185 - (388 + 796));
											v83 = v71[v75];
											v81[v83[1010 - (534 + 474)]] = v61[v83[2 + 1]];
											v75 = v75 + (1100 - (642 + 457));
											v83 = v71[v75];
											v3274 = 2;
										end
										if ((v3274 == (5 - 2)) or (367 >= 3593)) then
											v83 = v71[v75];
											v81[v83[1478 - (384 + 1092)]] = v83[1732 - (1190 + 539)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[756 - (91 + 662)]][v81[v83[3 + 1]]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v3278 = v83[7 - 5];
											v3274 = 1051 - (116 + 931);
										end
										if (v3274 == 6) then
											for v7046 = v3278, v83[3 + 1] do
												v3276 = v3276 + 1 + 0;
												v81[v7046] = v3275[v3276];
											end
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[7 - 5]] = v81[v83[8 - 5]];
											v75 = v75 + (178 - (18 + 159));
											v83 = v71[v75];
											v81[v83[5 - 3]] = v81[v83[4 - 1]];
											v75 = v75 + (2 - 1);
											v3274 = 7;
										end
										if (v3274 == (10 - 3)) then
											v83 = v71[v75];
											v81[v83[4 - 2]] = v81[v83[3]] + v81[v83[323 - (111 + 208)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[594 - (364 + 228)]] = v83[6 - 3];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[3 + 0]] - v81[v83[2 + 2]];
											v3274 = 11 - 3;
										end
										if ((7 + 1) == v3274) then
											v75 = v75 + (378 - (121 + 256));
											v83 = v71[v75];
											v81[v83[8 - 6]] = v83[7 - 4];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v83[2 + 1];
											break;
										end
										if (v3274 == (3 + 1)) then
											v3275, v3277 = v74(v81[v3278](v13(v81, v3278 + 1, v83[1761 - (549 + 1209)])));
											v76 = (v3277 + v3278) - (1 - 0);
											v3276 = 0 + 0;
											for v7049 = v3278, v76 do
												v3276 = v3276 + (1382 - (643 + 738));
												v81[v7049] = v3275[v3276];
											end
											v75 = v75 + 1;
											v83 = v71[v75];
											v3278 = v83[2 + 0];
											v3275, v3277 = v74(v81[v3278](v13(v81, v3278 + 1, v76)));
											v3274 = 11 - 6;
										end
										if (v3274 == (4 - 2)) then
											v81[v83[2]] = v81[v83[1 + 2]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2 - 0]] = v83[1110 - (1038 + 69)];
											v75 = v75 + (337 - (157 + 179));
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[1133 - (204 + 926)]] + v81[v83[1961 - (184 + 1773)]];
											v75 = v75 + (720 - (111 + 608));
											v3274 = 2 + 1;
										end
										if (((18 - 13) == v3274) or (1785 == 3909)) then
											v76 = (v3277 + v3278) - (1 + 0);
											v3276 = 0 + 0;
											for v7052 = v3278, v76 do
												v3276 = v3276 + 1 + 0;
												v81[v7052] = v3275[v3276];
											end
											v75 = v75 + (4 - 3);
											v83 = v71[v75];
											v3278 = v83[4 - 2];
											v3275 = {v81[v3278](v13(v81, v3278 + 1 + 0, v76))};
											v3276 = 0;
											v3274 = 1674 - (1328 + 340);
										end
									end
								else
									v81[v83[5 - 3]] = v81[v83[3 + 0]] + v83[8 - 4];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[2 + 1]][v81[v83[4]]];
									v75 = v75 + (1015 - (782 + 232));
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3]][v83[2 + 2]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1305 - (397 + 906)]] = v81[v83[3]][v83[604 - (360 + 240)]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3 + 0]][v81[v83[26 - (13 + 9)]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 - 0]] = v81[v83[3]][v83[8 - 4]];
									v75 = v75 + (1575 - (272 + 1302));
									v83 = v71[v75];
									v81[v83[8 - 6]] = v81[v83[3]][v81[v83[11 - 7]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[7 - 4]][v81[v83[4]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[3 - 1]][v81[v83[24 - (8 + 13)]]] = v81[v83[4 + 0]];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[3]] + v83[92 - (28 + 60)];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3]] + v83[4];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[956 - (133 + 820)]][v81[v83[4]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[99 - (9 + 88)]] = v83[253 - (98 + 152)];
								end
							elseif ((v84 == (334 + 6)) or (2789 > 4945)) then
								v81[v83[5 - 3]] = v81[v83[13 - 10]][v81[v83[7 - 3]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2 - 0]] = v83[291 - (44 + 244)];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1391 - (207 + 1182)]] = v81[v83[3 + 0]][v81[v83[920 - (904 + 12)]]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[2 + 0]] = v81[v83[11 - 8]][v81[v83[257 - (241 + 12)]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[3 - 1]] = v83[1257 - (1187 + 67)];
								v75 = v75 + (273 - (56 + 216));
								v83 = v71[v75];
								v81[v83[3 - 1]] = v81[v83[1482 - (1194 + 285)]][v81[v83[4]]];
								v75 = v75 + (1701 - (401 + 1299));
								v83 = v71[v75];
								v81[v83[1557 - (1522 + 33)]] = v81[v83[3]][v81[v83[10 - 6]]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[3]] + v81[v83[1826 - (1108 + 714)]];
								v75 = v75 + (675 - (357 + 317));
								v83 = v71[v75];
								v81[v83[2]][v81[v83[3 + 0]]] = v81[v83[4]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v83[470 - (73 + 394)];
								v75 = v75 + 1;
								v83 = v71[v75];
								v75 = v83[9 - 6];
							else
								local v3319;
								local v3320;
								local v3321;
								v81[v83[1 + 1]] = v61[v83[3 + 0]];
								v75 = v75 + (252 - (247 + 4));
								v83 = v71[v75];
								v81[v83[630 - (435 + 193)]] = v61[v83[476 - (428 + 45)]];
								v75 = v75 + (1221 - (158 + 1062));
								v83 = v71[v75];
								v81[v83[1379 - (858 + 519)]] = v61[v83[5 - 2]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2]] = v61[v83[1460 - (711 + 746)]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v83[680 - (229 + 448)];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2]] = v83[3];
								v75 = v75 + (742 - (357 + 384));
								v83 = v71[v75];
								v81[v83[1 + 1]] = {};
								v75 = v75 + (1581 - (984 + 596));
								v83 = v71[v75];
								v81[v83[2]] = {};
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v3321 = v83[923 - (465 + 456)];
								v76 = (v3321 + v82) - (1 + 0);
								for v4338 = v3321, v76 do
									v3320 = v77[v4338 - v3321];
									v81[v4338] = v3320;
								end
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v3321 = v83[1 + 1];
								v3319 = v81[v3321];
								for v4341 = v3321 + (2 - 1), v76 do
									v7(v3319, v81[v4341]);
								end
							end
						elseif (v84 <= 344) then
							if (v84 <= 342) then
								local v752 = 0 + 0;
								local v753;
								local v754;
								local v755;
								while true do
									if (v752 == (0 - 0)) then
										v753 = v83[3 - 1];
										v754 = v81[v753 + 2 + 0];
										v752 = 1 + 0;
									end
									if (v752 == (217 - (172 + 44))) then
										v755 = v81[v753] + v754;
										v81[v753] = v755;
										v752 = 1 + 1;
									end
									if (v752 == (2 + 0)) then
										if ((v754 > (379 - (170 + 209))) or (617 == 4574)) then
											if ((2874 == 2874) and (v755 <= v81[v753 + (2 - 1)])) then
												v75 = v83[7 - 4];
												v81[v753 + 2 + 1] = v755;
											end
										elseif ((v755 >= v81[v753 + 1]) or (4575 == 2347)) then
											v75 = v83[3];
											v81[v753 + 3] = v755;
										end
										break;
									end
								end
							elseif (v84 == (1299 - (244 + 712))) then
								v81[v83[2 + 0]] = v81[v83[3 + 0]] / v81[v83[10 - 6]];
							else
								local v3337;
								local v3338;
								local v3339, v3340;
								local v3341;
								v81[v83[5 - 3]] = v81[v83[1 + 2]][v81[v83[4]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[7 - 5]] = v61[v83[1249 - (769 + 477)]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[2 + 0]] = v81[v83[3]];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[5 - 2]] + v83[3 + 1];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[4 - 2]] = v81[v83[5 - 2]] + v83[13 - 9];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[6 - 4]] = v81[v83[3]][v83[7 - 3]];
								v75 = v75 + (639 - (526 + 112));
								v83 = v71[v75];
								v3341 = v83[3 - 1];
								v3339, v3340 = v74(v81[v3341](v13(v81, v3341 + (1 - 0), v83[661 - (318 + 340)])));
								v76 = (v3340 + v3341) - (624 - (274 + 349));
								v3338 = 0 - 0;
								for v4345 = v3341, v76 do
									v3338 = v3338 + (1 - 0);
									v81[v4345] = v3339[v3338];
								end
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v3341 = v83[1 + 1];
								v3339, v3340 = v74(v81[v3341](v13(v81, v3341 + 1, v76)));
								v76 = (v3340 + v3341) - 1;
								v3338 = 0 - 0;
								for v4348 = v3341, v76 do
									local v4349 = 0;
									while true do
										if (v4349 == (1452 - (1429 + 23))) then
											v3338 = v3338 + (3 - 2);
											v81[v4348] = v3339[v3338];
											break;
										end
									end
								end
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v3341 = v83[2 + 0];
								v3337 = v81[v3341];
								for v4350 = v3341 + (1 - 0), v76 do
									v7(v3337, v81[v4350]);
								end
							end
						elseif (v84 <= (10 + 336)) then
							if ((3490 >= 1258) and (v84 == (546 - 201))) then
								local v3357 = v83[1508 - (1140 + 366)];
								local v3358 = v81[v3357];
								local v3359 = v81[v3357 + (2 - 0)];
								if (v3359 > 0) then
									if (v3358 > v81[v3357 + 1 + 0]) then
										v75 = v83[1 + 2];
									else
										v81[v3357 + (8 - 5)] = v3358;
									end
								elseif (v3358 < v81[v3357 + 1 + 0]) then
									v75 = v83[1 + 2];
								else
									v81[v3357 + (388 - (271 + 114))] = v3358;
								end
							else
								local v3360 = 0 - 0;
								while true do
									if (v3360 == (859 - (240 + 619))) then
										v81[v83[2]] = v61[v83[3]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[2 + 1]][v83[6 - 2]];
										v3360 = 1;
									end
									if (v3360 == 3) then
										v75 = v83[860 - (509 + 348)];
										break;
									end
									if ((5 - 3) == v3360) then
										v83 = v71[v75];
										v81[v83[2]][v81[v83[1 + 2]]] = v81[v83[1382 - (1014 + 364)]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v3360 = 3 - 0;
									end
									if ((v3360 == (2 - 1)) or (4972 == 3935)) then
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[3 - 1]] = v81[v83[3 + 0]][v81[v83[2 + 2]]];
										v75 = v75 + 1 + 0;
										v3360 = 2;
									end
								end
							end
						elseif (v84 == 347) then
							v81[v83[5 - 3]] = v81[v83[1727 - (1565 + 159)]][v81[v83[4 + 0]]];
							v75 = v75 + (2 - 1);
							v83 = v71[v75];
							v81[v83[1 + 1]]();
							v75 = v75 + (3 - 2);
							v83 = v71[v75];
							v81[v83[2 - 0]] = v81[v83[3]] + v83[1867 - (1445 + 418)];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[2]] = v81[v83[9 - 6]] + v83[4];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[2]] = v83[3 + 0];
						else
							v81[v83[1415 - (26 + 1387)]] = v81[v83[3]][v81[v83[4]]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[2]] = v83[1 + 2];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[2]] = v81[v83[3]][v81[v83[4]]];
							v75 = v75 + (804 - (355 + 448));
							v83 = v71[v75];
							v81[v83[2]][v81[v83[3]]] = v81[v83[265 - (246 + 15)]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v75 = v83[3];
						end
					elseif ((4054 > 2616) and (v84 <= (138 + 223))) then
						if ((642 == 642) and (v84 <= (69 + 285))) then
							if (v84 <= (73 + 278)) then
								if ((v84 <= (78 + 271)) or (3430 < 2326)) then
									if (v83[1121 - (391 + 728)] > v83[4]) then
										v75 = v75 + (1096 - (594 + 501));
									else
										v75 = v83[3 + 0];
									end
								elseif (v84 > (1487 - (730 + 407))) then
									local v3376 = 0 + 0;
									while true do
										if (v3376 == (7 - 3)) then
											v83 = v71[v75];
											v81[v83[4 - 2]] = v81[v83[6 - 3]] % v81[v83[3 + 1]];
											v75 = v75 + (1902 - (438 + 1463));
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[2 + 1]] % v83[1621 - (900 + 717)];
											v3376 = 1141 - (820 + 316);
										end
										if ((2 == v3376) or (2123 >= 2995)) then
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[1800 - (719 + 1079)]] = v81[v83[6 - 3]] - v81[v83[5 - 1]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v3376 = 1 + 2;
										end
										if (v3376 == (0 - 0)) then
											v81[v83[205 - (148 + 55)]] = v83[1456 - (914 + 539)] ^ v81[v83[4]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[562 - (253 + 307)]] = v81[v83[3]] / v81[v83[1070 - (926 + 140)]];
											v75 = v75 + (1059 - (331 + 727));
											v3376 = 1;
										end
										if ((2125 > 384) and (v3376 == (1383 - (1014 + 368)))) then
											v83 = v71[v75];
											v81[v83[1579 - (1035 + 542)]] = v81[v83[3]] - v83[4];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[3]] - v83[82 - (44 + 34)];
											v3376 = 3 - 1;
										end
										if (v3376 == (2 + 3)) then
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[6 - 4]] = v81[v83[5 - 2]] - v81[v83[2 + 2]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v3376 = 674 - (355 + 313);
										end
										if (v3376 == (3 + 3)) then
											do
												return v81[v83[4 - 2]];
											end
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v75 = v83[3];
											break;
										end
										if (v3376 == (3 + 0)) then
											v81[v83[2]] = v81[v83[1868 - (762 + 1103)]] + v83[2 + 2];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[2 + 1] ^ v81[v83[1571 - (1491 + 76)]];
											v75 = v75 + 1 + 0;
											v3376 = 1 + 3;
										end
									end
								elseif (v81[v83[2]] ~= v81[v83[4]]) then
									v75 = v75 + (763 - (94 + 668));
								else
									v75 = v83[1412 - (36 + 1373)];
								end
							elseif (v84 <= 352) then
								local v756 = v83[1103 - (58 + 1043)];
								v81[v756] = v81[v756](v13(v81, v756 + (4 - 3), v76));
							elseif ((v84 > (558 - 205)) or (792 == 179)) then
								v81[v83[4 - 2]] = v81[v83[8 - 5]][v81[v83[15 - 11]]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[230 - (35 + 193)]] = v81[v83[14 - 11]][v81[v83[656 - (242 + 410)]]];
								v75 = v75 + (1496 - (1285 + 210));
								v83 = v71[v75];
								v81[v83[1741 - (1179 + 560)]] = v83[3];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[6 - 4]] = v81[v83[3]][v81[v83[4]]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[1218 - (262 + 954)]] = v81[v83[11 - 8]] - v81[v83[4]];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[2 + 0]][v81[v83[3]]] = v81[v83[13 - 9]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]] = v83[2 + 1];
							else
								local v3391;
								v3391 = v83[2];
								v81[v3391] = v81[v3391](v13(v81, v3391 + 1 + 0, v76));
								v75 = v75 + (1843 - (1696 + 146));
								v83 = v71[v75];
								v81[v83[1908 - (1835 + 71)]][v81[v83[637 - (58 + 576)]]] = v81[v83[4]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[4 - 2]] = v83[3 + 0];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[82 - (27 + 53)]] = v81[v83[3]] + v81[v83[1733 - (22 + 1707)]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2]] = v83[4 - 1];
								v75 = v75 + (891 - (627 + 263));
								v83 = v71[v75];
								v81[v83[7 - 5]] = v81[v83[3 - 0]] + v81[v83[4]];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[2 - 0]] = v81[v83[1189 - (255 + 931)]][v81[v83[11 - 7]]];
								v75 = v75 + (1389 - (507 + 881));
								v83 = v71[v75];
								v81[v83[2 - 0]] = v61[v83[5 - 2]];
							end
						elseif (v84 <= (1258 - 901)) then
							if (v84 <= (1958 - (475 + 1128))) then
								v81[v83[2]] = v81[v83[6 - 3]][v83[5 - 1]];
								v75 = v75 + (3 - 2);
								v83 = v71[v75];
								v81[v83[2]] = v61[v83[2 + 1]];
								v75 = v75 + (358 - (110 + 247));
								v83 = v71[v75];
								v81[v83[1248 - (1109 + 137)]] = v81[v83[3]][v83[4]];
								v75 = v75 + (4 - 3);
								v83 = v71[v75];
								v81[v83[2 + 0]] = v81[v83[3 + 0]][v81[v83[4]]];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[1 + 1]][v81[v83[3]]] = v81[v83[4 + 0]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[5 - 3]] = v81[v83[2 + 1]] + v83[4];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2 + 0]] = v81[v83[2 + 1]][v81[v83[15 - 11]]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2 + 0]] = v83[3 + 0];
							elseif ((v84 > (1409 - 1053)) or (1245 >= 3259)) then
								local v3406 = 205 - (192 + 13);
								while true do
									if ((v3406 == (758 - (585 + 172))) or (1291 > 3533)) then
										v81[v83[2]] = v81[v83[6 - 3]][v83[800 - (76 + 720)]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v3406 = 5 - 3;
									end
									if (v3406 == (132 - (45 + 87))) then
										v81[v83[2]] = v81[v83[3]][v83[4]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v3406 = 1 - 0;
									end
									if (v3406 == 3) then
										v81[v83[2 + 0]] = v81[v83[10 - 7]] + v83[4 + 0];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v3406 = 4;
									end
									if (v3406 == 5) then
										v81[v83[1285 - (61 + 1222)]] = v83[1506 - (628 + 875)];
										break;
									end
									if ((4098 >= 3364) and (v3406 == (2 + 0))) then
										v81[v83[2]][v81[v83[5 - 2]]] = v81[v83[4]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v3406 = 3;
									end
									if ((2641 == 2641) and (v3406 == (1926 - (590 + 1332)))) then
										v81[v83[3 - 1]] = v81[v83[9 - 6]] + v83[9 - 5];
										v75 = v75 + (1627 - (173 + 1453));
										v83 = v71[v75];
										v3406 = 5;
									end
								end
							else
								v81[v83[850 - (237 + 611)]] = v81[v83[2 + 1]] + v81[v83[2 + 2]];
								v75 = v75 + (3 - 2);
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[3]][v81[v83[4]]];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[5 - 3]] = v83[378 - (129 + 246)];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[4 - 2]] = v81[v83[1095 - (83 + 1009)]][v81[v83[877 - (506 + 367)]]];
								v75 = v75 + (4 - 3);
								v83 = v71[v75];
								v81[v83[1 + 1]] = v61[v83[3]];
								v75 = v75 + (359 - (72 + 286));
								v83 = v71[v75];
								v81[v83[2 + 0]] = v83[137 - (107 + 27)];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[4 - 1]][v81[v83[19 - 15]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[3 - 1]] = v81[v83[11 - 8]][v81[v83[399 - (304 + 91)]]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2 + 0]][v81[v83[11 - 8]]] = v81[v83[3 + 1]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2 - 0]] = v83[1563 - (648 + 912)];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[5 - 3]] = v81[v83[3]] + v81[v83[449 - (206 + 239)]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2]] = v83[1423 - (956 + 464)];
							end
						elseif (v84 <= 359) then
							if (v84 == (626 - (159 + 109))) then
								v81[v83[2]] = v61[v83[3 + 0]];
								v75 = v75 + (680 - (239 + 440));
								v83 = v71[v75];
								v81[v83[5 - 3]] = v81[v83[1 + 2]][v83[1732 - (1664 + 64)]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[2 + 1]][v81[v83[8 - 4]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]][v81[v83[1 + 2]]] = v81[v83[1518 - (1421 + 93)]];
								v75 = v75 + (3 - 2);
								v83 = v71[v75];
								v81[v83[1150 - (1049 + 99)]] = v81[v83[3 + 0]] + v83[3 + 1];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[1250 - (871 + 377)]] = v83[2 + 1];
							else
								v81[v83[1779 - (1238 + 539)]] = v81[v83[575 - (206 + 366)]][v81[v83[530 - (489 + 37)]]];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[1 + 1]] = v61[v83[3]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[2]] = v83[3];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[2 + 1]][v81[v83[7 - 3]]];
								v75 = v75 + (3 - 2);
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[1 + 2]][v81[v83[1 + 3]]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[1 + 1]][v81[v83[1290 - (254 + 1033)]]] = v81[v83[4 + 0]];
								v75 = v75 + (1763 - (1099 + 663));
								v83 = v71[v75];
								v81[v83[809 - (504 + 303)]] = v83[3 + 0];
								v75 = v75 + (4 - 3);
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[6 - 3]] + v81[v83[11 - 7]];
								v75 = v75 + (240 - (155 + 84));
								v83 = v71[v75];
								v81[v83[2]] = v83[10 - 7];
								v75 = v75 + (3 - 2);
								v83 = v71[v75];
								v81[v83[2 + 0]] = v81[v83[1428 - (557 + 868)]] + v81[v83[611 - (33 + 574)]];
								v75 = v75 + (1566 - (839 + 726));
								v83 = v71[v75];
								v81[v83[2]] = v83[3];
							end
						elseif (v84 == 360) then
							v81[v83[3 - 1]][v81[v83[9 - 6]]] = v83[4];
						else
							for v4351 = v83[333 - (124 + 207)], v83[5 - 2] do
								v81[v4351] = nil;
							end
						end
					elseif (v84 <= (1447 - 1079)) then
						if ((v84 <= (594 - 230)) or (4664 < 2576)) then
							if (v84 <= (1259 - 897)) then
								v81[v83[2]] = v83[5 - 2];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[2 + 1]][v81[v83[4 + 0]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[4 - 2]] = v83[3 + 0];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[5 - 3]] = v81[v83[7 - 4]][v81[v83[4]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2 - 0]] = v81[v83[3 + 0]][v81[v83[2 + 2]]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[4 - 2]] = v83[3];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[1012 - (15 + 995)]] = v81[v83[6 - 3]][v81[v83[4 + 0]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[3]][v81[v83[1 + 3]]];
								v75 = v75 + (38 - (34 + 3));
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[9 - 6]] % v81[v83[1 + 3]];
								v75 = v75 + (3 - 2);
								v83 = v71[v75];
								v81[v83[2]][v81[v83[624 - (477 + 144)]]] = v81[v83[974 - (797 + 173)]];
								v75 = v75 + (1262 - (161 + 1100));
								v83 = v71[v75];
								v81[v83[1338 - (1150 + 186)]] = v83[3 + 0];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v75 = v83[3];
							elseif (v84 > 363) then
								v81[v83[2]] = v81[v83[3]][v81[v83[33 - (12 + 17)]]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[1 + 1]] = v83[3];
								v75 = v75 + (282 - (68 + 213));
								v83 = v71[v75];
								v81[v83[4 - 2]] = v81[v83[1 + 2]][v81[v83[1 + 3]]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[2 + 0]] = v81[v83[1385 - (349 + 1033)]][v81[v83[4]]];
								v75 = v75 + (355 - (68 + 286));
								v83 = v71[v75];
								if (v81[v83[2]] < v81[v83[1 + 3]]) then
									v75 = v75 + (1 - 0);
								else
									v75 = v83[6 - 3];
								end
							else
								local v3464 = 0 + 0;
								local v3465;
								local v3466;
								while true do
									if (v3464 == (0 - 0)) then
										v3465 = v83[5 - 3];
										v3466 = v81[v3465];
										v3464 = 1;
									end
									if ((544 < 651) and (v3464 == (1 - 0))) then
										for v7061 = v3465 + 1, v76 do
											v7(v3466, v81[v7061]);
										end
										break;
									end
								end
							end
						elseif (v84 <= (1000 - 634)) then
							if (v84 == (237 + 128)) then
								v81[v83[1199 - (1064 + 133)]] = v81[v83[3]][v83[14 - 10]];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[1 + 2]][v83[4 + 0]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2]][v81[v83[2 + 1]]] = v81[v83[11 - 7]];
								v75 = v75 + (1634 - (670 + 963));
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[1102 - (1034 + 65)]] + v83[53 - (5 + 44)];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[47 - (25 + 20)]] = v81[v83[3]][v81[v83[5 - 1]]];
							else
								v81[v83[2]] = v81[v83[1978 - (1535 + 440)]] + v81[v83[5 - 1]];
								v75 = v75 + (620 - (477 + 142));
								v83 = v71[v75];
								v81[v83[1346 - (1324 + 20)]] = v83[3 + 0];
								v75 = v75 + (3 - 2);
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[3 + 0]] + v81[v83[10 - 6]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1620 - (818 + 800)]] = v81[v83[232 - (163 + 66)]][v81[v83[19 - 15]]];
								v75 = v75 + (88 - (40 + 47));
								v83 = v71[v75];
								v81[v83[637 - (146 + 489)]] = v83[2 + 1];
							end
						elseif (v84 > 367) then
							v81[v83[2]] = v81[v83[1390 - (499 + 888)]][v81[v83[4]]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[2 - 0]] = v81[v83[3]][v81[v83[7 - 3]]];
							v75 = v75 + (3 - 2);
							v83 = v71[v75];
							v81[v83[3 - 1]] = v83[747 - (522 + 222)];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[1487 - (72 + 1413)]] = v81[v83[1206 - (216 + 987)]][v81[v83[4 + 0]]];
							v75 = v75 + (4 - 3);
							v83 = v71[v75];
							if (v81[v83[2]] ~= v81[v83[4]]) then
								v75 = v75 + 1;
							else
								v75 = v83[1414 - (1300 + 111)];
							end
						else
							local v3494 = 0;
							local v3495;
							local v3496;
							local v3497;
							local v3498;
							while true do
								if (v3494 == (1081 - (1055 + 26))) then
									v3495 = nil;
									v3496, v3497 = nil;
									v3498 = nil;
									v81[v83[645 - (475 + 168)]] = v61[v83[1370 - (302 + 1065)]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v3494 = 1;
								end
								if (v3494 == (2 + 2)) then
									v3498 = v83[2 + 0];
									v3496, v3497 = v74(v81[v3498](v13(v81, v3498 + 1, v83[3])));
									v76 = (v3497 + v3498) - (1319 - (917 + 401));
									v3495 = 1270 - (631 + 639);
									for v7062 = v3498, v76 do
										v3495 = v3495 + (1701 - (654 + 1046));
										v81[v7062] = v3496[v3495];
									end
									v75 = v75 + 1 + 0;
									v3494 = 1604 - (1007 + 592);
								end
								if (v3494 == 1) then
									v81[v83[9 - 7]] = v81[v83[5 - 2]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v83[3];
									v75 = v75 + (4 - 3);
									v83 = v71[v75];
									v3494 = 5 - 3;
								end
								if (v3494 == (20 - 15)) then
									v83 = v71[v75];
									v3498 = v83[324 - (26 + 296)];
									do
										return v81[v3498](v13(v81, v3498 + 1 + 0, v76));
									end
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v3498 = v83[2 + 0];
									v3494 = 823 - (418 + 399);
								end
								if ((2614 > 1094) and (6 == v3494)) then
									do
										return v13(v81, v3498, v76);
									end
									break;
								end
								if (v3494 == (4 - 2)) then
									v81[v83[1 + 1]] = v81[v83[3]] + v81[v83[711 - (314 + 393)]];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[172 - (82 + 88)]] = v83[3 + 0];
									v75 = v75 + 1;
									v83 = v71[v75];
									v3494 = 150 - (95 + 52);
								end
								if (v3494 == (1 + 2)) then
									v81[v83[2 + 0]] = v81[v83[8 - 5]] + v81[v83[4]];
									v75 = v75 + (834 - (8 + 825));
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[3]];
									v75 = v75 + (1641 - (471 + 1169));
									v83 = v71[v75];
									v3494 = 4 + 0;
								end
							end
						end
					elseif (v84 <= (139 + 232)) then
						if (v84 <= 369) then
							v81[v83[9 - 7]] = v81[v83[8 - 5]] + v81[v83[3 + 1]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[1 + 1]] = v83[1 + 2];
							v75 = v75 + (444 - (365 + 78));
							v83 = v71[v75];
							v81[v83[225 - (200 + 23)]] = v81[v83[3]] + v81[v83[4]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[2]] = v83[1 + 2];
							v75 = v75 + 1;
							v83 = v71[v75];
							v75 = v83[3];
						elseif ((1285 > 784) and (v84 > (366 + 4))) then
							v81[v83[2]] = v62[v83[382 - (373 + 6)]];
						else
							local v3501 = 0 - 0;
							while true do
								if ((v3501 == 2) or (173 > 4137)) then
									v83 = v71[v75];
									v81[v83[2]][v81[v83[4 - 1]]] = v81[v83[926 - (519 + 403)]];
									v75 = v75 + (1522 - (1435 + 86));
									v83 = v71[v75];
									v3501 = 180 - (97 + 80);
								end
								if (v3501 == (6 - 2)) then
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v83[705 - (366 + 336)];
									v75 = v75 + (606 - (4 + 601));
									v3501 = 5 + 0;
								end
								if ((671 - (128 + 540)) == v3501) then
									v81[v83[571 - (341 + 228)]] = v81[v83[3]] + v83[4];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1790 - (231 + 1557)]] = v81[v83[3]] + v83[5 - 1];
									v3501 = 18 - 14;
								end
								if ((v3501 == (1 + 0)) or (1827 > 2853)) then
									v75 = v75 + (1352 - (1329 + 22));
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3]][v81[v83[707 - (27 + 676)]]];
									v75 = v75 + (3 - 2);
									v3501 = 7 - 5;
								end
								if ((v3501 == (1691 - (219 + 1472))) or (1126 <= 97)) then
									v81[v83[1 + 1]] = v61[v83[2 + 1]];
									v75 = v75 + (389 - (162 + 226));
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[4 - 1]][v83[2 + 2]];
									v3501 = 2 - 1;
								end
								if (v3501 == (895 - (224 + 666))) then
									v83 = v71[v75];
									v75 = v83[1683 - (345 + 1335)];
									break;
								end
							end
						end
					elseif ((747 <= 4798) and (v84 <= (361 + 12))) then
						if (v84 > (1004 - 632)) then
							local v3502 = 0 - 0;
							while true do
								if (v3502 == (1 + 0)) then
									v75 = v75 + (366 - (18 + 347));
									v83 = v71[v75];
									v81[v83[2]] = #v81[v83[975 - (556 + 416)]];
									v75 = v75 + (1700 - (797 + 902));
									v3502 = 1 + 1;
								end
								if ((12 - 9) == v3502) then
									v75 = v83[10 - 7];
									break;
								end
								if (v3502 == 2) then
									v83 = v71[v75];
									v81[v83[1074 - (632 + 440)]][v81[v83[4 - 1]]] = v81[v83[4]];
									v75 = v75 + (1210 - (705 + 504));
									v83 = v71[v75];
									v3502 = 3 - 0;
								end
								if (v3502 == (0 - 0)) then
									v81[v83[1919 - (1300 + 617)]] = v81[v83[13 - 10]][v83[4]];
									v75 = v75 + (1923 - (36 + 1886));
									v83 = v71[v75];
									v81[v83[7 - 5]] = v81[v83[619 - (305 + 311)]][v81[v83[3 + 1]]];
									v3502 = 1456 - (1093 + 362);
								end
							end
						else
							local v3503 = 0;
							while true do
								if ((1099 - (734 + 364)) == v3503) then
									v81[v83[2]] = v81[v83[1011 - (374 + 634)]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v3503 = 1119 - (331 + 786);
								end
								if (v3503 == (1100 - (759 + 337))) then
									v81[v83[5 - 3]] = v81[v83[567 - (255 + 309)]][v83[497 - (484 + 9)]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v3503 = 8 - 3;
								end
								if (v3503 == 5) then
									v81[v83[2 + 0]] = v81[v83[3]][v83[6 - 2]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v3503 = 1456 - (341 + 1109);
								end
								if ((v3503 == 0) or (770 <= 751)) then
									for v7065 = v83[1 + 1], v83[3] do
										v81[v7065] = nil;
									end
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v3503 = 660 - (483 + 176);
								end
								if (v3503 == (3 + 3)) then
									v81[v83[2]] = v81[v83[3 + 0]][v81[v83[1284 - (47 + 1233)]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v3503 = 621 - (421 + 193);
								end
								if (v3503 == 7) then
									v81[v83[7 - 5]][v81[v83[4 - 1]]] = v81[v83[4]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v3503 = 34 - 26;
								end
								if ((1 + 1) == v3503) then
									v81[v83[2 + 0]] = v81[v83[3]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v3503 = 3 + 0;
								end
								if (v3503 == (1 + 2)) then
									for v7067 = v83[4 - 2], v83[1847 - (463 + 1381)] do
										v81[v7067] = nil;
									end
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v3503 = 1 + 3;
								end
								if ((v3503 == (8 + 0)) or (1793 >= 3879)) then
									v81[v83[2]] = v83[6 - 3];
									break;
								end
							end
						end
					elseif ((704 < 4338) and (v84 > 374)) then
						local v3504;
						local v3505;
						local v3506;
						v81[v83[3 - 1]] = v81[v83[3]] + v83[1165 - (696 + 465)];
						v75 = v75 + (561 - (14 + 546));
						v83 = v71[v75];
						v81[v83[1 + 1]] = v81[v83[1443 - (413 + 1027)]][v81[v83[1820 - (1382 + 434)]]];
						v75 = v75 + (2 - 1);
						v83 = v71[v75];
						v81[v83[1526 - (86 + 1438)]] = v81[v83[724 - (692 + 29)]][v83[1 + 3]];
						v75 = v75 + (2 - 1);
						v83 = v71[v75];
						v81[v83[2]] = v81[v83[1 + 2]][v83[2 + 2]];
						v75 = v75 + 1 + 0;
						v83 = v71[v75];
						v81[v83[2]] = v83[3 + 0];
						v75 = v75 + 1;
						v83 = v71[v75];
						v3506 = v83[6 - 4];
						v3505 = v81[v3506];
						v3504 = v81[v3506 + (5 - 3)];
						if ((3241 < 3611) and (v3504 > (58 - (11 + 47)))) then
							if ((1328 == 1328) and (v3505 > v81[v3506 + 1])) then
								v75 = v83[5 - 2];
							else
								v81[v3506 + 3] = v3505;
							end
						elseif (v3505 < v81[v3506 + 1 + 0]) then
							v75 = v83[452 - (287 + 162)];
						else
							v81[v3506 + 3] = v3505;
						end
					else
						local v3519 = 0;
						local v3520;
						local v3521;
						local v3522;
						local v3523;
						while true do
							if ((v3519 == 3) or (3745 < 103)) then
								v3523 = v83[2 + 0];
								v3521, v3522 = v74(v81[v3523](v13(v81, v3523 + 1, v83[1632 - (10 + 1619)])));
								v76 = (v3522 + v3523) - (1 + 0);
								v3520 = 0 + 0;
								for v7073 = v3523, v76 do
									local v7074 = 0 + 0;
									while true do
										if ((2611 > 1454) and (v7074 == (1270 - (403 + 867)))) then
											v3520 = v3520 + (353 - (310 + 42));
											v81[v7073] = v3521[v3520];
											break;
										end
									end
								end
								v75 = v75 + 1 + 0;
								v3519 = 3 + 1;
							end
							if (v3519 == (1449 - (1170 + 275))) then
								v83 = v71[v75];
								v3523 = v83[2];
								v3521, v3522 = v74(v81[v3523](v13(v81, v3523 + 1 + 0, v76)));
								v76 = (v3522 + v3523) - (3 - 2);
								v3520 = 683 - (424 + 259);
								for v7075 = v3523, v76 do
									local v7076 = 0;
									while true do
										if (v7076 == (0 - 0)) then
											v3520 = v3520 + (1065 - (289 + 775));
											v81[v7075] = v3521[v3520];
											break;
										end
									end
								end
								v3519 = 12 - 7;
							end
							if (v3519 == (13 - 7)) then
								v81[v83[7 - 5]][v81[v83[3]]] = v81[v83[4]];
								break;
							end
							if (((0 - 0) == v3519) or (4199 <= 4189)) then
								v3520 = nil;
								v3521, v3522 = nil;
								v3523 = nil;
								v81[v83[7 - 5]] = v61[v83[13 - 10]];
								v75 = v75 + (1891 - (946 + 944));
								v83 = v71[v75];
								v3519 = 2 - 1;
							end
							if (v3519 == (4 - 3)) then
								v81[v83[2 + 0]] = v61[v83[3 - 0]];
								v75 = v75 + (1444 - (949 + 494));
								v83 = v71[v75];
								v81[v83[1232 - (505 + 725)]] = v81[v83[8 - 5]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v3519 = 1 + 1;
							end
							if ((3198 < 3303) and (v3519 == (9 - 4))) then
								v75 = v75 + (3 - 2);
								v83 = v71[v75];
								v3523 = v83[1953 - (1928 + 23)];
								v81[v3523] = v81[v3523](v13(v81, v3523 + 1 + 0, v76));
								v75 = v75 + (4 - 3);
								v83 = v71[v75];
								v3519 = 7 - 1;
							end
							if (2 == v3519) then
								v81[v83[3 - 1]] = v81[v83[8 - 5]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[238 - (40 + 196)]] = v81[v83[1020 - (845 + 172)]];
								v75 = v75 + (1282 - (423 + 858));
								v83 = v71[v75];
								v3519 = 3;
							end
						end
					end
				elseif ((v84 <= 402) or (3350 < 3286)) then
					if (v84 <= (2090 - (1520 + 182))) then
						if (v84 <= (1847 - (196 + 1270))) then
							if (v84 <= (2184 - (763 + 1043))) then
								if (v84 <= 376) then
									v81[v83[8 - 6]] = v83[1278 - (1144 + 131)];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3]][v81[v83[533 - (458 + 71)]]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[3 - 1]] = v61[v83[3 + 0]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1775 - (775 + 998)]] = v83[147 - (78 + 66)];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[5 - 3]] = v81[v83[1047 - (437 + 607)]][v81[v83[4]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3]][v81[v83[13 - 9]]];
									v75 = v75 + (32 - (30 + 1));
									v83 = v71[v75];
									v81[v83[813 - (786 + 25)]][v81[v83[11 - 8]]] = v81[v83[4 + 0]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[4 - 2]] = v83[3];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[67 - (9 + 55)]] + v81[v83[769 - (256 + 509)]];
									v75 = v75 + (1961 - (1497 + 463));
									v83 = v71[v75];
									v81[v83[958 - (567 + 389)]] = v81[v83[63 - (14 + 46)]][v81[v83[6 - 2]]];
								elseif (v84 == (583 - 206)) then
									local v3524;
									local v3525;
									local v3526;
									v81[v83[2 - 0]] = v83[3];
									v75 = v75 + (817 - (301 + 515));
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[540 - (45 + 492)]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[6 - 3]][v83[3 + 1]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[5 - 2];
									v75 = v75 + (644 - (228 + 415));
									v83 = v71[v75];
									v3526 = v83[1 + 1];
									v3525 = v81[v3526];
									v3524 = v81[v3526 + 1 + 1];
									if (v3524 > (0 - 0)) then
										if ((v3525 > v81[v3526 + (255 - (147 + 107))]) or (2340 < 1589)) then
											v75 = v83[3 + 0];
										else
											v81[v3526 + (1035 - (925 + 107))] = v3525;
										end
									elseif ((4450 > 1823) and (v3525 < v81[v3526 + 1])) then
										v75 = v83[3];
									else
										v81[v3526 + (475 - (375 + 97))] = v3525;
									end
								else
									local v3538 = v83[6 - 4];
									local v3539 = v81[v3538];
									for v4353 = v3538 + 1, v83[1 + 2] do
										v7(v3539, v81[v4353]);
									end
								end
							elseif (v84 <= (1023 - 644)) then
								v81[v83[2]] = v81[v83[1577 - (298 + 1276)]][v81[v83[1784 - (1225 + 555)]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2 - 0]] = v83[3];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[3]][v81[v83[293 - (75 + 214)]]];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[454 - (366 + 85)]][v81[v83[857 - (380 + 473)]]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v83[4 - 1];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1571 - (934 + 635)]] = v81[v83[683 - (266 + 414)]][v81[v83[4 + 0]]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[3]][v81[v83[1 + 3]]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[547 - (62 + 483)]] = v81[v83[1637 - (904 + 730)]] * v81[v83[7 - 3]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]][v81[v83[1229 - (371 + 855)]]] = v81[v83[8 - 4]];
								v75 = v75 + (1213 - (749 + 463));
								v83 = v71[v75];
								v75 = v83[3];
							elseif ((v84 > (671 - 291)) or (3205 == 134)) then
								local v3540;
								local v3541;
								local v3542;
								v81[v83[2 + 0]] = v81[v83[4 - 1]][v83[10 - 6]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[6 - 4]] = {};
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[10 - 7]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]] = v83[7 - 4];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1 + 1]] = #v81[v83[3]];
								v75 = v75 + (3 - 2);
								v83 = v71[v75];
								v81[v83[2]] = v83[1 + 2];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v3542 = v83[1 + 1];
								v3541 = v81[v3542];
								v3540 = v81[v3542 + 2];
								if (v3540 > 0) then
									if (v3541 > v81[v3542 + (1 - 0)]) then
										v75 = v83[47 - (5 + 39)];
									else
										v81[v3542 + (1279 - (20 + 1256))] = v3541;
									end
								elseif ((2730 < 4250) and (v3541 < v81[v3542 + 1 + 0])) then
									v75 = v83[659 - (616 + 40)];
								else
									v81[v3542 + (8 - 5)] = v3541;
								end
							else
								local v3555 = 0;
								while true do
									if ((v3555 == (2 + 0)) or (2670 == 1918)) then
										v83 = v71[v75];
										v81[v83[2 - 0]] = v81[v83[3]][v81[v83[11 - 7]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v3555 = 3;
									end
									if (v3555 == (658 - (82 + 572))) then
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[7 - 4]] + v81[v83[714 - (349 + 361)]];
										v75 = v75 + (703 - (552 + 150));
										v3555 = 807 - (521 + 281);
									end
									if ((1223 == 1223) and (v3555 == 3)) then
										v81[v83[120 - (15 + 103)]] = v83[3];
										v75 = v75 + (1410 - (974 + 435));
										v83 = v71[v75];
										v81[v83[2 - 0]] = v81[v83[8 - 5]][v81[v83[4 + 0]]];
										v3555 = 2 + 2;
									end
									if (v3555 == (6 + 0)) then
										v75 = v83[1105 - (925 + 177)];
										break;
									end
									if ((3949 >= 2582) and (v3555 == (14 - 9))) then
										v83 = v71[v75];
										v81[v83[21 - (12 + 7)]][v81[v83[3 + 0]]] = v81[v83[10 - 6]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v3555 = 3 + 3;
									end
									if ((1 == v3555) or (2352 > 4228)) then
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[4 - 2]] = v81[v83[11 - 8]][v81[v83[4]]];
										v75 = v75 + (1 - 0);
										v3555 = 1 + 1;
									end
									if ((366 - (198 + 168)) == v3555) then
										v81[v83[2 + 0]] = v81[v83[3]][v81[v83[9 - 5]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[6 - 4]] = v83[3 - 0];
										v3555 = 2 - 1;
									end
								end
							end
						elseif (v84 <= 384) then
							if (v84 <= (696 - 314)) then
								if ((v83[62 - (4 + 56)] <= v81[v83[9 - 5]]) or (2367 <= 1237)) then
									v75 = v75 + (3 - 2);
								else
									v75 = v83[3];
								end
							elseif (v84 == 383) then
								do
									return v81[v83[2 + 0]]();
								end
							else
								local v3557 = 0 + 0;
								local v3558;
								local v3559;
								local v3560;
								local v3561;
								local v3562;
								while true do
									if (v3557 == 4) then
										v3559 = 0 - 0;
										for v7085 = v3562, v76 do
											v3559 = v3559 + (1899 - (1270 + 628));
											v81[v7085] = v3560[v3559];
										end
										v75 = v75 + (1323 - (570 + 752));
										v83 = v71[v75];
										v3557 = 5;
									end
									if (v3557 == (1461 - (958 + 503))) then
										v3558 = nil;
										v3559 = nil;
										v3560, v3561 = nil;
										v3562 = nil;
										v3557 = 1;
									end
									if (v3557 == 5) then
										v3562 = v83[3 - 1];
										v3558 = v81[v3562];
										for v7088 = v3562 + 1 + 0, v76 do
											v7(v3558, v81[v7088]);
										end
										break;
									end
									if ((v3557 == (3 - 2)) or (3065 < 2688)) then
										v81[v83[3 - 1]] = v81[v83[2 + 1]][v81[v83[1 + 3]]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[4 - 2]] = {};
										v3557 = 2;
									end
									if (v3557 == (932 - (799 + 130))) then
										v83 = v71[v75];
										v3562 = v83[2 + 0];
										v3560, v3561 = v74(v81[v3562]());
										v76 = (v3561 + v3562) - (1 + 0);
										v3557 = 19 - 15;
									end
									if (v3557 == (1 + 1)) then
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[1438 - (772 + 664)]] = v81[v83[1 + 2]][v81[v83[4]]];
										v75 = v75 + 1;
										v3557 = 2 + 1;
									end
								end
							end
						elseif ((3104 >= 2718) and (v84 <= (1459 - (46 + 1027)))) then
							if (v84 == (1738 - (467 + 886))) then
								if v81[v83[2 - 0]] then
									v75 = v75 + (1 - 0);
								else
									v75 = v83[686 - (582 + 101)];
								end
							else
								local v3563 = 745 - (574 + 171);
								while true do
									if (v3563 == 3) then
										v81[v83[2 + 0]] = v81[v83[370 - (66 + 301)]][v81[v83[485 - (423 + 58)]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1082 - (141 + 939)]] = v81[v83[684 - (532 + 149)]][v83[3 + 1]];
										v3563 = 922 - (592 + 326);
									end
									if ((3572 >= 3486) and (v3563 == (7 - 5))) then
										v83 = v71[v75];
										v81[v83[9 - 7]] = v81[v83[1 + 2]] + v83[829 - (467 + 358)];
										v75 = v75 + (4 - 3);
										v83 = v71[v75];
										v3563 = 3;
									end
									if ((1427 < 1739) and (v3563 == (1 - 0))) then
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]][v81[v83[9 - 6]]] = v81[v83[8 - 4]];
										v75 = v75 + (1827 - (233 + 1593));
										v3563 = 2;
									end
									if (v3563 == (0 - 0)) then
										v81[v83[764 - (28 + 734)]] = v81[v83[4 - 1]][v83[1135 - (337 + 794)]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]] = {};
										v3563 = 1;
									end
									if ((v3563 == (4 + 2)) or (2081 > 2873)) then
										v81[v83[2]] = v81[v83[3]] + v83[4 + 0];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[704 - (342 + 360)]] = v83[3 + 0];
										break;
									end
									if (v3563 == (1003 - (440 + 559))) then
										v75 = v75 + (579 - (150 + 428));
										v83 = v71[v75];
										v81[v83[1 + 1]] = {};
										v75 = v75 + 1;
										v3563 = 162 - (15 + 142);
									end
									if (v3563 == (1 + 4)) then
										v83 = v71[v75];
										v81[v83[3 - 1]][v81[v83[3 + 0]]] = v81[v83[1680 - (757 + 919)]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v3563 = 27 - 21;
									end
								end
							end
						elseif ((1152 > 379) and (v84 > (274 + 113))) then
							local v3564 = 0;
							local v3565;
							local v3566;
							local v3567;
							local v3568;
							while true do
								if (v3564 == 8) then
									do
										return v81[v83[2]];
									end
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v75 = v83[4 - 1];
									break;
								end
								if (v3564 == 3) then
									v81[v83[53 - (8 + 43)]] = v83[7 - 4];
									v75 = v75 + 1;
									v83 = v71[v75];
									v3568 = v83[1 + 1];
									v3564 = 300 - (236 + 60);
								end
								if (v3564 == (1 + 5)) then
									v75 = v75 + 1;
									v83 = v71[v75];
									v61[v83[3 + 0]] = v81[v83[1 + 1]];
									v75 = v75 + (2 - 1);
									v3564 = 24 - 17;
								end
								if ((v3564 == (3 + 4)) or (4127 <= 682)) then
									v83 = v71[v75];
									v81[v83[2]] = v83[9 - 6];
									v75 = v75 + 1;
									v83 = v71[v75];
									v3564 = 7 + 1;
								end
								if ((v3564 == 2) or (3733 <= 1984)) then
									v83 = v71[v75];
									v81[v83[270 - (35 + 233)]] = v83[1900 - (547 + 1350)];
									v75 = v75 + 1;
									v83 = v71[v75];
									v3564 = 5 - 2;
								end
								if (v3564 == 5) then
									v75 = v75 + 1;
									v83 = v71[v75];
									v3568 = v83[8 - 6];
									v81[v3568] = v81[v3568](v13(v81, v3568 + (603 - (593 + 9)), v76));
									v3564 = 1401 - (298 + 1097);
								end
								if ((v3564 == (0 - 0)) or (795 > 1071)) then
									v3565 = nil;
									v3566, v3567 = nil;
									v3568 = nil;
									v81[v83[9 - 7]] = v61[v83[7 - 4]];
									v3564 = 835 - (479 + 355);
								end
								if ((358 < 4497) and (v3564 == (397 - (175 + 221)))) then
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[6 - 3]];
									v75 = v75 + 1 + 0;
									v3564 = 1 + 1;
								end
								if (v3564 == (12 - 8)) then
									v3566, v3567 = v74(v81[v3568](v13(v81, v3568 + (1326 - (471 + 854)), v83[810 - (55 + 752)])));
									v76 = (v3567 + v3568) - 1;
									v3565 = 385 - (97 + 288);
									for v7089 = v3568, v76 do
										local v7090 = 1435 - (317 + 1118);
										while true do
											if ((1889 - (198 + 1691)) == v7090) then
												v3565 = v3565 + 1 + 0;
												v81[v7089] = v3566[v3565];
												break;
											end
										end
									end
									v3564 = 605 - (263 + 337);
								end
							end
						else
							local v3569 = 1010 - (577 + 433);
							local v3570;
							while true do
								if ((1790 < 4770) and (v3569 == 5)) then
									v83 = v71[v75];
									v3570 = v83[1 + 1];
									do
										return v13(v81, v3570, v76);
									end
									v75 = v75 + (987 - (185 + 801));
									v83 = v71[v75];
									v3569 = 520 - (270 + 244);
								end
								if (((3 - 1) == v3569) or (4749 <= 1742)) then
									v81[v83[2]] = v81[v83[3 + 0]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[3 - 1]] = v83[2 + 1];
									v75 = v75 + (2 - 1);
									v3569 = 5 - 2;
								end
								if ((3331 <= 4654) and (v3569 == 3)) then
									v83 = v71[v75];
									v81[v83[1265 - (653 + 610)]] = v81[v83[1783 - (1358 + 422)]][v81[v83[1155 - (123 + 1028)]]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[619 - (469 + 148)]] = v81[v83[2 + 1]] + v81[v83[10 - 6]];
									v3569 = 4;
								end
								if ((0 + 0) == v3569) then
									v3570 = nil;
									v81[v83[9 - 7]] = v81[v83[13 - 10]][v81[v83[4]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v61[v83[3]];
									v3569 = 1;
								end
								if (v3569 == (12 - 6)) then
									v75 = v83[3];
									break;
								end
								if (v3569 == (1431 - (187 + 1243))) then
									v75 = v75 + (1905 - (1011 + 893));
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[1 + 2]];
									v75 = v75 + (1482 - (1349 + 132));
									v83 = v71[v75];
									v3569 = 2 + 0;
								end
								if (v3569 == (1420 - (921 + 495))) then
									v75 = v75 + 1;
									v83 = v71[v75];
									v3570 = v83[758 - (112 + 644)];
									do
										return v81[v3570](v13(v81, v3570 + (2 - 1), v83[3]));
									end
									v75 = v75 + 1 + 0;
									v3569 = 283 - (140 + 138);
								end
							end
						end
					elseif (v84 <= (385 + 10)) then
						if (v84 <= (655 - (74 + 190))) then
							if (v84 <= (1741 - (233 + 1119))) then
								local v830 = 0;
								while true do
									if (v830 == (2 + 0)) then
										v81[v83[5 - 3]] = v83[4 - 1];
										v75 = v75 + 1;
										v83 = v71[v75];
										v830 = 2 + 1;
									end
									if (v830 == 5) then
										v81[v83[3 - 1]][v81[v83[3]]] = v81[v83[509 - (248 + 257)]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v830 = 6;
									end
									if (v830 == 1) then
										v81[v83[1493 - (1472 + 19)]] = v81[v83[3]][v81[v83[4 + 0]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v830 = 2;
									end
									if (0 == v830) then
										v81[v83[274 - (120 + 152)]] = v83[3 + 0];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v830 = 1 + 0;
									end
									if (v830 == (1222 - (401 + 815))) then
										v81[v83[1 + 1]] = v83[3];
										break;
									end
									if (v830 == 4) then
										v81[v83[5 - 3]] = v81[v83[3]][v81[v83[4]]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v830 = 5;
									end
									if ((4755 >= 392) and (v830 == (1 + 2))) then
										v81[v83[2]] = v81[v83[7 - 4]][v81[v83[1 + 3]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v830 = 764 - (51 + 709);
									end
								end
							elseif (v84 > (499 - (33 + 76))) then
								local v3571 = 0 - 0;
								while true do
									if (v3571 == (4 + 2)) then
										v81[v83[2]] = v83[5 - 2];
										break;
									end
									if (v3571 == (553 - (154 + 396))) then
										v81[v83[2]] = v81[v83[7 - 4]][v81[v83[4 + 0]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v3571 = 4;
									end
									if ((4965 > 912) and (v3571 == (1 + 4))) then
										v81[v83[1514 - (24 + 1488)]][v81[v83[10 - 7]]] = v81[v83[431 - (246 + 181)]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v3571 = 6 + 0;
									end
									if (v3571 == (2 + 0)) then
										v81[v83[2 + 0]] = v83[1862 - (413 + 1446)];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v3571 = 3;
									end
									if ((v3571 == (2 + 2)) or (2234 <= 1107)) then
										v81[v83[1978 - (29 + 1947)]] = v81[v83[3 + 0]][v81[v83[8 - 4]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v3571 = 12 - 7;
									end
									if (v3571 == 0) then
										v81[v83[2 + 0]] = v83[3];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v3571 = 2 - 1;
									end
									if ((282 <= 1399) and (v3571 == 1)) then
										v81[v83[1 + 1]] = v81[v83[7 - 4]][v81[v83[4]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v3571 = 5 - 3;
									end
								end
							else
								v81[v83[4 - 2]] = v81[v83[405 - (74 + 328)]][v81[v83[657 - (144 + 509)]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2 + 0]] = v61[v83[2 + 1]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]] = v83[1366 - (319 + 1044)];
								v75 = v75 + (3 - 2);
								v83 = v71[v75];
								v81[v83[632 - (14 + 616)]] = v81[v83[581 - (303 + 275)]][v81[v83[4]]];
								v75 = v75 + (1851 - (1659 + 191));
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[3]][v81[v83[1 + 3]]];
								v75 = v75 + (569 - (205 + 363));
								v83 = v71[v75];
								v81[v83[3 - 1]][v81[v83[577 - (147 + 427)]]] = v81[v83[5 - 1]];
								v75 = v75 + (3 - 2);
								v83 = v71[v75];
								v81[v83[1 + 1]] = v83[4 - 1];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v75 = v83[3];
							end
						elseif ((v84 <= (1621 - (1108 + 120))) or (2563 <= 1132)) then
							if (v84 > (1364 - 972)) then
								local v3587 = v83[653 - (303 + 348)];
								do
									return v81[v3587](v13(v81, v3587 + (312 - (242 + 69)), v83[1 + 2]));
								end
							else
								v81[v83[2]] = v81[v83[216 - (172 + 41)]] + v81[v83[2 + 2]];
								v75 = v75 + (139 - (40 + 98));
								v83 = v71[v75];
								v81[v83[5 - 3]] = v81[v83[800 - (161 + 636)]][v81[v83[4]]];
								v75 = v75 + (4 - 3);
								v83 = v71[v75];
								v81[v83[2]] = v83[3];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[3 + 0]][v81[v83[1 + 3]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]] = v83[2 + 1];
								v75 = v75 + (630 - (123 + 506));
								v83 = v71[v75];
								v75 = v83[6 - 3];
							end
						elseif (v84 == (2296 - (296 + 1606))) then
							v81[v83[2 + 0]] = v81[v83[3]][v81[v83[8 - 4]]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[2 + 0]] = v83[3 + 0];
							v75 = v75 + (1620 - (863 + 756));
							v83 = v71[v75];
							v81[v83[1426 - (39 + 1385)]] = v81[v83[762 - (52 + 707)]][v81[v83[2 + 2]]];
							v75 = v75 + (446 - (358 + 87));
							v83 = v71[v75];
							v81[v83[2]][v81[v83[3]]] = v81[v83[2 + 2]];
							v75 = v75 + (3 - 2);
							v83 = v71[v75];
							v75 = v83[1337 - (27 + 1307)];
						else
							local v3605;
							v81[v83[3 - 1]] = v81[v83[3 + 0]][v81[v83[9 - 5]]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v3605 = v83[1 + 1];
							v81[v3605] = v81[v3605]();
							v75 = v75 + (2 - 1);
							v83 = v71[v75];
							v81[v83[2]][v81[v83[266 - (152 + 111)]]] = v81[v83[4 + 0]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[2 - 0]] = v81[v83[3 + 0]] + v83[14 - 10];
							v75 = v75 + (2 - 1);
							v83 = v71[v75];
							v81[v83[1 + 1]] = v81[v83[284 - (32 + 249)]][v81[v83[1058 - (793 + 261)]]];
							v75 = v75 + (2 - 1);
							v83 = v71[v75];
							v81[v83[2 + 0]] = v83[5 - 2];
						end
					elseif (v84 <= (625 - (109 + 118))) then
						if (v84 <= (63 + 333)) then
							local v831 = 595 - (115 + 480);
							while true do
								if (v831 == (1 + 3)) then
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[1416 - (547 + 866)];
									break;
								end
								if ((4350 > 2046) and (v831 == (262 - (259 + 3)))) then
									v81[v83[2]] = v81[v83[2 + 1]][v81[v83[8 - 4]]];
									v75 = v75 + (1420 - (891 + 528));
									v83 = v71[v75];
									v81[v83[2 - 0]] = v61[v83[3]];
									v831 = 1 + 0;
								end
								if ((v831 == (4 - 3)) or (3459 >= 3471)) then
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[3 - 1]] = v83[11 - 8];
									v75 = v75 + 1 + 0;
									v831 = 1 + 1;
								end
								if ((v831 == (6 - 3)) or (1930 > 4811)) then
									v81[v83[2]] = v81[v83[3]][v81[v83[1955 - (1144 + 807)]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[4 - 2]][v81[v83[3 + 0]]] = v81[v83[6 - 2]];
									v831 = 1116 - (930 + 182);
								end
								if ((2521 == 2521) and (v831 == (1836 - (1429 + 405)))) then
									v83 = v71[v75];
									v81[v83[779 - (641 + 136)]] = v81[v83[8 - 5]][v81[v83[3 + 1]]];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v831 = 3;
								end
							end
						elseif (v84 > (29 + 368)) then
							v81[v83[715 - (87 + 626)]] = v83[4 - 1];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[2]] = v81[v83[1288 - (1261 + 24)]][v81[v83[4]]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[2]] = v83[10 - 7];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[2]] = v81[v83[3]][v81[v83[4 + 0]]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[1 + 1]] = v81[v83[3]][v81[v83[4]]];
							v75 = v75 + (3 - 2);
							v83 = v71[v75];
							v81[v83[8 - 6]] = v83[860 - (822 + 35)];
							v75 = v75 + (1786 - (360 + 1425));
							v83 = v71[v75];
							v81[v83[2]] = v81[v83[7 - 4]][v81[v83[11 - 7]]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[298 - (283 + 13)]] = v81[v83[5 - 2]][v81[v83[3 + 1]]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[2 - 0]] = v81[v83[1033 - (810 + 220)]][v81[v83[7 - 3]]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[213 - (195 + 16)]][v81[v83[6 - 3]]] = v81[v83[17 - 13]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[1 + 1]] = v83[5 - 2];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v75 = v83[2 + 1];
						else
							v81[v83[587 - (92 + 493)]] = v62[v83[2 + 1]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[2]] = v62[v83[3]];
							v75 = v75 + (1159 - (75 + 1083));
							v83 = v71[v75];
							v81[v83[7 - 5]] = v81[v83[4 - 1]][v83[4]];
							v75 = v75 + (4 - 3);
							v83 = v71[v75];
							v81[v83[1 + 1]] = v62[v83[2 + 1]];
							v75 = v75 + (4 - 3);
							v83 = v71[v75];
							v81[v83[2 + 0]] = v81[v83[3]][v83[4]];
							v75 = v75 + (1376 - (159 + 1216));
							v83 = v71[v75];
							v81[v83[6 - 4]] = v62[v83[4 - 1]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[2]] = v81[v83[8 - 5]][v83[1619 - (418 + 1197)]];
							v75 = v75 + (965 - (632 + 332));
							v83 = v71[v75];
							v81[v83[2]] = v62[v83[3]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[2]] = v81[v83[3]][v83[1602 - (964 + 634)]];
							v75 = v75 + (1 - 0);
							v83 = v71[v75];
							v81[v83[1 + 1]] = v62[v83[3 + 0]];
						end
					elseif (v84 <= (380 + 20)) then
						if ((v84 > 399) or (3740 == 222)) then
							local v3653;
							local v3654;
							local v3653, v3655;
							local v3656;
							v81[v83[2]] = v81[v83[3 - 0]][v81[v83[6 - 2]]];
							v75 = v75 + (2 - 1);
							v83 = v71[v75];
							v81[v83[1653 - (1559 + 92)]] = v81[v83[3 + 0]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[2]] = v81[v83[3 + 0]][v81[v83[41 - (9 + 28)]]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[5 - 3]] = v61[v83[1955 - (922 + 1030)]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[385 - (345 + 38)]] = v81[v83[1 + 2]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[2 + 0]] = v83[9 - 6];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[2]] = v81[v83[3]] + v81[v83[4]];
							v75 = v75 + (561 - (546 + 14));
							v83 = v71[v75];
							v81[v83[1069 - (7 + 1060)]] = v83[3 + 0];
							v75 = v75 + (3 - 2);
							v83 = v71[v75];
							v81[v83[2]] = v81[v83[403 - (256 + 144)]] + v81[v83[126 - (7 + 115)]];
							v75 = v75 + (535 - (21 + 513));
							v83 = v71[v75];
							v81[v83[2 + 0]] = v81[v83[1280 - (59 + 1218)]];
							v75 = v75 + (1 - 0);
							v83 = v71[v75];
							v3656 = v83[3 - 1];
							v3653, v3655 = v74(v81[v3656](v13(v81, v3656 + 1, v83[8 - 5])));
							v76 = (v3655 + v3656) - (187 - (155 + 31));
							v3654 = 0 - 0;
							for v4393 = v3656, v76 do
								v3654 = v3654 + 1;
								v81[v4393] = v3653[v3654];
							end
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v3656 = v83[2 + 0];
							v3653, v3655 = v74(v81[v3656](v13(v81, v3656 + (1992 - (1417 + 574)), v76)));
							v76 = (v3655 + v3656) - 1;
							v3654 = 152 - (112 + 40);
							for v4396 = v3656, v76 do
								v3654 = v3654 + (1 - 0);
								v81[v4396] = v3653[v3654];
							end
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v3656 = v83[686 - (326 + 358)];
							v3653 = {v81[v3656](v13(v81, v3656 + (2 - 1), v76))};
							v3654 = 1717 - (85 + 1632);
							for v4399 = v3656, v83[4 + 0] do
								local v4400 = 1139 - (1096 + 43);
								while true do
									if (v4400 == 0) then
										v3654 = v3654 + (419 - (176 + 242));
										v81[v4399] = v3653[v3654];
										break;
									end
								end
							end
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[914 - (313 + 599)]] = v81[v83[3]];
							v75 = v75 + (640 - (402 + 237));
							v83 = v71[v75];
							v81[v83[2 + 0]] = v81[v83[1059 - (551 + 505)]];
							v75 = v75 + (3 - 2);
							v83 = v71[v75];
							v81[v83[4 - 2]] = v83[3];
						else
							v81[v83[2]] = v81[v83[436 - (268 + 165)]][v83[1 + 3]];
							v75 = v75 + (2 - 1);
							v83 = v71[v75];
							v81[v83[1 + 1]] = v81[v83[7 - 4]][v81[v83[1776 - (238 + 1534)]]];
							v75 = v75 + (1 - 0);
							v83 = v71[v75];
							v81[v83[2]] = v81[v83[3]][v83[922 - (302 + 616)]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[2]] = v81[v83[1831 - (1054 + 774)]][v81[v83[4 + 0]]];
							v75 = v75 + (1326 - (240 + 1085));
							v83 = v71[v75];
							v81[v83[2]][v81[v83[1230 - (1220 + 7)]]] = v81[v83[3 + 1]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[2]] = v81[v83[1972 - (1819 + 150)]] + v83[4];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[2 + 0]] = v83[3 + 0];
						end
					elseif (v84 > 401) then
						local v3691 = 0 + 0;
						while true do
							if (v3691 == (2 + 4)) then
								v81[v83[2 + 0]][v81[v83[3 - 0]]] = v81[v83[1368 - (229 + 1135)]];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v3691 = 17 - 10;
							end
							if ((1 + 6) == v3691) then
								v81[v83[1 + 1]] = v83[785 - (289 + 493)];
								break;
							end
							if (v3691 == 1) then
								v81[v83[1 + 1]] = v81[v83[3]][v81[v83[13 - 9]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v3691 = 4 - 2;
							end
							if (v3691 == (3 + 0)) then
								v81[v83[1 + 1]] = v83[1291 - (1170 + 118)];
								v75 = v75 + (1810 - (817 + 992));
								v83 = v71[v75];
								v3691 = 9 - 5;
							end
							if (v3691 == (9 - 7)) then
								v81[v83[1174 - (852 + 320)]] = v61[v83[2 + 1]];
								v75 = v75 + (802 - (731 + 70));
								v83 = v71[v75];
								v3691 = 3;
							end
							if ((0 - 0) == v3691) then
								v81[v83[600 - (17 + 581)]] = v83[1326 - (470 + 853)];
								v75 = v75 + (65 - (30 + 34));
								v83 = v71[v75];
								v3691 = 1;
							end
							if ((v3691 == (10 - 5)) or (1780 >= 2728)) then
								v81[v83[222 - (180 + 40)]] = v81[v83[7 - 4]][v81[v83[182 - (11 + 167)]]];
								v75 = v75 + (1640 - (127 + 1512));
								v83 = v71[v75];
								v3691 = 10 - 4;
							end
							if ((1449 < 4893) and (v3691 == (13 - 9))) then
								v81[v83[1 + 1]] = v81[v83[6 - 3]][v81[v83[4]]];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v3691 = 3 + 2;
							end
						end
					else
						v81[v83[4 - 2]] = v81[v83[891 - (304 + 584)]][v81[v83[8 - 4]]];
						v75 = v75 + (2 - 1);
						v83 = v71[v75];
						v81[v83[2 - 0]] = v83[3];
						v75 = v75 + 1 + 0;
						v83 = v71[v75];
						v81[v83[9 - 7]] = v81[v83[1664 - (997 + 664)]][v81[v83[3 + 1]]];
						v75 = v75 + 1 + 0;
						v83 = v71[v75];
						v81[v83[2]][v81[v83[3 + 0]]] = v81[v83[988 - (231 + 753)]];
						v75 = v75 + 1;
						v83 = v71[v75];
						v81[v83[2]] = v83[4 - 1];
						v75 = v75 + (1579 - (615 + 963));
						v83 = v71[v75];
						v81[v83[1 + 1]] = v81[v83[3 + 0]] + v81[v83[6 - 2]];
						v75 = v75 + (1805 - (863 + 941));
						v83 = v71[v75];
						v81[v83[840 - (461 + 377)]] = v83[3 + 0];
						v75 = v75 + 1;
						v83 = v71[v75];
						v75 = v83[3];
					end
				elseif (v84 <= (108 + 307)) then
					if (v84 <= (1680 - (455 + 817))) then
						if ((v84 <= 405) or (4450 == 4457)) then
							if ((v84 <= (260 + 143)) or (4832 < 2138)) then
								if (v81[v83[834 - (123 + 709)]] > v81[v83[2 + 2]]) then
									v75 = v75 + 1;
								else
									v75 = v75 + v83[1697 - (618 + 1076)];
								end
							elseif (v84 > (764 - 360)) then
								v81[v83[2]] = v61[v83[3]];
								v75 = v75 + (4 - 3);
								v83 = v71[v75];
								v81[v83[2]] = v62[v83[3 + 0]];
								v75 = v75 + (945 - (657 + 287));
								v83 = v71[v75];
								v81[v83[7 - 5]] = v62[v83[1854 - (1256 + 595)]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]] = v61[v83[77 - (59 + 15)]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v61[v83[3]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[754 - (406 + 346)]] = v61[v83[3]];
							else
								v81[v83[4 - 2]] = v83[11 - 8] ~= (0 + 0);
							end
						elseif (v84 <= (597 - (127 + 64))) then
							v81[v83[947 - (70 + 875)]] = v81[v83[4 - 1]][v81[v83[9 - 5]]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[2 + 0]] = v83[1592 - (1039 + 550)];
							v75 = v75 + (203 - (35 + 167));
							v83 = v71[v75];
							v81[v83[1215 - (103 + 1110)]] = v81[v83[1117 - (540 + 574)]][v81[v83[12 - 8]]];
							v75 = v75 + (1395 - (1283 + 111));
							v83 = v71[v75];
							v81[v83[2]] = v81[v83[355 - (204 + 148)]][v81[v83[5 - 1]]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[1 + 1]] = v83[3];
							v75 = v75 + (551 - (58 + 492));
							v83 = v71[v75];
							v81[v83[8 - 6]] = v81[v83[3]][v81[v83[8 - 4]]];
							v75 = v75 + (4 - 3);
							v83 = v71[v75];
							v81[v83[2 + 0]] = v81[v83[1 + 2]] * v81[v83[787 - (531 + 252)]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[2 + 0]][v81[v83[8 - 5]]] = v81[v83[1790 - (928 + 858)]];
							v75 = v75 + (1 - 0);
							v83 = v71[v75];
							v75 = v83[3];
						elseif (v84 > 407) then
							v81[v83[774 - (108 + 664)]] = v83[4 - 1];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[2]] = v81[v83[6 - 3]][v81[v83[3 + 1]]];
							v75 = v75 + (836 - (732 + 103));
							v83 = v71[v75];
							v81[v83[2]] = v83[631 - (351 + 277)];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[682 - (538 + 142)]] = v81[v83[13 - 10]][v81[v83[1831 - (189 + 1638)]]];
							v75 = v75 + (2 - 1);
							v83 = v71[v75];
							v81[v83[1225 - (348 + 875)]] = v81[v83[1219 - (1202 + 14)]][v81[v83[4]]];
							v75 = v75 + (636 - (619 + 16));
							v83 = v71[v75];
							v81[v83[681 - (445 + 234)]][v81[v83[8 - 5]]] = v81[v83[505 - (295 + 206)]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v75 = v83[6 - 3];
						else
							v81[v83[2]] = v81[v83[3]][v83[4 + 0]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[2]] = v81[v83[3 + 0]][v81[v83[3 + 1]]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[149 - (84 + 63)]][v81[v83[3]]] = v81[v83[4]];
							v75 = v75 + (1373 - (913 + 459));
							v83 = v71[v75];
							v81[v83[784 - (700 + 82)]] = v81[v83[1 + 2]] + v83[4 + 0];
							v75 = v75 + (444 - (362 + 81));
							v83 = v71[v75];
							v81[v83[181 - (133 + 46)]] = v81[v83[5 - 2]] + v83[1529 - (1219 + 306)];
							v75 = v75 + (1958 - (1012 + 945));
							v83 = v71[v75];
							v81[v83[2]] = v81[v83[760 - (481 + 276)]][v81[v83[8 - 4]]];
							v75 = v75 + (2 - 1);
							v83 = v71[v75];
							v81[v83[125 - (49 + 74)]] = v81[v83[1 + 2]][v83[10 - 6]];
							v75 = v75 + (3 - 2);
							v83 = v71[v75];
							v81[v83[5 - 3]] = v61[v83[3]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[7 - 5]] = v81[v83[12 - 9]][v83[4]];
							v75 = v75 + (2 - 1);
							v83 = v71[v75];
							v81[v83[5 - 3]] = v81[v83[3]][v81[v83[1 + 3]]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[4 - 2]][v81[v83[3]]] = v81[v83[4 + 0]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[5 - 3]] = v83[7 - 4];
						end
					elseif (v84 <= (371 + 40)) then
						if (v84 <= (21 + 388)) then
							local v847 = 0 - 0;
							while true do
								if (v847 == (0 - 0)) then
									v81[v83[1730 - (17 + 1711)]] = v81[v83[8 - 5]][v83[4]];
									v75 = v75 + (114 - (14 + 99));
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[5 - 2]][v83[314 - (287 + 23)]];
									v847 = 1;
								end
								if (v847 == 1) then
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[4 - 2]][v81[v83[437 - (54 + 380)]]] = v81[v83[10 - 6]];
									v75 = v75 + (1637 - (486 + 1150));
									v847 = 818 - (356 + 460);
								end
								if (v847 == (3 + 0)) then
									v75 = v83[3];
									break;
								end
								if ((4938 >= 2760) and (v847 == 2)) then
									v83 = v71[v75];
									v81[v83[2 - 0]] = v83[6 - 3];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v847 = 3;
								end
							end
						elseif (v84 > 410) then
							local v3748 = 1453 - (1281 + 172);
							local v3749;
							local v3750;
							local v3751;
							local v3752;
							local v3753;
							while true do
								if (v3748 == (589 - (158 + 427))) then
									v76 = (v3752 + v3753) - (1 + 0);
									v3750 = 0;
									for v7093 = v3753, v76 do
										local v7094 = 0 - 0;
										while true do
											if (v7094 == 0) then
												v3750 = v3750 + 1 + 0;
												v81[v7093] = v3751[v3750];
												break;
											end
										end
									end
									v75 = v75 + 1;
									v83 = v71[v75];
									v3753 = v83[2];
									v3748 = 881 - (103 + 773);
								end
								if (v3748 == 5) then
									v3751, v3752 = v74(v81[v3753](v13(v81, v3753 + 1 + 0, v76)));
									v76 = (v3752 + v3753) - 1;
									v3750 = 1494 - (739 + 755);
									for v7095 = v3753, v76 do
										local v7096 = 343 - (39 + 304);
										while true do
											if (v7096 == (505 - (129 + 376))) then
												v3750 = v3750 + (1541 - (282 + 1258));
												v81[v7095] = v3751[v3750];
												break;
											end
										end
									end
									v75 = v75 + 1;
									v83 = v71[v75];
									v3748 = 1293 - (204 + 1083);
								end
								if ((712 - (471 + 235)) == v3748) then
									v3753 = v83[2];
									v3749 = v81[v3753];
									for v7097 = v3753 + (2 - 1), v76 do
										v7(v3749, v81[v7097]);
									end
									break;
								end
								if (1 == v3748) then
									v83 = v71[v75];
									v81[v83[1089 - (38 + 1049)]] = v81[v83[1628 - (1437 + 188)]][v81[v83[2 + 2]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v61[v83[1 + 2]];
									v75 = v75 + (1 - 0);
									v3748 = 45 - (11 + 32);
								end
								if (v3748 == (255 - (81 + 174))) then
									v3749 = nil;
									v3750 = nil;
									v3751, v3752 = nil;
									v3753 = nil;
									v81[v83[5 - 3]] = {};
									v75 = v75 + (4 - 3);
									v3748 = 765 - (513 + 251);
								end
								if ((5 - 2) == v3748) then
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[1 + 2]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v3753 = v83[2];
									v3751, v3752 = v74(v81[v3753](v13(v81, v3753 + 1, v83[1127 - (1075 + 49)])));
									v3748 = 770 - (373 + 393);
								end
								if (v3748 == 2) then
									v83 = v71[v75];
									v81[v83[6 - 4]] = v81[v83[891 - (875 + 13)]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[2 + 1]] + v83[16 - 12];
									v75 = v75 + (2 - 1);
									v3748 = 1 + 2;
								end
							end
						else
							local v3754;
							v81[v83[6 - 4]] = v61[v83[3 + 0]];
							v75 = v75 + (4 - 3);
							v83 = v71[v75];
							v81[v83[2]] = v81[v83[336 - (273 + 60)]][v83[15 - 11]];
							v75 = v75 + (2 - 1);
							v83 = v71[v75];
							v81[v83[7 - 5]] = v81[v83[3]][v81[v83[5 - 1]]];
							v75 = v75 + (556 - (361 + 194));
							v83 = v71[v75];
							for v4413 = v83[2 + 0], v83[3] do
								v81[v4413] = nil;
							end
							v75 = v75 + (3 - 2);
							v83 = v71[v75];
							v81[v83[2 + 0]] = v61[v83[3]];
							v75 = v75 + (3 - 2);
							v83 = v71[v75];
							v3754 = v83[1 + 1];
							v81[v3754] = v81[v3754](v13(v81, v3754 + (3 - 2), v83[850 - (257 + 590)]));
							v75 = v75 + (3 - 2);
							v83 = v71[v75];
							v81[v83[1957 - (856 + 1099)]][v81[v83[1929 - (1556 + 370)]]] = v81[v83[13 - 9]];
							v75 = v75 + (1 - 0);
							v83 = v71[v75];
							v75 = v83[175 - (24 + 148)];
						end
					elseif (v84 <= 413) then
						if (v84 == (104 + 308)) then
							v81[v83[2 + 0]] = v81[v83[4 - 1]][v81[v83[4 + 0]]];
							v75 = v75 + (2 - 1);
							v83 = v71[v75];
							v81[v83[6 - 4]] = v83[3];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[2 - 0]] = v81[v83[9 - 6]][v81[v83[11 - 7]]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[2 + 0]] = v81[v83[2 + 1]][v81[v83[18 - 14]]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[1 + 1]] = v83[3];
							v75 = v75 + (2 - 1);
							v83 = v71[v75];
							v81[v83[5 - 3]] = v81[v83[1 + 2]][v81[v83[15 - 11]]];
							v75 = v75 + (2 - 1);
							v83 = v71[v75];
							v81[v83[2 - 0]] = v81[v83[3]][v81[v83[4 + 0]]];
							v75 = v75 + (1 - 0);
							v83 = v71[v75];
							v81[v83[2]] = v81[v83[1 + 2]][v81[v83[7 - 3]]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[2 + 0]][v81[v83[1722 - (976 + 743)]]] = v81[v83[8 - 4]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[1516 - (1273 + 241)]] = v83[7 - 4];
						else
							local v3787 = 0 - 0;
							while true do
								if (v3787 == (268 - (135 + 130))) then
									v81[v83[3 - 1]] = v81[v83[3 + 0]][v81[v83[4 + 0]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v3787 = 4;
								end
								if (v3787 == (14 - 9)) then
									v75 = v83[10 - 7];
									break;
								end
								if ((4113 >= 911) and (v3787 == (1 + 0))) then
									v81[v83[1743 - (1289 + 452)]] = v81[v83[1 + 2]][v83[4]];
									v75 = v75 + (330 - (90 + 239));
									v83 = v71[v75];
									v3787 = 2;
								end
								if (v3787 == 4) then
									v81[v83[931 - (117 + 812)]][v81[v83[1002 - (146 + 853)]]] = v81[v83[1969 - (986 + 979)]];
									v75 = v75 + (659 - (555 + 103));
									v83 = v71[v75];
									v3787 = 7 - 2;
								end
								if (v3787 == (737 - (329 + 408))) then
									v81[v83[1 + 1]] = v81[v83[1713 - (838 + 872)]][v81[v83[4]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v3787 = 524 - (400 + 123);
								end
								if (v3787 == (1 + 1)) then
									v81[v83[2]] = v81[v83[1959 - (547 + 1409)]][v83[84 - (73 + 7)]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v3787 = 1 + 2;
								end
							end
						end
					elseif (v84 > (291 + 123)) then
						v81[v83[5 - 3]] = v81[v83[4 - 1]][v81[v83[3 + 1]]];
						v75 = v75 + 1 + 0;
						v83 = v71[v75];
						v81[v83[2 + 0]] = v83[10 - 7];
						v75 = v75 + 1;
						v83 = v71[v75];
						v81[v83[1991 - (98 + 1891)]] = v81[v83[42 - (16 + 23)]][v81[v83[1736 - (1184 + 548)]]];
						v75 = v75 + (1531 - (270 + 1260));
						v83 = v71[v75];
						v81[v83[2 + 0]] = v81[v83[738 - (60 + 675)]][v81[v83[1 + 3]]];
						v75 = v75 + (1203 - (984 + 218));
						v83 = v71[v75];
						v81[v83[2]] = v83[3];
						v75 = v75 + (383 - (45 + 337));
						v83 = v71[v75];
						v81[v83[2]] = v81[v83[331 - (74 + 254)]][v81[v83[4]]];
						v75 = v75 + 1 + 0;
						v83 = v71[v75];
						v81[v83[2 + 0]] = v81[v83[1352 - (1190 + 159)]][v81[v83[3 + 1]]];
						v75 = v75 + 1 + 0;
						v83 = v71[v75];
						v81[v83[2]][v81[v83[3 + 0]]] = v81[v83[9 - 5]];
						v75 = v75 + 1;
						v83 = v71[v75];
						v75 = v83[3];
					else
						v81[v83[1 + 1]] = v81[v83[1421 - (192 + 1226)]][v83[4]];
						v75 = v75 + 1;
						v83 = v71[v75];
						v81[v83[738 - (511 + 225)]] = v81[v83[3 + 0]][v83[1399 - (1200 + 195)]];
						v75 = v75 + 1;
						v83 = v71[v75];
						v81[v83[2]][v81[v83[1581 - (329 + 1249)]]] = v81[v83[781 - (631 + 146)]];
						v75 = v75 + 1;
						v83 = v71[v75];
						v81[v83[7 - 5]] = v81[v83[1 + 2]] + v83[1037 - (510 + 523)];
						v75 = v75 + 1 + 0;
						v83 = v71[v75];
						v81[v83[9 - 7]] = v83[2 + 1];
					end
				elseif (v84 <= (1166 - 744)) then
					if (v84 <= (1889 - (996 + 475))) then
						if (v84 <= (165 + 251)) then
							local v848 = 0;
							while true do
								if (v848 == (0 - 0)) then
									v81[v83[2]] = v61[v83[3 + 0]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1944 - (1132 + 810)]] = v81[v83[4 - 1]][v83[15 - 11]];
									v848 = 1 + 0;
								end
								if (v848 == (1963 - (941 + 1020))) then
									v83 = v71[v75];
									v81[v83[2]][v81[v83[3]]] = v81[v83[4]];
									v75 = v75 + (528 - (313 + 214));
									v83 = v71[v75];
									v848 = 3;
								end
								if ((v848 == (547 - (363 + 181))) or (3725 <= 3397)) then
									v81[v83[2]] = v81[v83[3]] + v83[4 + 0];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1451 - (91 + 1358)]] = v81[v83[3]][v81[v83[1 + 3]]];
									v848 = 4;
								end
								if ((394 == 394) and (v848 == 1)) then
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2 - 0]] = v81[v83[3 + 0]][v81[v83[11 - 7]]];
									v75 = v75 + 1;
									v848 = 3 - 1;
								end
								if (v848 == (11 - 7)) then
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[3];
									break;
								end
							end
						elseif (v84 > (313 + 104)) then
							local v3812;
							v81[v83[8 - 6]] = v81[v83[2 + 1]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[6 - 4]] = v81[v83[871 - (311 + 557)]];
							v75 = v75 + (164 - (117 + 46));
							v83 = v71[v75];
							v81[v83[1 + 1]] = v81[v83[507 - (268 + 236)]][v83[2 + 2]];
							v75 = v75 + (181 - (92 + 88));
							v83 = v71[v75];
							v81[v83[2]] = v81[v83[3 - 0]] + v81[v83[1088 - (745 + 339)]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v3812 = v83[2 + 0];
							do
								return v81[v3812](v13(v81, v3812 + (1 - 0), v83[1 + 2]));
							end
							v75 = v75 + (2 - 1);
							v83 = v71[v75];
							v3812 = v83[740 - (582 + 156)];
							do
								return v13(v81, v3812, v76);
							end
							v75 = v75 + (1771 - (268 + 1502));
							v83 = v71[v75];
							v81[v83[1448 - (219 + 1227)]] = v81[v83[1 + 2]] + v83[11 - 7];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[5 - 3]] = v81[v83[3]][v81[v83[12 - 8]]];
							v75 = v75 + (1 - 0);
							v83 = v71[v75];
							v81[v83[1978 - (1855 + 121)]] = v83[14 - 11];
						else
							local v3828 = 0 - 0;
							while true do
								if ((v3828 == (786 - (452 + 334))) or (48 >= 1010)) then
									v81[v83[2 - 0]] = v81[v83[1396 - (698 + 695)]][v81[v83[8 - 4]]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[4 - 1]][v83[8 - 4]];
									v3828 = 1 - 0;
								end
								if (2 == v3828) then
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3]][v83[4]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v3828 = 10 - 7;
								end
								if (v3828 == 5) then
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3 + 0]] + v83[1733 - (529 + 1200)];
									v75 = v75 + 1;
									v83 = v71[v75];
									v3828 = 3 + 3;
								end
								if (v3828 == (281 - (199 + 79))) then
									v81[v83[2 + 0]] = v81[v83[3]][v81[v83[4]]];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[2]][v81[v83[587 - (120 + 464)]]] = v81[v83[7 - 3]];
									v3828 = 4 + 0;
								end
								if (v3828 == (755 - (33 + 721))) then
									v75 = v75 + (1364 - (1061 + 302));
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[1732 - (719 + 1010)]][v81[v83[15 - 11]]];
									v75 = v75 + (940 - (446 + 493));
									v3828 = 1 + 1;
								end
								if (v3828 == (1150 - (602 + 542))) then
									v81[v83[2]] = v83[2 + 1];
									break;
								end
								if (v3828 == (9 - 5)) then
									v75 = v75 + (362 - (276 + 85));
									v83 = v71[v75];
									v81[v83[1382 - (816 + 564)]] = v81[v83[6 - 3]] + v83[4];
									v75 = v75 + (915 - (854 + 60));
									v3828 = 5;
								end
							end
						end
					elseif (v84 <= (1115 - (227 + 468))) then
						if (v84 == (210 + 209)) then
							v81[v83[531 - (54 + 475)]] = v81[v83[4 - 1]][v83[36 - (21 + 11)]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[2]] = v81[v83[1598 - (1351 + 244)]][v83[4 + 0]];
							v75 = v75 + (3 - 2);
							v83 = v71[v75];
							v81[v83[426 - (407 + 17)]] = v81[v83[1 + 2]][v81[v83[3 + 1]]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[951 - (174 + 775)]] = #v81[v83[1763 - (601 + 1159)]];
							v75 = v75 + (1149 - (388 + 760));
							v83 = v71[v75];
							v81[v83[2]][v81[v83[1 + 2]]] = v81[v83[1954 - (900 + 1050)]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[2]] = v81[v83[3 + 0]] + v83[1 + 3];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[1 + 1]] = v83[3];
						else
							v81[v83[6 - 4]] = v81[v83[3 + 0]][v81[v83[286 - (80 + 202)]]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[2 + 0]] = v83[8 - 5];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[2 - 0]] = v81[v83[11 - 8]][v81[v83[3 + 1]]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[666 - (308 + 356)]][v81[v83[3 + 0]]] = v81[v83[4]];
							v75 = v75 + (3 - 2);
							v83 = v71[v75];
							v81[v83[2 + 0]] = v83[4 - 1];
							v75 = v75 + (1055 - (1021 + 33));
							v83 = v71[v75];
							v81[v83[1053 - (46 + 1005)]] = v81[v83[3]] + v81[v83[4]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[2]] = v83[6 - 3];
						end
					elseif (v84 > 421) then
						v81[v83[2]] = v81[v83[3 + 0]][v81[v83[4 - 0]]];
						v75 = v75 + 1 + 0;
						v83 = v71[v75];
						v81[v83[3 - 1]] = v83[8 - 5];
						v75 = v75 + (1 - 0);
						v83 = v71[v75];
						v81[v83[4 - 2]] = v81[v83[2 + 1]][v81[v83[6 - 2]]];
						v75 = v75 + 1 + 0;
						v83 = v71[v75];
						v81[v83[1058 - (131 + 925)]] = v83[3];
						v75 = v75 + (1289 - (347 + 941));
						v83 = v71[v75];
						v81[v83[1623 - (893 + 728)]] = v81[v83[2 + 1]][v81[v83[2 + 2]]];
						v75 = v75 + 1;
						v83 = v71[v75];
						v81[v83[2 - 0]] = v81[v83[6 - 3]] / v81[v83[2 + 2]];
						v75 = v75 + (3 - 2);
						v83 = v71[v75];
						v81[v83[2 + 0]][v81[v83[911 - (599 + 309)]]] = v81[v83[1916 - (1598 + 314)]];
					else
						v81[v83[2 + 0]] = v81[v83[3]][v83[4]];
						v75 = v75 + (2 - 1);
						v83 = v71[v75];
						v81[v83[1616 - (274 + 1340)]] = v81[v83[3 + 0]][v83[2 + 2]];
						v75 = v75 + 1;
						v83 = v71[v75];
						v81[v83[1416 - (557 + 857)]] = v81[v83[8 - 5]][v81[v83[13 - 9]]];
						v75 = v75 + (1113 - (581 + 531));
						v83 = v71[v75];
						v81[v83[6 - 4]][v81[v83[1338 - (1314 + 21)]]] = v81[v83[4]];
						v75 = v75 + (1 - 0);
						v83 = v71[v75];
						v81[v83[2]] = v81[v83[1 + 2]] + v83[1193 - (487 + 702)];
						v75 = v75 + 1 + 0;
						v83 = v71[v75];
						v81[v83[3 - 1]] = v81[v83[8 - 5]] + v83[1 + 3];
						v75 = v75 + 1 + 0;
						v83 = v71[v75];
						v81[v83[540 - (86 + 452)]] = v81[v83[2 + 1]][v81[v83[4 + 0]]];
						v75 = v75 + (2 - 1);
						v83 = v71[v75];
						v81[v83[1074 - (123 + 949)]] = v83[916 - (836 + 77)];
					end
				elseif (v84 <= (1075 - (354 + 296))) then
					if (v84 <= 423) then
						v81[v83[94 - (5 + 87)]] = v81[v83[3 + 0]][v83[2 + 2]];
						v75 = v75 + 1;
						v83 = v71[v75];
						v81[v83[2 + 0]] = v61[v83[3]];
						v75 = v75 + (1 - 0);
						v83 = v71[v75];
						v81[v83[2 + 0]] = v81[v83[685 - (267 + 415)]][v83[4]];
						v75 = v75 + (2 - 1);
						v83 = v71[v75];
						v81[v83[2]] = v81[v83[3 + 0]][v81[v83[1 + 3]]];
						v75 = v75 + (2 - 1);
						v83 = v71[v75];
						v81[v83[2 + 0]][v81[v83[1 + 2]]] = v81[v83[9 - 5]];
						v75 = v75 + (1893 - (1799 + 93));
						v83 = v71[v75];
						v81[v83[1 + 1]] = v83[1 + 2];
					elseif ((v84 == (67 + 357)) or (4882 <= 4637)) then
						local v3883 = 19 - (6 + 13);
						while true do
							if ((v3883 == 3) or (2589 == 3155)) then
								v81[v83[1061 - (383 + 676)]] = v81[v83[343 - (119 + 221)]][v81[v83[1 + 3]]];
								v75 = v75 + (482 - (345 + 136));
								v83 = v71[v75];
								v81[v83[2 - 0]][v81[v83[3]]] = v81[v83[12 - 8]];
								v3883 = 7 - 3;
							end
							if ((17 - 11) == v3883) then
								v81[v83[478 - (345 + 131)]] = v83[1304 - (916 + 385)];
								break;
							end
							if (v3883 == (296 - (6 + 286))) then
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[2 + 0]] = v83[3 + 0];
								v75 = v75 + (292 - (151 + 140));
								v3883 = 8 - 3;
							end
							if ((1314 < 3816) and (v3883 == (959 - (32 + 922)))) then
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[845 - (322 + 520)]] + v81[v83[4 + 0]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v3883 = 2 + 4;
							end
							if (v3883 == (0 + 0)) then
								v81[v83[223 - (187 + 34)]] = v81[v83[3]][v81[v83[4 + 0]]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[1 + 1]] = v61[v83[299 - (194 + 102)]];
								v3883 = 553 - (49 + 503);
							end
							if (v3883 == (5 - 3)) then
								v83 = v71[v75];
								v81[v83[1351 - (12 + 1337)]] = v81[v83[6 - 3]][v81[v83[4 + 0]]];
								v75 = v75 + (1066 - (38 + 1027));
								v83 = v71[v75];
								v3883 = 3;
							end
							if (v3883 == (2 - 1)) then
								v75 = v75 + (122 - (11 + 110));
								v83 = v71[v75];
								v81[v83[817 - (199 + 616)]] = v83[2 + 1];
								v75 = v75 + (480 - (396 + 83));
								v3883 = 4 - 2;
							end
						end
					else
						v81[v83[1 + 1]] = v81[v83[3]][v83[1789 - (774 + 1011)]];
						v75 = v75 + (2 - 1);
						v83 = v71[v75];
						v81[v83[2]][v81[v83[3]]] = v81[v83[7 - 3]];
						v75 = v75 + 1;
						v83 = v71[v75];
						v81[v83[2]] = v81[v83[392 - (94 + 295)]] + v83[4];
						v75 = v75 + 1;
						v83 = v71[v75];
						v81[v83[1 + 1]] = v81[v83[1 + 2]] + v83[4];
						v75 = v75 + (1 - 0);
						v83 = v71[v75];
						v81[v83[2]] = v81[v83[6 - 3]][v81[v83[2 + 2]]];
						v75 = v75 + 1 + 0;
						v83 = v71[v75];
						v81[v83[2]] = v81[v83[4 - 1]][v83[10 - 6]];
						v75 = v75 + 1 + 0;
						v83 = v71[v75];
						v75 = v83[2 + 1];
					end
				elseif (v84 <= (884 - 457)) then
					if (v84 > (436 - (6 + 4))) then
						local v3893 = 0 - 0;
						while true do
							if (3 == v3893) then
								v81[v83[855 - (629 + 224)]][v81[v83[6 - 3]]] = v81[v83[1526 - (466 + 1056)]];
								v75 = v75 + (766 - (485 + 280));
								v83 = v71[v75];
								v81[v83[93 - (51 + 40)]] = v83[796 - (610 + 183)];
								break;
							end
							if (v3893 == (1 + 0)) then
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[7 - 4]][v83[4]];
								v75 = v75 + (773 - (572 + 200));
								v3893 = 2;
							end
							if (v3893 == 2) then
								v83 = v71[v75];
								v81[v83[1977 - (1598 + 377)]] = v81[v83[5 - 2]][v81[v83[4]]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v3893 = 3 + 0;
							end
							if (v3893 == (0 + 0)) then
								v81[v83[1280 - (881 + 397)]] = v81[v83[7 - 4]][v81[v83[1217 - (892 + 321)]]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[629 - (441 + 186)]] = v81[v83[3]][v83[4 + 0]];
								v3893 = 1;
							end
						end
					else
						v81[v83[2]][v81[v83[1424 - (606 + 815)]]] = v81[v83[18 - 14]];
					end
				elseif ((v84 == 428) or (3836 == 4618)) then
					local v3896 = 0 + 0;
					local v3897;
					local v3898;
					local v3899;
					while true do
						if (v3896 == (2 + 0)) then
							v83 = v71[v75];
							v81[v83[1174 - (1055 + 117)]] = v81[v83[691 - (266 + 422)]][v81[v83[4]]];
							v75 = v75 + (3 - 2);
							v83 = v71[v75];
							v3896 = 3;
						end
						if ((1894 - (1098 + 793)) == v3896) then
							v81[v83[2]] = v83[3];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v3899 = v83[1561 - (12 + 1547)];
							v3896 = 1362 - (149 + 1209);
						end
						if (v3896 == (1 + 0)) then
							v75 = v75 + (1015 - (6 + 1008));
							v83 = v71[v75];
							v81[v83[1348 - (603 + 743)]] = v83[243 - (152 + 88)];
							v75 = v75 + (318 - (207 + 110));
							v3896 = 3 - 1;
						end
						if (v3896 == (0 - 0)) then
							v3897 = nil;
							v3898 = nil;
							v3899 = nil;
							v81[v83[1835 - (1401 + 432)]] = v81[v83[5 - 2]][v81[v83[4]]];
							v3896 = 1038 - (838 + 199);
						end
						if (v3896 == 4) then
							v3898 = v81[v3899];
							v3897 = v81[v3899 + (5 - 3)];
							if ((2667 >= 9) and (v3897 > 0)) then
								if (v3898 > v81[v3899 + (1 - 0)]) then
									v75 = v83[433 - (320 + 110)];
								else
									v81[v3899 + 3] = v3898;
								end
							elseif (v3898 < v81[v3899 + (2 - 1)]) then
								v75 = v83[3];
							else
								v81[v3899 + (5 - 2)] = v3898;
							end
							break;
						end
					end
				else
					v81[v83[1 + 1]] = v81[v83[140 - (123 + 14)]][v81[v83[3 + 1]]];
					v75 = v75 + (2 - 1);
					v83 = v71[v75];
					v81[v83[104 - (62 + 40)]] = v81[v83[7 - 4]][v81[v83[4]]];
					v75 = v75 + (1098 - (823 + 274));
					v83 = v71[v75];
					do
						return v81[v83[966 - (134 + 830)]];
					end
					v75 = v75 + 1;
					v83 = v71[v75];
					v81[v83[4 - 2]] = v83[3];
					v75 = v75 + (3 - 2);
					v83 = v71[v75];
					v81[v83[1583 - (1430 + 151)]] = v81[v83[1361 - (104 + 1254)]] + v81[v83[428 - (161 + 263)]];
					v75 = v75 + (1 - 0);
					v83 = v71[v75];
					v81[v83[2]] = v83[1399 - (317 + 1079)];
					v75 = v75 + (1 - 0);
					v83 = v71[v75];
					v81[v83[2]] = v81[v83[8 - 5]] + v81[v83[4]];
					v75 = v75 + 1;
					v83 = v71[v75];
					v81[v83[317 - (76 + 239)]] = v83[376 - (349 + 24)];
					v75 = v75 + (1 - 0);
					v83 = v71[v75];
					v75 = v83[6 - 3];
				end
				v75 = v75 + 1 + 0;
			end
		end;
	end
	return v29(v28(), {}, v17)(...);
end
return vv9(), ...);